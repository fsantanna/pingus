#ifdef _RRECT_CEU
#error multiple include
#else
#define _RRECT_CEU

data AnchorX;
data AnchorX.Left;
data AnchorX.Center;
data AnchorX.Right;

data AnchorY;
data AnchorY.Top;
data AnchorY.Center;
data AnchorY.Bottom;

data AnchorXY with
    var AnchorX x;
    var AnchorY y;
end

data IRRect with
    var   Rect_     off;
    var   AnchorXY  a_off;
    var&? IRRect    ref;
    var   AnchorXY? a_ref;
    var   Rect_     abs;
    event void      changed;
end

code/tight IRRect_Set (var& IRRect rect) -> void do
    if rect.ref? then
        rect.abs.x = rect.ref!.abs.x + rect.off.x;
        rect.abs.y = rect.ref!.abs.y + rect.off.y;
        rect.abs.w = rect.off.w;
        rect.abs.h = rect.off.h;

        if rect.a_ref!.x is AnchorX.Center then
            rect.abs.x = rect.abs.x + rect.ref!.abs.w/2;
        else/if rect.a_ref!.x is AnchorX.Right then
            rect.abs.x = rect.abs.x + rect.ref!.abs.w;
        end

        if rect.a_ref!.y is AnchorY.Center then
            rect.abs.y = rect.abs.y + rect.ref!.abs.h/2;
        else/if rect.a_ref!.y is AnchorY.Bottom then
            rect.abs.y = rect.abs.y + rect.ref!.abs.h;
        end

    else
        rect.abs = rect.off;
    end

    if rect.a_off.x is AnchorX.Center then
        rect.abs.x = rect.abs.x - rect.abs.w/2;
    else/if rect.a_off.x is AnchorX.Right then
        rect.abs.x = rect.abs.x - rect.abs.w;
    end

    if rect.a_off.y is AnchorY.Center then
        rect.abs.y = rect.abs.y - rect.abs.h/2;
    else/if rect.a_off.y is AnchorY.Bottom then
        rect.abs.y = rect.abs.y - rect.abs.h;
    end
end

code/await RRect (var IRRect rect) -> (var& IRRect pub) -> FOREVER
do
    pub = &rect;
    loop do
        call IRRect_Set(&pub);
        emit pub.changed;
        par/or do
            await pub.changed;
        with
            if pub.ref? then
                await pub.ref!.changed;
            else
                await FOREVER;
            end
        end
    end
end

#endif
