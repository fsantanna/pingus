code/await ChoiceItem (var& IRRect rect, var _char_const_ptr value, var int n, var& IChoiceBox choicebox) -> FOREVER do
    vector[] byte value_ = []..(value as _char&&);
    event bool go_pause;
    par do
        pause/if go_pause do
            every outer.main.redraw do
                call ({Fonts::chalk_normal.render} as /nohold)( _origin_top_center, rect.abs.x + rect.abs.w/2, rect.abs.y, &&value_[0] as _char&&, *{Display::s_framebuffer});
            end
        end
    with
        every choicebox.go do
            if choicebox.current == n then
                emit go_pause(false);
                choicebox.value = []..value_;
            else
                emit go_pause(true);
            end
        end
    end
end
code/await ChoiceBox (var& IRRect rect, pool&[] ChoiceItem items, var& IChoiceBox choicebox) -> FOREVER do
    var& RectComponent component = spawn RectComponent(&rect);
    emit choicebox.go;
    var int tot = 0;
    loop _ in items do
        tot = tot + 1;
    end
    par do
        every (x,y) in component.component.on_primary_button_pressed do
            var int old = choicebox.current;
            x = x - (rect.abs.x as int);
            if x > rect.abs.w/2 then
                choicebox.current = (choicebox.current + 1) % tot;
            else
                choicebox.current = choicebox.current - 1;
                if choicebox.current < 0 then
                    choicebox.current = tot - 1;
                end
            end
            emit choicebox.go;
        end
    with
        every outer.main.redraw do
            if {globals::developer_mode} as bool then
                call {Display::s_framebuffer}:draw_rect( _Rect(rect.abs.x,rect.abs.w,rect.abs.w,rect.abs.h), _Color(0, 255, 255));
            end
            call {Fonts::chalk_normal}.render( _origin_top_center, rect.abs.x, rect.abs.y, "<", *{Display::s_framebuffer});
            call {Fonts::chalk_normal}.render( _origin_top_center, rect.abs.x+rect.abs.w, rect.abs.y, ">", *{Display::s_framebuffer});
        end
    end
end

