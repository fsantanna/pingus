code/await Entrance (var Vector2i pst_offset) -> (var Vector2i pst) -> FOREVER do
    { WORLDOBJ_FACTORY_READER.read_vector("position", p); }
    pst = val Vector2i(pst_offset.x+{p.x}, pst_offset.y+{p.y});
    var int owner_id = 0;
    { WORLDOBJ_FACTORY_READER.read_int("owner-id", @owner_id); }
    if (owner_id < 0 or owner_id > 3) then
        owner_id = 0;
    end
    var int release_rate = 150;
    var s8 direction = {ENTRANCE_MISC};
    {
        WORLDOBJ_FACTORY_READER.read_int("release-rate", @release_rate);
        WORLDOBJ_FACTORY_READER.read_string("direction", direction_str);
        if (direction_str == "left") {
            @direction = ENTRANCE_LEFT;
        } else if (direction_str == "right") {
            @direction = ENTRANCE_RIGHT;
        } else if (direction_str == "misc") {
            @direction = ENTRANCE_MISC;
        } else {
            log_error("unknown direction: '%1%'", direction_str);
        }
    };
    var int last_release = 150 - release_rate;
    var bool last_was_right = false;
    watching outer.game.go_armageddon do
        par do
            loop do
                await outer.game.dt
                until outer.game.game_time >= last_release+release_rate;
                last_release = outer.game.game_time;
                var s8 dir;
                if direction == {ENTRANCE_LEFT} then
                    dir = {LEFT};
                else/if direction == {ENTRANCE_RIGHT}  then
                    dir = {RIGHT};
                else/if direction == {ENTRANCE_MISC} then
                    if last_was_right then
                        dir = {LEFT};
                    else
                        dir = {RIGHT};
                    end
                    last_was_right = not last_was_right;
                else
                    _log_error("warning direction is wrong: %1%", direction);
                    dir = {RIGHT};
                end
                await Pingu_Spawn(owner_id, pst.x as int, pst.y as int, dir);
            end
        with
            var Vector2i pst2 = call Game_Pos_To_Smallmap(Vector2i(pst.x,pst.y));
            var& Surface_from_name sfc = spawn Surface_from_name("core/misc/smallmap_entrance",_);
            var int w = sfc.surface.framebuffer.get_width();
            var int h = sfc.surface.framebuffer.get_height();
            every outer.game.redraw_smallmap do
                call {Display::s_framebuffer}:draw_surface( sfc.surface.framebuffer, _Vector2i(outer.game.rect_smallmap.abs.x + pst2.x-w/2, outer.game.rect_smallmap.abs.y + pst2.y-h));
            end
        end
    end
    await FOREVER;
end
