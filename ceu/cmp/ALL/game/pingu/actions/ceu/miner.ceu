code/await Miner (void) -> _ActionName__Enum do
    vector[] byte left  = [] .. "pingus/player" .. (call Pingu_Get_Owner_Str() as _char&&) .. "/miner/left";
    vector[] byte right = [] .. "pingus/player" .. (call Pingu_Get_Owner_Str() as _char&&) .. "/miner/right";
    spawn RightLeftSprites(&outer.pingu.rect, &outer.pingu.direction, &left, &left, &right, &outer.game.dt);
    var int delay_count;
    loop delay_count do
        await outer.game.dt;
        if delay_count%4 != 0 then
            continue;
        end
        if call Pingu_Rel_Getpixel(0,-1) == {Groundtype::GP_NOTHING} then
            call Mine(true, delay_count);
            escape {ActionName::WALKER};
        else/if call Pingu_Rel_Getpixel(0,            -1)  == {Groundtype::GP_SOLID} or call Pingu_Rel_Getpixel(0, {pingu_height}) == {Groundtype::GP_SOLID} then
            if (call Pingu_Rel_Getpixel(0,-1) == {Groundtype::GP_SOLID}) then
                {Sound::PingusSound::play_sound("chink");};
            end
            call Mine(true, delay_count);
            call Pingu_Toggle_Direction();
            escape {ActionName::WALKER};
        else
            call Mine(false, delay_count);
            outer.pingu.rect.off.x = outer.pingu.rect.off.x + (outer.pingu.direction as int);
            outer.pingu.rect.off.y = outer.pingu.rect.off.y  + 1;
            emit outer.pingu.rect.changed;
        end
    end
    code/tight Mine (var bool final, var int delay_count) -> void do
        {
            static CollisionMask miner_radius( "pingus/common/miner_radius_gfx", "pingus/common/miner_radius");
            static CollisionMask miner_radius_left( "pingus/common/miner_radius_left_gfx", "pingus/common/miner_radius_left");
            static CollisionMask miner_radius_right( "pingus/common/miner_radius_right_gfx", "pingus/common/miner_radius_right");
        };
        if not final then
            if delay_count%2 == 0 then
                call Game_Remove({&miner_radius}, outer.pingu.rect.off.x - {miner_radius.get_width()/2} + (outer.pingu.direction as int), outer.pingu.rect.off.y - {miner_radius.get_height()} + 2);
            end
        else/if outer.pingu.direction == {LEFT} then
            call Game_Remove({&miner_radius_left}, outer.pingu.rect.off.x - {miner_radius_left.get_width()/2} + (outer.pingu.direction as int), outer.pingu.rect.off.y - {miner_radius_left.get_height()} + 2);
        else    // RIGHT
            call Game_Remove({&miner_radius_right}, outer.pingu.rect.off.x - {miner_radius_right.get_width()/2} + (outer.pingu.direction as int), outer.pingu.rect.off.y - {miner_radius_right.get_height()} + 2);
        end
    end
end
