#include "c.ceu"

native/pre do
    ##define private public
    ##define protected public
end

native do
    ##include <assert.h>

    ##include "external/logmich/include/logmich/log.hpp"
    ##include "pingus/resource.hpp"

    ##define XXX_PURE(x) x
    ##define XXX_NOHOLD(x) x
    ##define XXX_PTR2REF(x) x
    ##define THIS(tp) ((tp*)_STK_ORG)
    ##define THIS_F(tp) ((tp*)__ceu_org)

    ##define std__string std::string
    ##define Resource__load_sprite_desc(name) Resource::load_sprite_desc(name)
    ##define ResourceModifier__Enum ResourceModifier::Enum
end
native @pure _Resource__load_sprite_desc(), _Pathname();
native @plain _std__string, _Vector3f;
native @plain _Sprite, _Surface, _SpriteDescription;
native @plain _ResourceModifier__Enum;
native @pure   _XXX_PURE(), _XXX_PTR2REF();
native @nohold _XXX_NOHOLD();
native @nohold _delete();

#define AWAIT_UNTIL_MYSELF(TP,EVT)             \
    do                                         \
        var TP&& ptr = await EVT               \
                       until ptr == &&this.me; \
    end

input int SDL_DT;
input int WORLD_UPDATE;

data Position with
    var float x;
    var float y;
end

data Size with
    var int width;
    var int height;
end

data Vector2i with
    var int x;
    var int y;
end

data Vector3f with
    var float x;
    var float y;
    var float z;
end

interface IPinguHolder with
    var int number_of_exited;
    var int number_of_killed;
    var int number_of_alive;
    var int number_of_released;
    var int number_of_allowed;
end

interface IPingu with
    event _ActionName__Enum go_action;
    var   IPinguHolder&     holder;
    var   _Pingu&           me;
end

interface IPinguAction with
    var IPingu&           pingu;
    var _ActionName__Enum previous_action;
end

#include "pingus/world.ceu"

every 1s do
    var int e = 0;
    var int v = 0;
#if 0
    loop i in 255 do
        if _CEU_SYS_GO_EVTS[i] > v then
            e = i;
            v = _CEU_SYS_GO_EVTS[i];
        end
    end
    _printf(">>> [%8d] [%3d/%2i] S=%4d/%3d[new=(%6d-%6d)/cpy=(%4d-%4d)] I=%d/%d\n",
        _CEU_SYS_GO_NTRAILS_MAX,
        e, v,
        _SPRITE_CUR,      _SPRITE_TOT,
        0, 0, 0, 0,
        //{Sprite::NEW}, {Sprite::NEW_DEL}, {Sprite::CPY}, {Sprite::CPY_DEL},
        _SPRITE_IMPL_CUR, _SPRITE_IMPL_TOT);

    _CEU_SYS_GO_NTRAILS_MAX = 0;
    _memset(_CEU_SYS_GO_EVTS, 0, sizeof(int)*255);
#endif
end
