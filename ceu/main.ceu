#include "c.ceu"

native/plain
    _WorldmapNS__NodeId,
    _SDL_MouseButtonEvent,
    _SDL_MouseMotionEvent,
    _SDL_ResizeEvent,
    _SDL_KeyboardEvent,
    _Groundtype__GPType, _SmallMap, _SceneContext, _GroundMap, _CollisionMask,
    _ActionName__Enum,
    _Sprite, _Surface, _SpriteDescription, _GraphicContextState,
    _SpriteDescription_ptr,
    _char_const_ptr, _u8,
    _Pingu__PinguStatus,
    _std__string, _Vector3f, _Vector2i, _Color, _Rect, _Size,
    _origin_top_center,
    _cmd, _CommandLineOptions,
    _Input__Event, _Input__ButtonEvent,
    _ResourceModifier__Enum, _CollisionMap, _CollisionMap_ptr,
    _PingusLevel, _Result, _Levelset,
    _FramebufferSurface,
;

native/const
    _SDL_BUTTON_LEFT,
    _SDLK_a,
    _SDLK_F5,
    _SDLK_f,
    _SDLK_o,
    _SDLK_p,
    _SDLK_s,
    _SDLK_ESCAPE,
    _SDLK_LCTRL,
    _SDLK_RCTRL,
    _SDL_GRAB_ON,
    _SDL_GRAB_OFF,
;

native/nohold
    _SDL_GetKeyState,
    _XXX_NOHOLD,
    _delete, _log_error, _log_info, _log_debug, __,
    _ID, _snprintf,
;

native/pure
    _Resource__load_sprite_desc, _Pathname,
    _XXX_PURE, _XXX_PTR2REF,
;

native
    _load_framebuffer_sdl_surface,
    _SDL_WM_GrabInput,
    _config_manager,
    _framebuffer_type_from_string,
    _origin_top_left,
    _origin_top_right,
    _FileReader,
;

native/pre do
    ##define private public
    ##define protected public
    ##define DO {
    ##define END }
    ##define ID(x) (x)

    ##define typeof(x) __typeof__(x)

    class Vector3f;
    class GroundMap;
    class PinguHolder;
    class PingusLevel;
    class CollisionMap;
    class Pingu;
    class SmallMap;
    class SceneContext;

    ##include <assert.h>
    ##include <string>
    ##include <fstream>
    ##include "engine/display/display.hpp"
    ##include "engine/display/framebuffer.hpp"
    ##include "engine/display/graphic_context_state.hpp"
    ##include "engine/display/sdl_framebuffer_surface_impl.hpp"
    ##include "engine/display/sprite_description.hpp"
    ##include "engine/input/event.hpp"
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "external/logmich/include/logmich/log.hpp"
    ##include "math/vector3f.hpp"
    ##include "pingus/action_holder.hpp"
    ##include "pingus/action_name.hpp"
    ##include "pingus/colliders/pingu_collider.hpp"
    ##include "pingus/collision_map.hpp"
    ##include "pingus/collision_mask.hpp"
    ##include "pingus/config_manager.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/game_time.hpp"
    ##include "pingus/gettext.h"
    ##include "pingus/globals.hpp"
    ##include "pingus/ground_map.hpp"
    ##include "pingus/groundtype.hpp"
    ##include "pingus/levelset.hpp"
    ##include "pingus/pingu_enums.hpp"
    ##include "pingus/plf_res_mgr.hpp"
    ##include "pingus/prefab_file.hpp"
    ##include "pingus/resource.hpp"
    ##include "pingus/result.hpp"
    ##include "pingus/savegame.hpp"
    ##include "pingus/savegame_manager.hpp"
    ##include "pingus/stat_manager.hpp"
    ##include "pingus/string_format.hpp"
    ##include "pingus/worldmap/pathfinder.hpp"
    ##include "pingus/worldmap/path_graph.hpp"
    ##include "pingus/worldmap/path.hpp"
    ##include "pingus/worldmap/worldmap_story.hpp"
    ##include "tinygettext/dictionary_manager.hpp"
    ##include "tinygettext/language.hpp"
    ##include "util/overrride_file_reader.hpp"
    ##include "util/string_util.hpp"
    ##include "util/system.hpp"
    ##include "util/utf8.hpp"
    ##include "pingus/worldmap/pingus_worldmap.hpp"
    ##include "pingus/worldmap/path_graph.hpp"
    ##include "pingus/res_descriptor.hpp"
    ##include "engine/display/sprite_description.hpp"
    ##include "pingus/worldmap/dot.hpp"
    ##include "util/sexpr_file_writer.hpp"

    typedef const char* char_const_ptr;
    typedef CollisionMap* CollisionMap_ptr;
    typedef SpriteDescription* SpriteDescription_ptr;

    enum EntranceDirection { ENTRANCE_LEFT, ENTRANCE_RIGHT, ENTRANCE_MISC };
    enum { BRIDGER_WALKING, BRIDGER_BUILDING };
    enum { BRIDGER_MAX_BRICKS = 15 };
    enum { BRIDGER_brick_length = 16 };
    enum Dir { LEFT = -1, NONE = 0, RIGHT = +1 };
    enum { PS_ALIVE, PS_EXITED, PS_DEAD };
    enum {
        PINGUSMENU_STORY,
        PINGUSMENU_EDITOR,
        PINGUSMENU_LEVELSETS,
        PINGUSMENU_EXIT
    };

    extern FramebufferSurface* load_framebuffer_sdl_surface(const Pathname& filename, ResourceModifier::Enum modifier);

    ##define Groundtype__GPType     Groundtype::GPType
    ##define std__string std::string
    ##define Resource__load_sprite_desc(name) Resource::load_sprite_desc(name)
    ##define ResourceModifier__Enum ResourceModifier::Enum
    ##define Input__Event Input::Event
    ##define Input__ButtonEvent Input::ButtonEvent
    ##define WorldmapNS__NoNode           WorldmapNS::NoNode
    ##define WorldmapNS__PathGraph        WorldmapNS::PathGraph
    ##define WorldmapNS__Path             WorldmapNS::Path
    ##define WorldmapNS__PathfinderResult WorldmapNS::PathfinderResult
    ##define ActionName__Enum ActionName::Enum
    ##define Pingu__PinguStatus Pingu::PinguStatus
    ##define PinguAction_shared_ptr std::shared_ptr<PinguAction>
    ##define WorldmapNS__NodeId WorldmapNS::NodeId
    ##define WorldmapNS__Dot WorldmapNS::Dot

    static CommandLineOptions cmd;
    static PingusLevel plf;
    static Result result;
    static Pathname filename, filename_credits;
    static FileReader reader;
end

input _CommandLineOptions&& MAIN;
input (int,int) ON_POINTER_MOVE;
input _Input__ButtonEvent&& ON_BUTTON_PRESSED;
input _Input__ButtonEvent&& ON_BUTTON_RELEASED;
input (int,int) ON_PRIMARY_BUTTON_PRESSED;
input (int,int) ON_PRIMARY_BUTTON_RELEASED;
input (int,int) ON_SECONDARY_BUTTON_PRESSED;
input (int,int) ON_SECONDARY_BUTTON_RELEASED;

data Color with
    var u8 r;
    var u8 g;
    var u8 b;
    var u8 a;
end

data Position with
    var int x;
    var int y;
end

data Rect with
    var   int x;
    var   int y;
    var   int w;
    var   int h;
    var&? Rect off;
end

code/tight/recursive Rect_Off_ (var& Rect rect, var& Rect ret) -> void do
    if rect.off? then
        call/recursive Rect_Off_(&rect.off!, &ret);
    end
    ret.x = ret.x + rect.x;
    ret.y = ret.y + rect.y;
    ret.w = ret.w + rect.w;
    ret.h = ret.h + rect.h;
end

code/tight/recursive Rect_Off (var& Rect rect, var& Rect ret) -> void do
    ret = val Rect(0,0,0,0,_);
    call/recursive Rect_Off_(&rect, &ret);
end

data Size with
    var int width;
    var int height;
end

data Vector2i with
    var int x;
    var int y;
end

data Vector3f with
    var float x;
    var float y;
    var float z;
end

#include "engine/input/sdl_driver.ceu"
#include "engine/gui/rect_component.ceu"

#include "pingus/config_manager.ceu"

data IMain with
    var Rect     center;
    event void go_options;
    event int  dt;
    event void redraw;
end
var IMain main = _;

#include "engine/display/surface.ceu"
#include "engine/display/sprite.ceu"
#include "engine/gui/surface_button.ceu"
#include "pingus/right_left_sprites.ceu"

// SCREENS

#include "pingus/screens/wood.ceu"

code/await Start_Game_Result_Loop (var& _PingusLevel plf, var& _Result result)
            -> void
do
    var bool go = do ()
        #include "pingus/screens/start.ceu"
    end;
    if go then
        loop do
            do ()
                #include "pingus/screens/game/game.ceu"
            end
            var bool r = do ()
                #include "pingus/screens/result.ceu"
            end;
            if not r then
                break;
            end
        end
    end
end

#include "pingus/screens/menu/menu.ceu"
#include "pingus/screens/levels/levels.ceu"
#include "pingus/screens/options/options.ceu"
#include "pingus/screens/credits.ceu"
#include "pingus/screens/story.ceu"

#if 0
#include "pingus/global_event.ceu"

var ConfigManager config_manager;
var GlobalEvent _ with
    this.config_manager = &config_manager;
end;
#endif

event bool go_pause;

var _CommandLineOptions&& cmd = await MAIN;
_cmd = *cmd;

spawn SDL_Driver();

par/or do
    await SDL_QUIT;
with
    var int dt;
    every dt in SDL_DT do
        emit main.dt(dt);
    end
with
    every SDL_REDRAW do
        emit main.redraw;
    end
with
    loop do
        main.center = val Rect({Display::get_width()/2},
                               {Display::get_height()/2},
                               0, 0,
                               _);
        await SDL_RESIZE;
    end
with
    pause/if go_pause do
        if {cmd.rest.is_set()} as bool then
            {
                filename = Pathname(cmd.rest.get(), Pathname::SYSTEM_PATH);
            }
            if {StringUtil::has_suffix(cmd.rest.get(), ".pingus-demo")} as bool then
// DEMO
                _ceu_dbg_assert({!"NOT PORTED"});
            else/if {StringUtil::has_suffix(cmd.rest.get(), ".font")} as bool then
// FONT
                _ceu_dbg_assert({!"NOT PORTED"});
            else/if {StringUtil::has_suffix(cmd.rest.get(), ".credits")} as bool then
// CREDITS
                { filename_credits = filename; };
                await Credits();
            else/if {StringUtil::has_suffix(cmd.rest.get(), ".worldmap")} as bool then
// WORLDMAP
                loop do
                    vector[] byte worldmap_return_filename;
                    var int ret = do ()
                        #include "pingus/screens/worldmap/worldmap.ceu"
                    end;
                    if ret=={WORLDMAP_RETURN_STORY_MAP} or ret=={WORLDMAP_RETURN_STORY_CREDITS}
                    then
                        {
                            reader = FileReader::parse(Pathname(@(&&worldmap_return_filename[0] as _char&&), Pathname::DATA_PATH));
                        }
                        var bool is_click = await Story();
                        if is_click and ret=={WORLDMAP_RETURN_STORY_CREDITS} then
                            {
                                filename_credits = Pathname("credits/pingus.credits",Pathname::DATA_PATH);
                            }
                            await Credits();
                        end
                    else/if ret == {WORLDMAP_RETURN_LEVEL} then
_printf(">>> %s\n", &&worldmap_return_filename[0]);
                        {
                            plf = PLFResMgr::load_plf(std::string(@(&&worldmap_return_filename[0] as _char&&)));
                        }
                        var& _PingusLevel plf    = &_ID({&plf})    finalize (plf) with end;
                        var& _Result      result = &_ID({&result}) finalize (result) with end;
                        await Start_Game_Result_Loop(&plf, &result);
                    else
                        _ceu_dbg_assert(ret == {WORLDMAP_RETURN_EXIT});
                        escape 0;
                    end
                end
            else/if {StringUtil::has_suffix(cmd.rest.get(), ".story")} as bool then
// STORY
                {
                    reader = FileReader::parse(Pathname(cmd.rest.get(), Pathname::SYSTEM_PATH));
                }
                await Story();
            else/if {StringUtil::has_suffix(cmd.rest.get(), ".levelset")} as bool then
// LEVELSET
                {
                    static std::shared_ptr<Levelset> levelset;
                    levelset = Levelset::from_file(Pathname(cmd.rest.get(), Pathname::SYSTEM_PATH));
                };
                var& _Levelset levelset = &_ID({levelset.get()})
                                            finalize (levelset) with
                                                // TODO
                                            end;
                loop do
                    var int v = await Levels(&levelset);
                    if v == -1 then
                        break;
                    end
                    var& _PingusLevel plf    = &_ID(&&{@levelset.get_level(@v)}:plf) finalize (plf) with end;
                    var& _Result      result = &_ID({&result}) finalize (result) with end;
                    await Start_Game_Result_Loop(&plf, &result);
                end
            else
// LEVEL
                { plf = PLFResMgr::load_plf_from_filename(Pathname(cmd.rest.get(), Pathname::SYSTEM_PATH)); }
                var& _PingusLevel plf    = &_ID({&plf}) finalize (plf) with end;
                var& _Result      result = &_ID({&result}) finalize (result) with end;
                await Start_Game_Result_Loop(&plf, &result);
            end
        else
// MENU
            loop do
                var int opt = await PingusMenu();
                if opt == {PINGUSMENU_STORY} then
                    _ceu_dbg_assert({!"NOT PORTED"});
                else/if opt == {PINGUSMENU_EDITOR} then
                    _ceu_dbg_assert({!"NOT PORTED"});
                else/if opt == {PINGUSMENU_LEVELSETS} then
                    do ()
                        #include "pingus/screens/levels/menu.ceu"
                    end
                else/if opt == {PINGUSMENU_EXIT} then
                    escape 0;
                else
                    _ceu_dbg_assert({!"bug found"});
                end
            end
        end
    end
with
// OPTIONS
    loop do
        watching main.go_options do
            loop do
// TODO
                var _SDL_KeyboardEvent&& key = await SDL_KEYDOWN;
                var _u8&& keystate = _SDL_GetKeyState(null);
                var bool has_ctrl = (keystate[_SDLK_LCTRL] as bool) or
                                    (keystate[_SDLK_RCTRL] as bool);
                if key:keysym.sym == _SDLK_F5
                or key:keysym.sym == _SDLK_o  and has_ctrl
                then
                    break;
                end
            end
        end
        emit go_pause(true);
        do finalize with
            emit go_pause(false);
        end
        await OptionMenu();
    end
with
#if 0
    var Sprite _ = Sprite.build(CURSOR);
  cursor = Sprite("core/cursors/animcross");
    if (globals::software_cursor)
      cursor.update(previous_frame_time);

  // Draw the mouse pointer
  if (globals::software_cursor)
    cursor.render(mouse_pos.x, mouse_pos.y, *Display::get_framebuffer());

  show_software_cursor(globals::software_cursor);
void ScreenManager::show_software_cursor(bool visible) {
  globals::software_cursor = visible;
  if (globals::software_cursor) {
    SDL_ShowCursor(SDL_DISABLE);
  } else {
    SDL_ShowCursor(SDL_ENABLE);
  }
}
#endif

    {globals::print_fps = 1;};

    spawn () do
        #include "pingus/fps_counter.ceu"
    end

    every main.redraw do
        if {globals::developer_mode} != 0 then
            var int height;
            if {globals::print_fps} != 0 then
                height = 60;
            else
                height = 35;
            end
            call {Fonts::pingus_small}.render(
                _origin_top_center,
                {Display::get_width()}/2, height,
                "Developer Mode",
                *{Display::s_framebuffer}
            );
        end
    end
end

escape 0;
