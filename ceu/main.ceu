#include "c.ceu"

native/plain _char_const_ptr, _u8;
native
    _framebuffer_type_from_string,
    _origin_top_left,
    _origin_top_right,
;

native/pre do
    ##define private public
    ##define protected public

    ##define typeof(x) __typeof__(x)
    typedef const char* char_const_ptr;

    ##include "engine/input/event.hpp"
    ##include "pingus/globals.hpp"
    ##include "pingus/fonts.hpp"
    ##include "engine/display/display.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "util/string_util.hpp"
    ##include "pingus/game_time.hpp"
    ##include "pingus/string_format.hpp"

    ##define std__string std::string
    ##define Resource__load_sprite_desc(name) Resource::load_sprite_desc(name)
    ##define ResourceModifier__Enum ResourceModifier::Enum
    ##define Input__Event Input::Event
    ##define Input__ButtonEvent Input::ButtonEvent

    static CommandLineOptions cmd;

    ##include "pingus/result.hpp"
    static PingusLevel plf;
    static Result result;
end

native/pos do
    ##include <assert.h>

    ##include "external/logmich/include/logmich/log.hpp"
    ##include "pingus/resource.hpp"
    ##include "pingus/plf_res_mgr.hpp"

    //##define XXX_PURE(x) x
    //##define XXX_NOHOLD(x) x
    //##define XXX_PTR2REF(x) x
    //##define THIS(tp) ((tceu_code_mem_####tp*)_ceu_mem)
    //##define THIS_F(tp) ((tp*)__ceu_this)
    ##define ID(x) (x)
end
native/pure _Resource__load_sprite_desc, _Pathname;
native/plain _std__string, _Vector3f, _Vector2i, _Color, _Rect, _Size;
native/plain _origin_top_center;
native/plain _cmd, _CommandLineOptions;
native/plain _Input__Event, _Input__ButtonEvent;
native/plain _ResourceModifier__Enum;
native/plain _PingusLevel, _Result, _Levelset;
native/pure   _XXX_PURE, _XXX_PTR2REF;
native/nohold _XXX_NOHOLD;
native/nohold _delete, _log_error, _log_info, __;
native/nohold _ID;

#define AWAIT_UNTIL_MYSELF(TP,EVT)             \
    do                                         \
        var TP&& ptr = await EVT               \
                       until ptr == &&this.me; \
    end

input _CommandLineOptions&& MAIN;

input (int,int) ON_POINTER_MOVE;
input _Input__ButtonEvent&& ON_BUTTON_PRESSED;
input _Input__ButtonEvent&& ON_BUTTON_RELEASED;
input (int,int) ON_PRIMARY_BUTTON_PRESSED;
input (int,int) ON_PRIMARY_BUTTON_RELEASED;
input (int,int) ON_SECONDARY_BUTTON_PRESSED;
input (int,int) ON_SECONDARY_BUTTON_RELEASED;
input void WORLD_UPDATE;

data Color with
    var u8 r, g, b, a;
end

data Position with
    var float x;
    var float y;
end

data Rect with
    var int left;
    var int top;
    var int width;
    var int height;
end

data Size with
    var int width;
    var int height;
end

data Vector2i with
    var int x;
    var int y;
end

data Vector3f with
    var float x;
    var float y;
    var float z;
end

#include "engine/input/sdl_driver.ceu"

#include "pingus/fps_counter.ceu"
#include "pingus/config_manager.ceu"

// SCREENS

#include "pingus/screens/start_screen.ceu"
#include "pingus/screens/game_session.ceu"
#include "pingus/screens/result_screen.ceu"

code/await Start_Game_Result_Loop (var& _PingusLevel plf, var& _Result result)
            -> void
do
    var bool go = await StartScreen(&plf);
    if go then
        loop do
            await GameSession(&plf);
            var bool retry = await ResultScreen(&result);
            if not retry then
                break;
            end
        end
    end
end

event void go_options;

#include "pingus/screens/pingus_menu.ceu"
#include "pingus/screens/level_menu.ceu"
#include "pingus/screens/option_menu.ceu"

#if 0
interface IPingu with
    pool IPingu[]& pingus;

    var  Rect               rect;
    var   s8                direction;
    var   _ActionName__Enum current_action;
    var   _ActionName__Enum wall_action;

output:
    var char[]& name;

    event    _ActionName__Enum           go_action;
    function (_ActionName__Enum) => bool check_action;

    function (void)         => float        get_x;
    function (void)         => float        get_y;
    function (void)         => int          get_xi;
    function (void)         => int          get_yi;
    function (void)         => Vector3f     get_pos;
    function (float)        => void         set_x;
    function (float)        => void         set_y;
    function (float,float)  => void         set_pos;
    function (void)         => Vector3f     get_velocity;
    function (Vector3f)     => void         set_velocity;
    function (void)         => _std__string get_owner_str;
    function (s8)           => void         set_direction;
    function (void)         => void         change_direction;
    function (int,int)      => bool         head_collision_on_walk;
    function (int,int)      => int          rel_getpixel;
    function (void)         => Vector3f     get_center_pos;
    function (int,int)      => bool         is_over;
    function (int,int)      => float        dist;
    function (int,int,int,int) => bool      is_inside;

    function (void)         => int          get_id;
    function (void)         => int          get_owner;
end

interface IPinguAction with
    pool IPingu[]& pingus;
    var IPingu& pingu;
    var _ActionName__Enum previous_action;
end

interface IWorld with
    var Rect rect;
output:
    var _GraphicContextState& state;

    function (void)=>int get_width;
    function (void)=>int get_height;
    function (void)=>_CollisionMap&& get_colmap;
    function (_CollisionMask&& mask,int x,int y,_Groundtype__GPType type)=>void put;
    function (_CollisionMask&& mask,int x,int y)=>void remove;
    function (void)=>Vector2i get_offset;
end

interface IWorldMap with
    function (void)=>Vector2i get_offset;
end

event void go_pause_toggle;
event bool go_forward;
event void go_armageddon;
event int  ok_pingu;
event (float,float,s8,int)      go_create_pingu;
event (float,float)             go_create_pingu_particles;
event (float,float,float,float) go_create_smoke_particles;


var IWorldMap&&? worldmap;
var IWorld&&? world;
var float gravity = 0.2;
var Vector2i offset = Vector2i(0,0);

var char[] worldmap_return_filename;

#include "pingus/global_event.ceu"
#include "pingus/worldmap/worldmap_screen.ceu"
#include "pingus/screens/credits.ceu"
#include "pingus/screens/story_screen.ceu"

native/pre do
    static Pathname filename, filename_credits;
    static FileReader reader;
end

var ConfigManager config_manager;
var GlobalEvent _ with
    this.config_manager = &config_manager;
end;
#endif

event bool go_pause;

var _CommandLineOptions&& cmd = await MAIN;
_cmd = *cmd;

spawn SDL_Driver();

par/or do
    await SDL_QUIT;
with
    pause/if go_pause do
        if {cmd.rest.is_set()} as bool then
#if 0
            _filename = _Pathname(_cmd.rest.get(), {Pathname::SYSTEM_PATH});
            if {StringUtil::has_suffix(cmd.rest.get(), ".pingus-demo")} then
// DEMO
                _ceu_dbg_assert({!"NOT PORTED"});
            else/if {StringUtil::has_suffix(cmd.rest.get(), ".font")} then
// FONT
                _ceu_dbg_assert({!"NOT PORTED"});
            else/if {StringUtil::has_suffix(cmd.rest.get(), ".credits")} then
// CREDITS
                do Credits with
                    this.filename = &&_filename;
                end;
            else/if {StringUtil::has_suffix(cmd.rest.get(), ".worldmap")} then
// WORLDMAP
                loop do
                    var int ret =
                        do WorldmapScreen with
                            this.filename = &&_filename;
                        end;
                    if ret == _WORLDMAP_RETURN_STORY_MAP
                    or ret == _WORLDMAP_RETURN_STORY_CREDITS
                    then
                        finalize
                            _reader = {FileReader::parse}(_Pathname((_char&&)&&global:worldmap_return_filename, {Pathname::DATA_PATH}));
                        with end
                        var bool is_click =
                            do StoryScreen with
                                this.reader = &&_reader;
                            end;
                        if is_click and ret==_WORLDMAP_RETURN_STORY_CREDITS then
                            _filename_credits = _Pathname("credits/pingus.credits",{Pathname::DATA_PATH});
                            do Credits with
                                this.filename = &&_filename_credits;
                            end;
                        end
                    else/if ret == _WORLDMAP_RETURN_LEVEL then
                        finalize
                            _plf = {PLFResMgr::load_plf}({std::string}((_char&&)&&worldmap_return_filename)
                                    finalize with end);
                        with end
                        do Start_Game_Result_Loop with
                            this.plf    = &_XXX_PURE(&&_plf);
                            this.result = &_XXX_PURE(&&_result);
                        end;
                    else
                        _ceu_dbg_assert(ret == _WORLDMAP_RETURN_EXIT);
                        escape 0;
                    end
                end
            else/if {StringUtil::has_suffix(cmd.rest.get(), ".story")} then
// STORY
                finalize
                    _reader = {FileReader::parse}(_Pathname(_cmd.rest.get(), {Pathname::SYSTEM_PATH}));
                with end
                do StoryScreen with
                    this.reader = &&_reader;
                end;
#endif
            if false then
            else/if {StringUtil::has_suffix(cmd.rest.get(), ".levelset")} as bool then
// LEVELSET
                {
                    static std::shared_ptr<Levelset> levelset;
                    levelset = Levelset::from_file(Pathname(cmd.rest.get(), Pathname::SYSTEM_PATH));
                };
                var&? _Levelset levelset = &_ID({levelset.get()})
                                            finalize (levelset) with
                                                // TODO
                                            end;
                loop do
                    var int v = await LevelSelector(&levelset!);
                    if v == -1 then
                        break;
                    end
                    var&? _PingusLevel plf    = &_ID(&&{@levelset!.get_level(@v)}:plf) finalize (plf) with end;
                    var&? _Result      result = &_ID({&result}) finalize (result) with end;
                    await Start_Game_Result_Loop(&plf, &result);
                end
            else
// LEVEL
                { plf = PLFResMgr::load_plf_from_filename(Pathname(cmd.rest.get(), Pathname::SYSTEM_PATH)); }
                var&? _PingusLevel plf    = &_ID({&plf}) finalize (plf) with end;
                var&? _Result      result = &_ID({&result}) finalize (result) with end;
                await Start_Game_Result_Loop(&plf, &result);
            end
        else
// MENU
            loop do
                var int opt = await PingusMenu();
                if opt == {PINGUSMENU_STORY} then
                    _ceu_dbg_assert({!"NOT PORTED"});
                else/if opt == {PINGUSMENU_EDITOR} then
                    _ceu_dbg_assert({!"NOT PORTED"});
                else/if opt == {PINGUSMENU_LEVELSETS} then
                    await LevelMenu();
                else/if opt == {PINGUSMENU_EXIT} then
                    escape 0;
                else
                    _ceu_dbg_assert({!"bug found"});
                end
            end
        end
    end
with
// OPTIONS
    loop do
        watching go_options do
            loop do
// TODO
                var _SDL_KeyboardEvent&& key = await SDL_KEYDOWN;
                var _u8&& keystate = _SDL_GetKeyState(null);
                var bool has_ctrl = (keystate[_SDLK_LCTRL] as bool) or
                                    (keystate[_SDLK_RCTRL] as bool);
                if key:keysym.sym == _SDLK_F5
                or key:keysym.sym == _SDLK_o  and has_ctrl
                then
                    break;
                end
            end
        end
        emit go_pause(true);
        do finalize with
            emit go_pause(false);
        end
        await OptionMenu();
    end
with
#if 0
    var Sprite _ = Sprite.build(CURSOR);
  cursor = Sprite("core/cursors/animcross");
    if (globals::software_cursor)
      cursor.update(previous_frame_time);

  // Draw the mouse pointer
  if (globals::software_cursor)
    cursor.render(mouse_pos.x, mouse_pos.y, *Display::get_framebuffer());

  show_software_cursor(globals::software_cursor);
void ScreenManager::show_software_cursor(bool visible) {
  globals::software_cursor = visible;
  if (globals::software_cursor) {
    SDL_ShowCursor(SDL_DISABLE);
  } else {
    SDL_ShowCursor(SDL_ENABLE);
  }
}
#endif

    {globals::print_fps = 1;};
    spawn FPS_Counter();
    every SDL_REDRAW do
        if {globals::developer_mode} != 0 then
            var int height;
            if {globals::print_fps} != 0 then
                height = 60;
            else
                height = 35;
            end
            call {Fonts::pingus_small}.render(
                _origin_top_center,
                {Display::get_width()}/2, height,
                "Developer Mode",
                *{Display::s_framebuffer}
            );
        end
    end
end

escape 0;
