#include "c.ceu"

native/pre do
    ##define private public
    ##define protected public

    ##define std__string std::string
    ##define Resource__load_sprite_desc(name) Resource::load_sprite_desc(name)
    ##define ResourceModifier__Enum ResourceModifier::Enum
    ##define Input__Event Input::Event
    ##define Input__ButtonEvent Input::ButtonEvent
end

native do
    ##include <assert.h>

    ##include "external/logmich/include/logmich/log.hpp"
    ##include "pingus/resource.hpp"

    ##define XXX_PURE(x) x
    ##define XXX_NOHOLD(x) x
    ##define XXX_PTR2REF(x) x
    ##define THIS(tp) ((tp*)_ceu_org)
    ##define THIS_F(tp) ((tp*)__ceu_this)
end
native @pure _Resource__load_sprite_desc(), _Pathname();
native @plain _std__string, _Vector3f, _Vector2i, _Color, _Rect, _Size;
native @plain _Sprite, _Surface, _SpriteDescription;
native @plain _Input__Event, _Input__ButtonEvent;
native @plain _ResourceModifier__Enum;
native @plain _PingusLevel;
native @pure   _XXX_PURE(), _XXX_PTR2REF();
native @nohold _XXX_NOHOLD();
native @nohold _delete(), _sscanf(), _log_error();

#define AWAIT_UNTIL_MYSELF(TP,EVT)             \
    do                                         \
        var TP&& ptr = await EVT               \
                       until ptr == &&this.me; \
    end

input int SDL_DT;
input _Input__Event&& ON_INPUT_EVENT;
input (int,int) ON_POINTER_MOVE;
input (int,int) ON_PRIMARY_BUTTON_PRESSED;
input (int,int) ON_PRIMARY_BUTTON_RELEASED;
input (int,int) ON_SECONDARY_BUTTON_PRESSED;
input (int,int) ON_SECONDARY_BUTTON_RELEASED;
input float ON_ACTION_AXIS_MOVE;
input _DrawingContext&& SCREENMANAGER_DRAW;
input float SCREENMANAGER_UPDATE;
input void WORLD_UPDATE;

data Color with
    var u8 r, g, b, a;
end

data Position with
    var float x;
    var float y;
end

data Rect with
    var int left;
    var int top;
    var int width;
    var int height;
end

data Size with
    var int width;
    var int height;
end

data Vector2i with
    var int x;
    var int y;
end

data Vector3f with
    var float x;
    var float y;
    var float z;
end

interface IPingu with
    pool IPingu[]& pingus;

    var  float              pos_x, pos_y;
    var   s8                direction;
    var   _ActionName__Enum current_action;
    var   _ActionName__Enum wall_action;
    var   _ActionName__Enum fall_action;

    event    _ActionName__Enum           go_action;
    function (_ActionName__Enum) => bool check_action;

    function (void)         => float        get_x;
    function (void)         => float        get_y;
    function (void)         => int          get_xi;
    function (void)         => int          get_yi;
    function (void)         => Vector3f     get_pos;
    function (float)        => void         set_x;
    function (float)        => void         set_y;
    function (float,float)  => void         set_pos;
    function (void)         => Vector3f     get_velocity;
    function (Vector3f)     => void         set_velocity;
    function (void)         => _std__string get_owner_str;
    function (s8)           => void         set_direction;
    function (void)         => void         change_direction;
    function (int,int)      => bool         head_collision_on_walk;
    function (int,int)      => int          rel_getpixel;
    function (void)         => Vector3f     get_center_pos;
    function (int,int)      => bool         is_over;
    function (int,int)      => float        dist;
    function (int,int,int,int) => bool      is_inside;

    function (void)         => int          get_id;
    function (void)         => int          get_owner;
    function (void)         => char[]&      get_name;
end

data PingusCounter with
    var int number_of_exited;
    var int number_of_killed;
    var int number_of_alive;
    var int number_of_released;
    var int number_of_allowed;
    var int number_to_save;
end

interface IPinguAction with
    pool IPingu[]& pingus;
    var IPingu& pingu;
    var _ActionName__Enum previous_action;
end

interface IWorld with
    function (void)=>int get_width;
    function (void)=>int get_height;

    function (void)=>_CollisionMap&&       get_colmap;
    function (void)=>_GraphicContextState& get_state;
    function (void)=>_SceneContext&        get_scene_context;

    function (_CollisionMask&& mask,int x,int y,_Groundtype__GPType type)=>void put;
    function (_CollisionMask&& mask,int x,int y)=>void remove;
end

interface Global with
    event void go_options;
    event void go_pause_toggle;
    event bool go_forward;
    event void go_armageddon;
    event int  ok_pingu;
    event (float,float,s8,int)      go_create_pingu;
    event (float,float)             go_create_pingu_particles;
    event (float,float,float,float) go_create_smoke_particles;

    var IWorld&&? world;
    var float gravity;
end

event void go_options;
event void go_pause_toggle;
event bool go_forward;
event void go_armageddon;
event int  ok_pingu;
event (float,float,s8,int)      go_create_pingu;
event (float,float)             go_create_pingu_particles;
event (float,float,float,float) go_create_smoke_particles;

var IWorld&&? world;
var float gravity = 0.2;

input _SDL_KeyboardEvent&& SDL_KEYDOWN;
input _SDL_KeyboardEvent&& SDL_KEYUP;
input _PingusLevel&&       MAIN;

event bool go_pause;

#include "pingus/screens/credits.ceu"
#include "pingus/screens/story_screen.ceu"
#include "pingus/screens/pingus_menu.ceu"
#include "pingus/screens/option_menu.ceu"
#include "pingus/screens/start_screen.ceu"
#include "pingus/screens/result_screen.ceu"
#include "pingus/screens/game_session.ceu"
#include "pingus/screens/level_menu.ceu"

native/pre do
    ##include "pingus/result.hpp"
    static PingusLevel CEU_MAIN_LEVEL;
    static Result GAMESESSION_RESULT;
    static Pathname filename_credits("data/credits/pingus.credits", Pathname::SYSTEM_PATH);
    static FileReader reader_story = FileReader::parse(Pathname("data/stories/tutorial_intro.story",
                                                       Pathname::SYSTEM_PATH));
end
var _PingusLevel&& plf = await MAIN;
_CEU_MAIN_LEVEL = *plf;

finalize with
    {ScreenManager::instance()->pop_screen();};
end;

var StoryScreen s with
    this.reader = &&_reader_story;
end;
kill s;
var Credits c with
    this.filename = &&_filename_credits;
end;
kill c;

par do
    pause/if go_pause do
        loop do
            var int opt = do PingusMenu;
            if opt == _PINGUSMENU_STORY then
                _assert(not "NOT PORTED");
            else/if opt == _PINGUSMENU_EDITOR then
                _assert(not "NOT PORTED");
            else/if opt == _PINGUSMENU_LEVELSETS then
                do LevelMenu;
            else/if opt == _PINGUSMENU_EXIT then
                escape 0;
            else
                //do_start("worldmaps/tutorial.worldmap");
#if 0
void PingusMenu::do_start(const std::string &filename)
{ // Start the story or worldmap mode
  Sound::PingusSound::play_sound ("letsgo");

  std::shared_ptr<WorldmapNS::WorldmapScreen> worldmap_screen = std::make_shared<WorldmapNS::WorldmapScreen>();
  worldmap_screen->load(Pathname(filename, Pathname::DATA_PATH));
  ScreenManager::instance()->push_screen(worldmap_screen);

  bool story_seen = false;
  StatManager::instance()->get_bool("tutorial-startstory-seen", story_seen); // FIXME: Hardcoding tutorial is evil
  if (!story_seen)
  {
    FileReader reader = FileReader::parse(Pathname("stories/tutorial_intro.story", Pathname::DATA_PATH));
    ScreenManager::instance()->push_screen(std::make_shared<StoryScreen>(reader));
    StatManager::instance()->set_bool("tutorial-startstory-seen", true);
  }
}
#endif

                //ScreenManager::instance()->push_screen(std::make_shared<LevelMenu>());
                _assert(not "bug found");
            end
        end
    end
with
    loop do
        par/or do
            await global:go_options;
        with
            loop do
                var _SDL_KeyboardEvent&& key = await SDL_KEYDOWN;
                var _u8&& keystate = _XXX_PURE(_SDL_GetKeyState(null));
                var bool has_ctrl = keystate[_SDLK_LCTRL] or keystate[_SDLK_RCTRL];
                if key:keysym.sym == _SDLK_F5
                or key:keysym.sym == _SDLK_o  and has_ctrl
                then
                    break;
                end
            end
        end
        emit go_pause => true;
        do OptionMenu;
        emit go_pause => false;
    end
end

#if 0
every 1s do
    var int e = 0;
    var int v = 0;
    loop i in 255 do
        if _CEU_SYS_GO_EVTS[i] > v then
            e = i;
            v = _CEU_SYS_GO_EVTS[i];
        end
    end
    _printf(">>> [%8d] [%3d/%2i] S=%4d/%3d[new=(%6d-%6d)/cpy=(%4d-%4d)] I=%d/%d\n",
        _CEU_SYS_GO_NTRAILS_MAX,
        e, v,
        _SPRITE_CUR,      _SPRITE_TOT,
        0, 0, 0, 0,
        //{Sprite::NEW}, {Sprite::NEW_DEL}, {Sprite::CPY}, {Sprite::CPY_DEL},
        _SPRITE_IMPL_CUR, _SPRITE_IMPL_TOT);

    _CEU_SYS_GO_NTRAILS_MAX = 0;
    _memset(_CEU_SYS_GO_EVTS, 0, sizeof(int)*255);
end
#endif
