#ifdef _GLOBAL_EVENT_CEU
#error multiple include
#else
#define _GLOBAL_EVENT_CEU

#include "config_manager.ceu"

class GlobalEvent with
    var ConfigManager& config_manager;
do
    every e in SDL_KEYDOWN do
        var _u8&& keystate = _XXX_PURE(_SDL_GetKeyState(null));
#if 0
  switch (event.keysym.sym)
  {
    case SDLK_F10:
      config_manager.set_print_fps(!config_manager.get_print_fps());
      break;

    case SDLK_RETURN:
      if (keystate[SDLK_LALT] || keystate[SDLK_RALT])
      {
        config_manager.set_fullscreen(!config_manager.get_fullscreen());
      }
      break;

    case SDLK_TAB: // unlock mouse grab if Alt-Tab is pressed to allow the user to change windows
      if (config_manager.get_mouse_grab())
      {
        if (keystate[SDLK_LALT] || keystate[SDLK_RALT])
        {
          // FIXME: should suspend the grab till the user clicks the
          // window again, not completely disable it
          config_manager.set_mouse_grab(false);
        }
      }
      break;

    case SDLK_F11:
      config_manager.set_fullscreen(!config_manager.get_fullscreen());
      break;

#if 0
    case SDLK_F5:
      if (!dynamic_cast<OptionMenu*>(ScreenManager::instance()->get_current_screen().get()))
        ScreenManager::instance()->push_screen(std::make_shared<OptionMenu>());
      break;

    case SDLK_o:
      if (keystate[SDLK_LCTRL] || keystate[SDLK_RCTRL])
      {
        if (!dynamic_cast<OptionMenu*>(ScreenManager::instance()->get_current_screen().get()))
          ScreenManager::instance()->push_screen(std::make_shared<OptionMenu>());
      }
      break;

    case SDLK_F6:
      if (globals::developer_mode)
      {
        if (!dynamic_cast<AddOnMenu*>(ScreenManager::instance()->get_current_screen().get()))
          ScreenManager::instance()->push_screen(std::make_shared<AddOnMenu>());
      }
      break;
#endif

    case SDLK_F12:
      {
        std::string filename;
        filename = Screenshot::make_screenshot();
      }
      break;

    case SDLK_c:
      if (globals::developer_mode)
        globals::draw_collision_map = !globals::draw_collision_map;
      break;

    case SDLK_k:
      if (globals::developer_mode)
      {
        log_info("Low level screen clear triggered");
        SDL_Surface* screen = SDL_GetVideoSurface();
        SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 255, 255, 0));
        SDL_Flip(screen);
      }
      break;

    case SDLK_m:
      if (keystate[SDLK_LCTRL] || keystate[SDLK_RCTRL])
      {
        log_info("Developer Mode: %1%", globals::developer_mode);
        globals::developer_mode = !globals::developer_mode;
      }
      break;
#endif
            if e:keysym.sym == _SDLK_g then
                if (keystate[_SDLK_LCTRL] or keystate[_SDLK_RCTRL]) then
                    emit config_manager.go_mouse_grab =>
                            not _config_manager.get_mouse_grab();
                end
            end
#if 0

    case SDLK_KP_PLUS:
      globals::game_speed -= 5;
      if (globals::game_speed < 5)
        globals::game_speed = 5;
      break;

    case SDLK_KP_MINUS:
      globals::game_speed += 5;
      break;

    case SDLK_KP_ENTER:
      globals::game_speed = 20;
      break;

    default:
      // console << "GlobalEvent: Unknown key pressed: " << key.id;
      break;
  }
#endif
    end
end

#endif
