#ifndef WORLDMAP_CEU
#define WORLDMAP_CEU

native @plain _WorldmapNS__NodeId;
native/pre do
    ##define WorldmapNS__NodeId WorldmapNS::NodeId
    ##define WorldmapNS__Dot WorldmapNS::Dot
    ##include "pingus/worldmap/pingus_worldmap.hpp"
    ##include "pingus/worldmap/worldmap.hpp"
    ##include "pingus/res_descriptor.hpp"
    ##include "engine/display/sprite_description.hpp"
    ##include "pingus/worldmap/level_dot.hpp"
    ##include "pingus/worldmap/pingus.hpp"
    ##include "util/sexpr_file_writer.hpp"
end

native do
    static std::shared_ptr<WorldmapNS::WorldmapScreen> screen;
    static std::vector<FileReader> object_reader;
    std::vector<FileReader>::const_iterator i;
    static ResDescriptor desc;
    static SpriteDescription* spr;
    static Vector3f      pos;
    static bool          auto_uncover;
end

#include "../../engine/gui/surface_button.ceu"
#include "pingus.ceu"

class SpriteDrawable with
    var int x, y, z;
    var bool auto_uncover;
    var _SpriteDescription&& desc;;
do
    var Surface sfc with
        this.desc = desc;
    end;

    every gc in SCREENMANAGER_DRAW do
        if this.auto_uncover then
            { static Vector3f pos; };
            _pos = _XXX_PURE(_Vector3f(100,100,0));
            // Pingu is not over the surface
            if (not (_pos.x>this.x and _pos.x<(this.x + sfc.get_width()) and
                     _pos.y>this.y and _pos.y<(this.y + sfc.get_height())))
            then
                gc:draw(&&sfc, _Vector2i(this.x,this.y))
                    finalize with end;
            else/if _pos.z > this.z+1000 then
                // FIXME: Hack for the 0.6.0 release/tutorial world remove // later
                gc:draw(&&sfc, _Vector2i(this.x,this.y))
                    finalize with end;
            end
        else
            gc:draw(&&sfc, _Vector2i(this.x,this.y))
                finalize with end;
        end
    end
end

class WorldMap with
    var _Pathname&& filename;
do
    {
        screen = std::make_shared<WorldmapNS::WorldmapScreen>();
        screen->load(*THIS(CEU_WorldMap)->filename);
        ScreenManager::instance()->push_screen(screen);
    };
    _screen:worldmap:gc_state.set_limit(
        _Rect(_Vector2i(0, 0),
        _Size(_screen:worldmap:worldmap.get_width(), _screen:worldmap:worldmap.get_height())));

    {Sound::PingusSound::play_music(screen->worldmap->worldmap.get_music());};

    var Pingus&&? pingus_ptr;
    spawn do
        every gc in SCREENMANAGER_DRAW do
            var int x = 0;
            do
                var int min, max;
                var int width  = _screen:worldmap:worldmap.get_width();
                if width >= gc:get_width() then
                    min = gc:get_width()/2;
                    max = width - gc:get_width()/2;
                else
                    min = width - gc:get_width()/2;
                    max = gc:get_width()/2;
                end
                x = {Math::clamp}(min, (int)pingus_ptr!:pos_x, max);
            end

            var int y = 0;
            do
                var int min, max;
                var int height = _screen:worldmap:worldmap.get_height();
                if height >= gc:get_height() then
                    min = gc:get_height()/2;
                    max = height - gc:get_height()/2;
                else
                    min = height - gc:get_height()/2;
                    max = gc:get_height()/2;
                end
                y = {Math::clamp}(min, (int)pingus_ptr!:pos_y, max);
            end

            _screen:worldmap:gc_state.set_size(gc:get_width(), gc:get_height());
            _screen:worldmap:gc_state.set_pos(_Vector2i(x, y));
            _screen:worldmap:gc_state.push(*gc);
        end
    end

    // Determine starting node
    // See if the user has played this map before.
    // If not, use the <default-node> tag from the XML file.
    var _WorldmapNS__NodeId id =
        _screen:worldmap:path_graph:lookup_node(_screen:worldmap:worldmap.get_default_node());
    {
        static std::string node_name;
        static Vector3f pos;
    };
    if {StatManager::instance()->get_string(screen->worldmap->worldmap.get_short_name() + "-current-node",
                                            node_name)}
    then
        // Just in case that level doesn't exist, look it up.
        id = _screen:worldmap:path_graph:lookup_node(_node_name);
    end
    _pos = _XXX_PURE(_screen:worldmap:path_graph:get_dot(id):get_pos());

    var float pos_x = _pos.x;// + 50;
    var float pos_y = _pos.y;// + 50;

    var Pingus pingus with
        this.path = _XXX_PURE(_screen:worldmap:path_graph.get());
        this.node  = id;
        this.pos_x = pos_x;
        this.pos_y = pos_y;
    end;
    pingus_ptr = &&pingus;

    par do
        every (x,y) in ON_SECONDARY_BUTTON_PRESSED do
            if {globals::developer_mode} then
                var float xx = _screen:worldmap:gc_state.screen2world(_Vector2i(x,y)).x;
                var float yy = _screen:worldmap:gc_state.screen2world(_Vector2i(x,y)).y;
                var _WorldmapNS__Dot&& dot = _XXX_PURE(_screen:worldmap:path_graph:get_dot(xx, yy));
                if dot != null then
                    // FIXME: Dot NodeID missmatch...
                    var _WorldmapNS__NodeId id =
                        _screen:worldmap:path_graph:get_id(dot)
                            finalize with end;
                    emit pingus.go_directly => id;
                end
            end
        end
    with
        every (x,y) in ON_PRIMARY_BUTTON_PRESSED do
            var float xx = _screen:worldmap:gc_state.screen2world(_Vector2i(x,y)).x;
            var float yy = _screen:worldmap:gc_state.screen2world(_Vector2i(x,y)).y;

            { static Vector2f click_pos; };
            _click_pos = _XXX_PURE(_Vector2i(xx,yy));
            {
                if (globals::developer_mode)
                {
                    SExprFileWriter writer(std::cout);
                    writer.begin_section("leveldot");
                    writer.write_string("levelname", "");
                    writer.begin_section("dot");
                    writer.write_string("name", "leveldot_X");
                    writer.write_vector("position", click_pos);
                    writer.end_section();
                    writer.end_section();
                    std::cout << std::endl;
                    std::cout << std::endl;
                }
            };

            var _WorldmapNS__Dot&& dot = _XXX_PURE(_screen:worldmap:path_graph:get_dot(xx, yy));
            if dot != null then
                if {globals::developer_mode} then
                    _log_info("Worldmap: Clicked on: %1%", dot:get_name());
                end

                if (_screen:worldmap:path_graph:lookup_node(dot:get_name()) == pingus.node) then
                    if {globals::developer_mode} then
                        _log_info("Worldmap: Pingu is on node, issue on_click()");
                    end
                    dot:on_click();
                else
                    if dot:accessible() then
                        emit pingus.go_walking =>
                            _screen:worldmap:path_graph:lookup_node(dot:get_name());
/*
TODO
                            {StatManager::instance()->set_string
                                (screen->worldmap->worldmap.get_short_name() + "-current-node", dot->get_name());};
*/
                    else
                        call {Sound::PingusSound::play_sound}("chink");
                    end
                end
            end
        end
    with
        var int mouse_x = 0;
        var int mouse_y = 0;
        par do
            every (x,y) in ON_POINTER_MOVE do
                mouse_x = x;
                mouse_y = y;
            end
        with
            every gc in SCREENMANAGER_DRAW do
                {
                    static Vector2f mpos;
                };
                _mpos = _XXX_PURE(_screen:worldmap:gc_state.screen2world(
                            _Vector2i(mouse_x,mouse_y)));
                var _WorldmapNS__Dot&& dot =
                    _XXX_PURE(_screen:worldmap:path_graph:get_dot(_mpos.x, _mpos.y));
                if dot != null then
                    dot:draw_hover(*gc);
                end
                _screen:worldmap:gc_state.pop(*gc);
            end
        end
    end
end

#endif
