#ifndef _PINGUS_CEU
#define _PINGUS_CEU

#include "../../engine/display/sprite.ceu"
#include "../right_left_sprites.ceu"

native @plain _WorldmapNS__NodeId;
native/pre do
    ##define WorldmapNS__NodeId WorldmapNS::NodeId
    ##define WorldmapNS__PathGraph WorldmapNS::PathGraph
    ##define WorldmapNS__PathfinderResult WorldmapNS::PathfinderResult
    ##include "pingus/worldmap/worldmap.hpp"
    ##include "pingus/worldmap/path_graph.hpp"
    ##include "pingus/worldmap/pathfinder.hpp"
end

class Pingus with
    interface IPositionDirection;
    var s8    direction = _NONE;
    var float pos_x = 200;
    var float pos_y = 200;

    event _WorldmapNS__NodeId go;

    var _WorldmapNS__PathGraph&& path;
do
    var _WorldmapNS__PathGraph&? path_;
    finalize
        path_ = &_XXX_NOHOLD(this.path);
    with
    end

    var _WorldmapNS__NodeId current_node = 0; // TODO: _NoNode;

    var char[] left  = [].."core/worldmap/pingus/left";
    var char[] right = [].."core/worldmap/pingus/right";
    var RightLeftSprites _ with
        this.none   = [].."core/worldmap/pingus_standing";
        this.left   = &left;
        this.right  = &right;
        this.parent = &outer;
        this.is_world = false;
    end;

    par do
        loop do
            var _WorldmapNS__NodeId target = await go;
            loop do
                watching target in go do
                    _printf("target = %d\n", target);
                    {
                        static WorldmapNS::PathfinderResult res;
                        static std::vector<WorldmapNS::NodeId> node_path;
                    };
                    _res = _XXX_PURE(this.path_!.get_path(current_node, target));
                    _node_path = _res.path;
                    var _WorldmapNS__NodeId? src;
                    loop i do
                        if _node_path.empty() then
                            current_node = src!;
                            break;
                        end
                        var _WorldmapNS__NodeId dst = _node_path.back();
                        if src? then
                            _printf("[%d]: %d => %d\n", i, src!, dst);
                        end
                        _node_path.pop_back();
                        src = dst;
                    end
                    await FOREVER;
                end
            end
        end
    with
        loop do
            await 1s;
            this.direction = _NONE;
            await 1s;
            this.direction = _LEFT;
            await 1s;
            this.direction = _RIGHT;
        end
    end
end

#endif
