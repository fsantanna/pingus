#ifndef _DOTS_CEU
#define _DOTS_CEU

class DotE with
    event (int,int,bool,bool,int) ok_clicked;
do
    await FOREVER;
end

interface IDot with
    var _FileReader&& reader;
    var int           id;
    var char[]        filename;
    var Vector3f&     pos;
    var int           status;
    var bool          is_story;
    var bool          show_credits;
    var DotE&         e;
end

class Mouse with
    var Rect& rect;
    var IDot& dot;
    event bool ok_out;
do
    function (int x, int y)=>bool is_inside do
        var Vector2i off = global:worldmap!:get_offset();
        var float dx = off.x + x - this.rect.left;
        var float dy = off.y + y - this.rect.top;
        return {Math::sqrt}(dx*dx + dy*dy) < 30;
    end

    par do
        var bool is_on = false;
        every (x,y) in ON_POINTER_MOVE do
            var bool v = is_inside(x,y);
            if v != is_on then
                is_on = v;
                emit this.ok_out => not v;
            end
        end
    with
        every (x,y) in ON_PRIMARY_BUTTON_PRESSED do
            if is_inside(x,y) then
                if {globals::developer_mode} then
                    _log_info("Worldmap: Clicked on: %1%", (_char&&)&&dot.filename);
                end
                global:worldmap_return_filename = [] .. (_char&&)&&dot.filename;
                emit this.dot.e.ok_clicked =>
                    (1,this.dot.id,this.dot.is_story,this.dot.show_credits,this.dot.status);
            end
        end
    with
        every (x,y) in ON_SECONDARY_BUTTON_PRESSED do
            if {globals::developer_mode} then
                if is_inside(x,y) then
                    emit this.dot.e.ok_clicked =>
                        (2,this.dot.id,this.dot.is_story,this.dot.show_credits,this.dot.status);
                end
            end
        end
    end
end

class StoryDot with
    interface IDot;
    var int  id     = _WorldmapNS__NoNode;
    var int  status = {Savegame::ACCESSIBLE};
    var bool show_credits = false;
do
    {
        static FileReader  reader;
        static Vector3f    pos;
        static std::string name;
    };
    _reader = _XXX_PURE(this.reader:read_section("dot"));
    _reader.read_vector("position", _pos);
    _reader.read_string("name",     _name);
    _assert(not _name.empty());

    this.id = _path_graph:lookup_node(_name);

    {
        static std::string m_name;
        static std::string m_story;
        static bool        m_credits;
        static PingusLevel plf;
    };
    this.reader:read_string("name",    _m_name);
    this.reader:read_string("story",   _m_story);

    _m_credits = false;
    this.reader:read_bool  ("credits", _m_credits);
    this.show_credits = _m_credits;

    var char[] m_name = [] .. (_char&&)_m_name.c_str();
    this.filename = [] .. (_char&&)_m_story.c_str();

    var Rect rect = Rect(_pos.x,_pos.y, 0, 0);
    var Sprite _ = Sprite.build_name(&rect, "core/worldmap/story_dot");

    var Mouse mouse with
        this.rect = &rect;
        this.dot  = &outer;
    end;

    var bool v = await mouse.ok_out until v==false;
    pause/if mouse.ok_out do
        var Sprite _ = Sprite.build_name(&rect, "core/worldmap/story_dot_highlight");
        every REDRAW do
            call {Fonts::pingus_small}.render(
                _origin_top_center,
                -global:offset.x + rect.left,
                -global:offset.y + rect.top-44,
                __((_char&&)&&m_name),
                *{Display::s_framebuffer}
            );
        end
    end
end

class LevelDot with
    interface IDot;
    var int  id     = _WorldmapNS__NoNode;
    var int  status = {Savegame::NONE};
    var bool show_credits = false;
do
    {
        static FileReader  reader;
        static Vector3f    pos;
        static std::string name;
    };
    _reader = _XXX_PURE(this.reader:read_section("dot"));
    _reader.read_vector("position", _pos);
    _reader.read_string("name",     _name);
    _assert(not _name.empty());

    this.id = _path_graph:lookup_node(_name);

    {
        static std::string resname;
        static PingusLevel plf;
    };
    this.reader:read_string("levelname", _resname);
    { plf = PLFResMgr::load_plf(resname); };

    var char[] res_name = [] .. (_char&&)_resname.c_str();
    var char[] lvl_name = [] .. (_char&&)_plf.get_levelname().c_str();

    this.filename = [] .. res_name;

    var _Savegame&? savegame;
    finalize
        savegame = &_XXX_NOHOLD({SavegameManager::instance()}:get(_resname));
    with
        nothing;
    end
    if savegame? then
        this.status = savegame!.get_status();
    end

    var Rect rect = Rect(_pos.x,_pos.y, 0, 0);
    var Mouse mouse with
        this.rect = &rect;
        this.dot  = &outer;
    end;

    par do
        if this.status == {Savegame::FINISHED}
        or this.status == {Savegame::ACCESSIBLE}
        then
            if this.status == {Savegame::FINISHED} then
                var Sprite _ = Sprite.build_name(&rect, "core/worldmap/dot_green");
                var bool v = await mouse.ok_out until v==false;
                pause/if mouse.ok_out do
                    var Sprite _ = Sprite.build_name(&rect, "core/worldmap/dot_green_hl");
                    await FOREVER;
                end
            else
                var Sprite _ = Sprite.build_name(&rect, "core/worldmap/dot_red");
                var bool v = await mouse.ok_out until v==false;
                pause/if mouse.ok_out do
                    var Sprite _ = Sprite.build_name(&rect, "core/worldmap/dot_red_hl");
                    await FOREVER;
                end
                await FOREVER;
            end
        else
            var Sprite _ = Sprite.build_name(&rect, "core/worldmap/dot_invalid");
            await FOREVER;
        end
    with
        var bool v = await mouse.ok_out until v==false;
        pause/if mouse.ok_out do
            every REDRAW do
                var int x = -global:offset.x;
                var int y = -global:offset.y;
                if this.status == {Savegame::NONE} then
                    call {Fonts::pingus_small}.render(
                        _origin_top_center,
                        x+rect.left, y+rect.top-44,
                        __("???"),
                        *{Display::s_framebuffer}
                    );
                else
                    call {Fonts::pingus_small}.render(
                        _origin_top_center,
                        x+rect.left, y+rect.top-44,
                        __((_char&&)&&lvl_name),
                        *{Display::s_framebuffer}
                    );
                end
                if {globals::developer_mode} then
                    call {Fonts::pingus_small}.render(
                        _origin_top_center,
                        x+rect.left, y+rect.top-70,
                        __((_char&&)&&res_name),
                        *{Display::s_framebuffer}
                    );
                end
            end
        end
    end
end

#endif
