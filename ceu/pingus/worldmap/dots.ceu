#ifndef _DOTS_CEU
#define _DOTS_CEU

interface IDot with
    var _FileReader&& reader;
    var Vector3f&     pos;
end

class MouseHover with
    var Rect& rect;
    event bool pse;
do
    var bool is_on = false;
    every (x,y) in ON_POINTER_MOVE do
        var Vector3f pos =
            Vector3f(_screen:worldmap:gc_state.screen2world(_Vector2i(x,y)).x,
                     _screen:worldmap:gc_state.screen2world(_Vector2i(x,y)).y,
                     0);
        var float xx = pos.x - this.rect.left;
        var float yy = pos.y - this.rect.top;
        var bool v = {Math::sqrt}(xx*xx + yy*yy) < 30;
        if v != is_on then
            is_on = v;
            emit this.pse => not v;
        end
    end
end

class StoryDot with
    interface IDot;
do
    {
        static FileReader  reader;
        static Vector3f    pos;
        static std::string name;
    };
    _reader = _XXX_PURE(this.reader:read_section("dot"));
    _reader.read_vector("position", _pos);
    _reader.read_string("name",     _name);
    _assert(not _name.empty());

    {
        static std::string m_name;
        static std::string m_story;
        static bool        m_credits;
        static PingusLevel plf;
    };
    this.reader:read_string("name",    _m_name);
    this.reader:read_string("story",   _m_story);
    this.reader:read_bool  ("credits", _m_credits);

    var Rect r = Rect(_pos.x,_pos.y, 0, 0);
    var SpriteR _ = SpriteR.build_name(&r, "core/worldmap/story_dot");

    var MouseHover h with
        this.rect = &r;
    end;
    var bool v = await h.pse until v==false;
    pause/if h.pse do
        var SpriteR _ = SpriteR.build_name(&r, "core/worldmap/story_dot_highlight");
        await FOREVER;
    end
end

class LevelDot with
    interface IDot;
do
    {
        static FileReader  reader;
        static Vector3f    pos;
        static std::string name;
    };
    _reader = _XXX_PURE(this.reader:read_section("dot"));
    _reader.read_vector("position", _pos);
    _reader.read_string("name",     _name);
    _assert(not _name.empty());

    {
        static std::string resname;
        static PingusLevel plf;
    };
    this.reader:read_string("levelname", _resname);
    { plf = PLFResMgr::load_plf(resname); };

    var Rect r = Rect(_pos.x,_pos.y, 0, 0);
    var MouseHover h with
        this.rect = &r;
    end;

    var _Savegame&& savegame = _XXX_PURE({SavegameManager::instance()}:get(_plf.get_resname()));
    if savegame != null and
        (  savegame:get_status() == {Savegame::FINISHED}
        or savegame:get_status() == {Savegame::ACCESSIBLE} )
    then
        if savegame:get_status() == {Savegame::FINISHED} then
            var SpriteR _ = SpriteR.build_name(&r, "core/worldmap/dot_green");
            var bool v = await h.pse until v==false;
            pause/if h.pse do
                var SpriteR _ = SpriteR.build_name(&r, "core/worldmap/dot_green_hl");
                await FOREVER;
            end
        else
            var SpriteR _ = SpriteR.build_name(&r, "core/worldmap/dot_red");
            var bool v = await h.pse until v==false;
            pause/if h.pse do
                var SpriteR _ = SpriteR.build_name(&r, "core/worldmap/dot_red_hl");
                await FOREVER;
            end
            await FOREVER;
        end
    else
        var SpriteR _ = SpriteR.build_name(&r, "core/worldmap/dot_invalid");
        await FOREVER;
    end
end

#endif
