#ifndef _WORLDOBJ_FACTORY_CEU
#define _WORLDOBJ_FACTORY_CEU

native do
    ##include "src/pingus/prefab_file.hpp"
    ##include "src/util/overrride_file_reader.hpp"
    Vector3f WORLDOBJ_FACTORY_pos = Vector3f(0,0,0);
    void WORLDOBJ_FACTORY_create (const FileReader& reader) {
        if (reader.get_name()=="prefab")
        {
            std::string name;
            reader.read_string("name", name);

            Vector3f pos;
            reader.read_vector("position", pos);
            WORLDOBJ_FACTORY_pos += pos;

            PrefabFile prefab = PrefabFile::from_resource(name);
            FileReader overrides;
            reader.read_section("overrides", overrides);

            const std::vector<FileReader>& objects = prefab.get_objects();
            for(auto it = objects.begin(); it != objects.end(); ++it) {
                OverrideFileReader override_reader(*it, overrides);
                WORLDOBJ_FACTORY_create(override_reader);
            }
            WORLDOBJ_FACTORY_pos -= pos;
        }
        else if (reader.get_name()=="group")
        {
            FileReader objects = reader.read_section("objects");
            std::vector<FileReader> sections = objects.get_sections();
            for(auto it = sections.begin(); it != sections.end(); ++it) {
                WORLDOBJ_FACTORY_create(*it);
            }
        } else {
            tceu__char___FileReader_ p = { (char*)reader.get_name().c_str(), (FileReader*)&reader };
            ceu_sys_go(&CEU_APP, CEU_IN_WORLD_NEWOBJ, &p);
        }
    }
end

class WorldObjFactory with
    var _PingusLevel&& plf;
    pool Entrance[] entrances;
do
    par do
        every (id_,reader_) in WORLD_NEWOBJ do
            var Vector3f pos_offset = Vector3f(_WORLDOBJ_FACTORY_pos.x,
                                               _WORLDOBJ_FACTORY_pos.y,
                                               _WORLDOBJ_FACTORY_pos.z);
            if _strcmp(id_,"entrance")==0 then
                spawn Entrance in this.entrances with
                    this.reader     = reader_;
                    this.pos_offset = pos_offset;
                end;
            else/if _strcmp(id_,"exit")==0 then
                spawn Exit with
                    this.reader = reader_;
                end;
            else/if _strcmp(id_,"groundpiece")==0 then
                spawn Groundpiece with
                    this.reader = reader_;
                end;
            else/if _strcmp(id_,"guillotine")==0 then
                spawn Guillotine with
                    this.reader = reader_;
                end;
            else/if _strcmp(id_,"hotspot")==0 then
                spawn Hotspot with
                    this.reader     = reader_;
                    this.pos_offset = pos_offset;
                end;
            else/if _strcmp(id_,"laser_exit")==0 then
                spawn LaserExit with
                    this.reader = reader_;
                end;
            else/if _strcmp(id_,"liquid")==0 then
                spawn Liquid with
                    this.reader = reader_;
                end;
            else/if _strcmp(id_,"smasher")==0 then
                spawn Smasher with
                    this.reader = reader_;
                end;
            else/if _strcmp(id_,"spike")==0 then
                spawn Spike with
                    this.reader = reader_;
                end;
            else/if _strcmp(id_,"surface-background")==0 then
                spawn SurfaceBackground with
                    this.reader = reader_;
                end;
            end
        end
    with
        loop i in this.plf:get_objects().size() do
            _WORLDOBJ_FACTORY_create(this.plf:get_objects().at(i));
        end
    end

#if 0
    {
        static const std::vector<FileReader>& objects =
            THIS(CEU_World)->plf->get_objects();
        for (std::vector<FileReader>::const_iterator i = objects.begin();
             i != objects.end ();
             ++i)
            WorldObjFactory::instance()->create(*i);
    };
#endif

end

#endif
