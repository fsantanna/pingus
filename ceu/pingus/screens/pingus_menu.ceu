#ifndef _PINGUSMENU_CEU
#define _PINGUSMENU_CEU

#include "../../engine/display/sprite.ceu"
#include "../components/menu_button.ceu"

native do
    enum {
        PINGUSMENU_STORY,
        PINGUSMENU_EDITOR,
        PINGUSMENU_LEVELSETS,
        PINGUSMENU_EXIT
    };
end

class PingusMenuBackground with
do
    var float x1=0, y1=0;
    var float x2=0, y2=150;
    var float x3=0, y3=200;
    var float x4=0, y4=429;
    var float x5=0, y5=500;
    var Surface s1 = Surface.build("core/menu/layer1");
    var Surface s2 = Surface.build("core/menu/layer2");
    var Surface s3 = Surface.build("core/menu/layer3");
    var Surface s4 = Surface.build("core/menu/layer4");
    var Surface s5 = Surface.build("core/menu/layer5");

    par do
        every v in DELTA do
            var float dt = ((float)v)/1000;
            x1 = {Math::mod}(x1+ 12*dt, {Display::get_width()});
            x2 = {Math::mod}(x2+ 25*dt, {Display::get_width()});
            x3 = {Math::mod}(x3+ 50*dt, {Display::get_width()});
            x4 = {Math::mod}(x4+100*dt, {Display::get_width()});
            x5 = {Math::mod}(x5+200*dt, {Display::get_width()});
        end
    with
        every REDRAW do
            call {Display::s_framebuffer}:draw_surface(
                s1.get_framebuffer_surface(),
                _Vector2i(x1, y1)
            );
            call {Display::s_framebuffer}:draw_surface(
                s1.get_framebuffer_surface(),
                _Vector2i(x1-{Display::get_width()}, y1)
            );
            call {Display::s_framebuffer}:draw_surface(
                s2.get_framebuffer_surface(),
                _Vector2i(x2, y2)
            );
            call {Display::s_framebuffer}:draw_surface(
                s2.get_framebuffer_surface(),
                _Vector2i(x2-{Display::get_width()}, y2)
            );
            call {Display::s_framebuffer}:draw_surface(
                s3.get_framebuffer_surface(),
                _Vector2i(x3, y3)
            );
            call {Display::s_framebuffer}:draw_surface(
                s3.get_framebuffer_surface(),
                _Vector2i(x3-{Display::get_width()}, y3)
            );
            call {Display::s_framebuffer}:draw_surface(
                s4.get_framebuffer_surface(),
                _Vector2i(x4, y4)
            );
            call {Display::s_framebuffer}:draw_surface(
                s4.get_framebuffer_surface(),
                _Vector2i(x4-{Display::get_width()}, y4)
            );
            call {Display::s_framebuffer}:draw_surface(
                s5.get_framebuffer_surface(),
                _Vector2i(x5, y5)
            );
            call {Display::s_framebuffer}:draw_surface(
                s5.get_framebuffer_surface(),
                _Vector2i(x5-{Display::get_width()}, y5)
            );
        end
    end
end

class PingusMenu with
do
    var PingusMenuBackground _;

    var Size size = Size({Display::get_width()}, {Display::get_height()});
    var Rect rect = Rect(size.width/2, size.height/2, 0, 0);
    var Sprite logo = Sprite.build_name(&rect, "core/misc/logo");
        rect.left = rect.left - logo.get_width()/2;
        rect.top  = rect.top  - 280;

    {Sound::PingusSound::play_music("pingus-1.it");};

    var MenuButton b_story =
        MenuButton.build(size.width/2-125, size.height/2-20, "Story", "");
    var MenuButton b_editor =
        MenuButton.build(size.width/2+125, size.height/2-20, "Editor", "");
    var MenuButton b_options =
        MenuButton.build(size.width/2-125, size.height/2+50, "Options", "");
    var MenuButton b_levelsets =
        MenuButton.build(size.width/2+125, size.height/2+50, "Levelsets", "");
    var MenuButton b_exit =
        MenuButton.build(size.width/2,     size.height/2+120, "Exit", "");

    par do
        await b_story.ok_clicked;
        escape _PINGUSMENU_STORY;
    with
        await b_editor.ok_clicked;
        {Sound::PingusSound::stop_music();};
        escape _PINGUSMENU_EDITOR;
    with
        loop do
            await b_options.ok_clicked;
            emit global:go_options;     // this will pause me
        end
    with
        await b_levelsets.ok_clicked;
        escape _PINGUSMENU_LEVELSETS;
    with
        await b_exit.ok_clicked;
        escape _PINGUSMENU_EXIT;
    with
        every REDRAW do
            call {Fonts::pingus_small}.render(
                _origin_top_left,
                {Display::get_width ()}/2 - 400 + 25,
                {Display::get_height()}   - 140,
                {
"Pingus " VERSION " - Copyright (C) 1998-2011 Ingo Ruhnke <grumbel@gmail.com>\n"
"See the file AUTHORS for a complete list of contributors.\n"
"Pingus comes with ABSOLUTELY NO WARRANTY. This is free software, and you are\n"
"welcome to redistribute it under certain conditions; see the file COPYING for details.\n"
                },
                *{Display::s_framebuffer}
            );

            call {Display::s_framebuffer}:draw_rect(
                _Rect(0,
                      {Display::get_height()} - 26,
                      {Display::get_width ()},
                      {Display::get_height()}),
                _Color(0, 0, 0, 255)
            );

            call {Fonts::pingus_small}.render(
                _origin_top_center,
                {Display::get_width ()}/2,
                {Display::get_height()} - {Fonts::pingus_small.get_height()} - 8,
"..:: Ctrl-g: mouse grab   ::   F10: fps counter   ::   F11: fullscreen   ::   F12: screenshot ::..",
                *{Display::s_framebuffer}
            );
        end
    end
end

#if 0
void PingusMenu::draw_background(DrawingContext& gc) {
  background->draw(gc);
}
void PingusMenu::update(float delta) {
  background->update(delta);
}
void PingusMenu::create_background(const Size& size_) {
  // Recreate the layer manager in the new size
  background = std::unique_ptr<LayerManager>(new LayerManager());

  int w = size_.width;
  int h = size_.height;

  // We only need to scale the background main menu images if the screen
  // resolution is not default
  if (w != globals::default_screen_width ||
      h != globals::default_screen_height)
  {
    layer1 = layer1.scale(w, 185 * h / globals::default_screen_height);
    layer2 = layer2.scale(w, 362 * h / globals::default_screen_height);
    layer3 = layer3.scale(w, 306 * h / globals::default_screen_height);
    layer4 = layer4.scale(w, 171 * h / globals::default_screen_height);
    layer5 = layer5.scale(302 * w / globals::default_screen_width, 104 * h / globals::default_screen_height);

    background->add_layer(Sprite(layer1), 0, 0, 12, 0);
    background->add_layer(Sprite(layer2), 0, 150 * static_cast<float>(h) / static_cast<float>(globals::default_screen_height), 25, 0);
    background->add_layer(Sprite(layer3), 0, 200 * static_cast<float>(h) / static_cast<float>(globals::default_screen_height), 50, 0);
    background->add_layer(Sprite(layer4), 0, 429 * static_cast<float>(h) / static_cast<float>(globals::default_screen_height), 100, 0);
    background->add_layer(Sprite(layer5), 0, 500 * static_cast<float>(h) / static_cast<float>(globals::default_screen_height), 200, 0);
  }
  else
  {
  }
}
#endif

#endif
