#ifdef _SLIDERBOX_CEU
#error multiple include
#else
#define _SLIDERBOX_CEU

code/await SliderBox (var& Rect rect, var int max, var int current)
                        -> (event int go)
                            -> FOREVER
do
    var& RectComponent component = spawn RectComponent(&rect);

    par do
        var int x=0;
        var int y=0;
        loop do
            (x,y) = await component.component.on_primary_button_pressed;
            watching ON_PRIMARY_BUTTON_RELEASED do
                loop do
                    var Rect r = _;
                    call/recursive Rect_Off(&rect, &r);

                    var int old = current;
                    x = x - (r.x as int);

                    current = (max*x / (r.w-12)) as int;
                    current = {Math::clamp}(0, current, max);

                    if current != old then
                        emit go(current*5); // scale to [0,100]
                    end

                    (x,y) = await ON_POINTER_MOVE;
                end
            end
        end
    with
        every outer.main.redraw do
            var Rect r = _;
            call/recursive Rect_Off(&rect, &r);

            if {globals::developer_mode} as bool then
                call {Display::s_framebuffer}:draw_rect(
                    _Rect(r.x,r.w,r.y,r.h),
                    _Color(0,255,255)
                );
            end
            if current == 0 then
                call {Fonts::chalk_normal}.render(
                    _origin_top_center,
                    r.x + r.w/2, r.y,
                    "off",
                    *{Display::s_framebuffer}
                );
            else
                var int i;
                loop i in [0->max[ do
                    if i < current then
                        call {Fonts::chalk_normal}.render(
                            _origin_top_left,
                            r.x + i*(r.w-12)/max + 6, r.y,
                            "|",
                            *{Display::s_framebuffer}
                        );
                    end
                end
            end
            call {Fonts::chalk_normal}.render(
                _origin_top_left,
               r.x, r.y,
                "[",
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
               r.x+r.w, r.y,
                "]",
                *{Display::s_framebuffer}
            );
        end
    end
end

#endif

