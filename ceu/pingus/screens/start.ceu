#ifdef _START_SCREEN
#error multiple include
#else
#define _START_SCREEN

{
    static std::string str;
    str = StringFormat::break_line(@(outer.plf).get_description(),
                                   800-200,
                                   Fonts::chalk_normal);
}

vector[] byte description = [] .. ({str.c_str()} as _char&&);

spawn Wood();

var Rect rect = val Rect(0,0, _,_, &outer.main.center);
spawn Sprite_from_name(&rect, "core/menu/blackboard", &outer.main.dt, &outer.main.redraw);

var Rect start_r = val Rect(245,150, _,_, &outer.main.center);
var& SurfaceButton start =
    spawn SurfaceButton(&start_r,
                        "core/start/ok",
                        "core/start/ok_clicked",
                        "core/start/ok_hover");

var Rect cancel_r = val Rect(-300,200, _,_, &outer.main.center);
var& SurfaceButton cancel =
    spawn SurfaceButton(&cancel_r,
                        "core/start/back",
                        "core/start/back_clicked",
                        "core/start/back_hover");

par do
    every cancel.component.on_pointer_enter do
        call {Sound::PingusSound::play_sound}("tick");
    end
with
    await cancel.component.on_click;
    escape false;
with
    every start.component.on_pointer_enter do
        call {Sound::PingusSound::play_sound}("tick");
    end
with
    await start.component.on_click;
    call {Sound::PingusSound::play_sound}("yipee");
    escape true;
with
    loop do
        var _Input__ButtonEvent&& but = await ON_BUTTON_PRESSED;
        if but:name == {Input::PAUSE_BUTTON} then
            escape true;
        else/if but:name == {Input::FAST_FORWARD_BUTTON} then
            escape true;
        else/if but:name == {Input::ESCAPE_BUTTON} then
            escape false;
        end
    end
with
    every outer.main.redraw do
        var int left_x  = outer.main.center.x - 150;
        var int right_x = outer.main.center.x + 150;
        var int y = outer.main.center.y + 40;

        // cancel button
        call {Fonts::chalk_normal}.render(
            _origin_top_center,
            cancel_r.x+55, cancel_r.y,
            __("Back"),
            *{Display::s_framebuffer}
        );

        call {Fonts::chalk_large}.render(
            _origin_top_center,
            outer.main.center.x, outer.main.center.y-230,
            __(outer.plf.get_levelname()),
            *{Display::s_framebuffer}
        );

        call ({Fonts::chalk_normal}.render as /nohold)(
            _origin_top_left,
            outer.main.center.x-300, outer.main.center.y-170,
            &&description[0] as _char&&,
            *{Display::s_framebuffer}
        );

        y = y+32;
        y = y+45;

        call {Fonts::chalk_normal}.render(
            _origin_top_left,
            left_x, y,
            __("Number of Pingus: "),
            *{Display::s_framebuffer}
        );
        call {Fonts::chalk_normal}.render(
            _origin_top_right,
            right_x, y,
            {StringUtil::to_string}(outer.plf.get_number_of_pingus()),
            *{Display::s_framebuffer}
        );

        y = y+30;
        call {Fonts::chalk_normal}.render(
            _origin_top_left,
            left_x, y,
            __("Number to Save: "),
            *{Display::s_framebuffer}
        );
        call {Fonts::chalk_normal}.render(
            _origin_top_right,
            right_x, y,
            {StringUtil::to_string}(outer.plf.get_number_to_save()),
            *{Display::s_framebuffer}
        );

        y = y+30;
        call {Fonts::chalk_normal}.render(
            _origin_top_left,
            left_x, y,
            __("Time: "),
            *{Display::s_framebuffer}
        );
        call {Fonts::chalk_normal}.render(
            _origin_top_right,
            right_x, y,
            {GameTime::ticks_to_realtime_string}(outer.plf.get_time()),
            *{Display::s_framebuffer}
        );

        call {Fonts::chalk_small}.render(
            _origin_top_center,
            outer.main.center.x, outer.main.center.y + 215,
            __("Author: ") + outer.plf.get_author(),
            *{Display::s_framebuffer}
        );

        if {globals::developer_mode} as bool then
            call {Fonts::chalk_small}.render(
                _origin_top_center,
                outer.main.center.x, outer.main.center.y-50,
                outer.plf.get_resname(),
                *{Display::s_framebuffer}
            );
        end
    end
end

#endif
