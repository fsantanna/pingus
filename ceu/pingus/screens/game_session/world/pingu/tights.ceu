code/tight Pingu_Get_Owner_Str (void) -> _char&& do
    {
        static std::ostringstream ostr;
        static std::string        str;
        static const char*        chr;
        ostr.clear();
        ostr.str("");
        ostr << @outer.owner_id;
        str = ostr.str();
        chr = str.c_str();
    };
    escape {chr} as _char&&;
end

code/tight Pingu_Set_Velocity (var Vector3f velocity) -> void do
    // crude terminal velocity
    velocity.x = {(float)Math::clamp(-terminal_velocity, @velocity.x, terminal_velocity)};
    velocity.y = {(float)Math::clamp(-terminal_velocity, @velocity.y, terminal_velocity)};
    outer.pingu.velocity = velocity;
end

code/tight Pingu_Toggle_Direction (void) -> void do
    if outer.pingu.direction == {LEFT} then
        outer.pingu.direction = {RIGHT};
    else
        outer.pingu.direction = {LEFT};
    end
end

code/tight Pingu_Rel_Getpixel (var int x, var int y) -> int do
    escape outer.gfx_map.get_colmap():getpixel(
                (outer.pingu.rect.left + (x * outer.pingu.direction)),
                (outer.pingu.rect.top - y)
            );
end

code/tight Pingu_Head_Collision_On_Walk (var int x, var int y) -> bool do
    var int pixel = call Pingu_Rel_Getpixel(x, y + {pingu_height});
    if (     pixel != {Groundtype::GP_NOTHING} and
        not ((pixel &  {Groundtype::GP_BRIDGE}) as bool))
    then
        escape true;
    else
        escape false;
    end
end

code/tight Pingu_Check_Action (var _ActionName__Enum new_action) -> bool do
    var int mode = {ActionName::ACTIVATION_MODE}[new_action];

    if mode == {ActionType::INSTANT} then
        escape (new_action!=outer.current_action) and
               ({ActionName::CHANGE_ALLOWED}[outer.current_action][new_action] as bool);
    else/if mode == {ActionType::WALL_TRIGGERED} then
        escape (outer.wall_action != new_action);
    else/if mode == {ActionType::FALL_TRIGGERED} then
        escape (outer.fall_action != new_action);
    else //if mode == {ActionType::COUNTDOWN_TRIGGERED} then
        _ceu_dbg_assert({!"DEAD CODE???"});
    end
end

code/tight Pingu_Get_Center_Pos (void) -> Vector3f do
    var Vector3f vec = val Vector3f(outer.pingu.rect.left as float, (outer.pingu.rect.top-16) as float, 0);
    escape vec;
end

// Returns true if the given koordinates are above the pingu
code/tight Pingu_Is_Over (var int x, var int y) -> bool do
    var Vector3f center = call Pingu_Get_Center_Pos();
    escape (center.x+16 > x and
            center.x-16 < x and
            center.y+16 > y and
            center.y-16 < y);
end

// Returns the distance between the Pingu and a given coordinate
code/tight Pingu_Dist (var int x, var int y) -> float do
    var Vector3f p = call Pingu_Get_Center_Pos();
    escape {Math::sqrt}(((p.x - x) * (p.x - x) +
                         (p.y - y) * (p.y - y)));
end
