#ifndef _BOMBER_CEU
#define _BOMBER_CEU

native/pre do
    ##include "../src/pingus/colliders/pingu_collider.hpp"
    ##include "../src/pingus/pingu_enums.hpp"
end

code/await Bomber (void) -> _ActionName__Enum
do
    vector[] byte bomber = [] .. "pingus/player"
                              .. (call Pingu_Get_Owner_Str() as _char&&)
                              .. "/bomber/left";
    {
        ##include "../../../src/pingus/collision_mask.hpp"
        static CollisionMask bomber_radius(
                "other/bomber_radius_gfx",
                "other/bomber_radius"
        );
    };

    call {Sound::PingusSound::play_sound}("ohno", 0.5, 0.0);

    var&? ISprite sprite;
    watching Sprite_from_name(&outer.pingu.rect, &&bomber[0] as _char&&, true)
                -> (&sprite)
    do
        spawn Mover();
spawn do
    every WORLD_UPDATE do
        _printf("> %d\n", sprite!.frame);
    end
end

        /* UPDATE */

        // SOUND
_printf("1111\n");
        await WORLD_UPDATE until sprite!.frame == 10;
        call {Sound::PingusSound::play_sound}("plop", 0.5, 0.0);
_printf("2222\n");

        // PARTICLES, TERRAIN, EXPLOSION

        await WORLD_UPDATE until sprite!.frame == 13;
_printf("3333\n");
        emit outer.world.go_create_pingu_particles(outer.pingu.rect.left,
                                                   outer.pingu.rect.top-5);

        call World_Remove({&bomber_radius},
                          outer.pingu.rect.left - {bomber_radius.get_width()/2},
                          outer.pingu.rect.top  - {bomber_radius.get_width()/2} - 16);

        do
            vector[] byte explo = [] .. "pingus/player"
                                     .. (call Pingu_Get_Owner_Str() as _char&&)
                                     .. "/explo";
            var&? ISprite s;
            spawn Sprite_from_name(&outer.pingu.rect, &&explo[0] as _char&&, true)
                    -> (&s);
            s!.offset.x = 32;
            s!.offset.y = 48;
            await WORLD_UPDATE;
await WORLD_UPDATE;
await WORLD_UPDATE;
await WORLD_UPDATE;
await WORLD_UPDATE;
await WORLD_UPDATE;
await WORLD_UPDATE;
await WORLD_UPDATE;
await WORLD_UPDATE;
        end
    end
_printf("out\n");

    escape {ActionName::DEAD};
end

#endif
