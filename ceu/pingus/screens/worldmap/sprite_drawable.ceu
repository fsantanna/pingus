#ifndef _SPRITEDRAWABLE_CEU
#define _SPRITEDRAWABLE_CEU

code/await SpriteDrawable (void) -> FOREVER
do
    {
        static ResDescriptor desc;
        static Vector3f      pst;
        static bool          auto_uncover;
        file_reader->read_desc  ("surface", desc);
        file_reader->read_vector("position", pst);
        file_reader->read_bool  ("auto-uncover", auto_uncover);

        static SpriteDescription* spr;
        spr = Resource::load_sprite_desc(desc.res_name);
    };

    var bool auto_uncover = false;  /// TODO
    var Vector3f pst = val Vector3f({pst.x},{pst.y},{pst.z});

    var& Surface_from_desc sfc = spawn Surface_from_desc({spr},_);

    every outer.main.redraw do
        if auto_uncover then
            // Pingu is not over the surface
            if (not (outer.pst.x>pst.x and outer.pst.x<(pst.x + sfc.surface.framebuffer.get_width()) and
                     outer.pst.y>pst.y and outer.pst.y<(pst.y + sfc.surface.framebuffer.get_height())))
            then
                call {Display::s_framebuffer}:draw_surface(
                    sfc.surface.framebuffer,
                    _Vector2i(-outer.main.offset.x + pst.x,
                              -outer.main.offset.y + pst.y)
                );
            else/if outer.pst.z > pst.z+1000 then
                // FIXME: Hack for the 0.6.0 release/tutorial world remove // later
// TODO
                call {Display::s_framebuffer}:draw_surface(
                    sfc.surface.framebuffer,
                    _Vector2i(-outer.main.offset.x + pst.x,
                              -outer.main.offset.y + pst.y)
                );
            end
        else
            call {Display::s_framebuffer}:draw_surface(
                sfc.surface.framebuffer,
                _Vector2i(-outer.main.offset.x + pst.x,
                          -outer.main.offset.y + pst.y)
            );
        end
    end
end

#endif
