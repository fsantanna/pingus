#ifndef _DOTS_CEU
#define _DOTS_CEU

data EDot1 with
    event (int,bool,bool,int) fst;
    event int                 snd;
end

data EDot2 with
    event bool out;
    event void fst;
    event void snd;
end

code/await Mouse (var& Rect rect, var& EDot2 e) -> FOREVER
do
    code/tight Is_Inside (var int x, var int y) -> bool do
        var Vector2i off = call Get_Offset();
        var float dx = off.x + x - outer.rect.left;
        var float dy = off.y + y - outer.rect.top;
        escape {Math::sqrt}(dx*dx + dy*dy) < 30;
    end

    par do
        var bool is_on = false;
        var int x;
        var int y;
        every (x,y) in ON_POINTER_MOVE do
            var bool v = call Is_Inside(x,y);
            if v != is_on then
                is_on = v;
                emit e.out(not v);
            end
        end
    with
        var int x;
        var int y;
        every (x,y) in ON_PRIMARY_BUTTON_PRESSED do
            if call Is_Inside(x,y) then
                emit e.fst;
            end
        end
    with
        var int x;
        var int y;
        every (x,y) in ON_SECONDARY_BUTTON_PRESSED do
            if call Is_Inside(x,y) then
                emit e.snd;
            end
        end
    end
end

code/await StoryDot (var& EDot1 e1) -> FOREVER
do
    {
        static FileReader  reader;
        static Vector3f    pst;
        static std::string name;
        reader = file_reader->read_section("dot");
        reader.read_vector("position", pst);
        reader.read_string("name",     name);
        ceu_dbg_assert(!name.empty());
    };

    var int id = {path_graph->lookup_node(name)};

    {
        static std::string m_name;
        static std::string m_story;
        static bool        m_credits;
        file_reader->read_string("name",  m_name);
        file_reader->read_string("story", m_story);
        m_credits = false;
        file_reader->read_bool  ("credits", m_credits);
    };

    var bool show_credits = {m_credits} as bool;

    vector[] byte m_name   = [] .. {m_name.c_str()} as _char&&;
    vector[] byte filename = [] .. {m_story.c_str()} as _char&&;

    var Rect rect = val Rect({pst.x},{pst.y}, 0, 0);
    spawn Sprite_from_name(&rect, "core/worldmap/story_dot", &outer.main.dt, &outer.main.redraw, true);

    var EDot2 e2 = _;
    spawn Mouse(&rect, &e2);

    var bool v = await e2.out until v==false;
    pause/if e2.out do
        spawn Sprite_from_name(&rect, "core/worldmap/story_dot_highlight", &outer.main.dt, &outer.main.redraw, true);

        par do
            every outer.main.redraw do
                call {Fonts::pingus_small}.render(
                    {origin_top_center},
                    -outer.main.offset.x + rect.left,
                    -outer.main.offset.y + rect.top-44,
                    __(&&m_name[0] as _char&&),
                    *{Display::s_framebuffer}
                );
            end
        with
            every e2.fst do
                if {globals::developer_mode} as bool then
                    _log_info("Worldmap: Clicked on: %1%", &&filename[0] as _char&&);
                end
                ///global:worldmap_return_filename = [] .. &&dot.filename as _char&&;
                emit e1.fst(id,true,show_credits,{Savegame::ACCESSIBLE});
            end
        with
            every e2.snd do
                if {globals::developer_mode} as bool then
                    emit e1.snd(id);
                end
            end
        end
    end
end

#if 0
class LevelDot with
    interface IDot;
    var int  id     = _WorldmapNS__NoNode;
    var int  status = {Savegame::NONE};
    var bool show_credits = false;
do
    {
        static FileReader  reader;
        static Vector3f    pos;
        static std::string name;
    };
    _reader = _XXX_PURE(this.reader:read_section("dot"));
    _reader.read_vector("position", _pos);
    _reader.read_string("name",     _name);
    _assert(not _name.empty());

    this.id = _path_graph:lookup_node(_name);

    {
        static std::string resname;
        static PingusLevel plf;
    };
    this.reader:read_string("levelname", _resname);
    { plf = PLFResMgr::load_plf(resname); };

    var char[] res_name = [] .. (_char&&)_resname.c_str();
    var char[] lvl_name = [] .. (_char&&)_plf.get_levelname().c_str();

    this.filename = [] .. res_name;

    var _Savegame&? savegame;
    finalize
        savegame = &_XXX_NOHOLD({SavegameManager::instance()}:get(_resname));
    with
        nothing;
    end
    if savegame? then
        this.status = savegame!.get_status();
    end

    var Rect rect = Rect(_pos.x,_pos.y, 0, 0);
    var Mouse mouse with
        this.rect = &rect;
        this.dot  = &outer;
    end;

    par do
        if this.status == {Savegame::FINISHED}
        or this.status == {Savegame::ACCESSIBLE}
        then
            if this.status == {Savegame::FINISHED} then
                var Sprite _ = Sprite.build_name(&rect, "core/worldmap/dot_green");
                var bool v = await mouse.ok_out until v==false;
                pause/if mouse.ok_out do
                    var Sprite _ = Sprite.build_name(&rect, "core/worldmap/dot_green_hl");
                    await FOREVER;
                end
            else
                var Sprite _ = Sprite.build_name(&rect, "core/worldmap/dot_red");
                var bool v = await mouse.ok_out until v==false;
                pause/if mouse.ok_out do
                    var Sprite _ = Sprite.build_name(&rect, "core/worldmap/dot_red_hl");
                    await FOREVER;
                end
                await FOREVER;
            end
        else
            var Sprite _ = Sprite.build_name(&rect, "core/worldmap/dot_invalid");
            await FOREVER;
        end
    with
        var bool v = await mouse.ok_out until v==false;
        pause/if mouse.ok_out do
            every REDRAW do
                var int x = -global:offset.x;
                var int y = -global:offset.y;
                if this.status == {Savegame::NONE} then
                    call {Fonts::pingus_small}.render(
                        _origin_top_center,
                        x+rect.left, y+rect.top-44,
                        __("???"),
                        *{Display::s_framebuffer}
                    );
                else
                    call {Fonts::pingus_small}.render(
                        _origin_top_center,
                        x+rect.left, y+rect.top-44,
                        __((_char&&)&&lvl_name),
                        *{Display::s_framebuffer}
                    );
                end
                if {globals::developer_mode} then
                    call {Fonts::pingus_small}.render(
                        _origin_top_center,
                        x+rect.left, y+rect.top-70,
                        __((_char&&)&&res_name),
                        *{Display::s_framebuffer}
                    );
                end
            end
        end
    end
end
#endif

#endif
