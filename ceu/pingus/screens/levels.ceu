#ifdef _LEVELMENU_CEU
#error multiple include
#else
#define _LEVELMENU_CEU

#include "engine/gui/sfc_button.ceu"

native/pre do
    typedef std::vector<std::shared_ptr<Levelset>> Levelsets;
    struct LevelsetPrioritySorter {
        bool operator()(std::shared_ptr<Levelset> lhs, std::shared_ptr<Levelset> rhs) const {
            return lhs->get_priority() > rhs->get_priority();
        }
    };
    static std::shared_ptr<Levelset> current_levelset;
    static Levelsets levelsets;
end

#define LEVEL_ITEMS_PER_PAGE 10
#define LEVELSET_ITEMS_PER_PAGE 4

#define LEVEL_ITEM_HEIGHT 32
#define LEVELSET_ITEM_HEIGHT 95

////////////////////////////////////////////////////////////////////////////////

data ILevelUI with
    var   int item_at_top = 0;
    event int ok;
    event int go;
end

code/await LevelUI (var int items_total, var int items_per_page, var int item_height)
                    -> (var ILevelUI ui)
                        -> int
do
    ui = _;

    spawn Wood();

    var Rct rct = val Rct(0, 0, _,_, &outer.main.ctr);
    spawn Spr_from_name(&rct, "core/menu/blackboard", &outer.main.dt, &outer.main.redraw);

    var Rct cancel_r = val Rct(-300, 200, 0, 0, &outer.main.ctr);
    var& SfcButton cancel =
        spawn SfcButton(&cancel_r,
                            "core/start/back",
                            "core/start/back_clicked",
                            "core/start/back_hover");
    spawn do
        every outer.main.redraw do
            var Rct r = _;
            call/recursive Rct_Off(&cancel_r, &r);
            call {Fonts::chalk_normal}.render(
                _origin_top_center,
                r.x+55, r.y,
                __("Back"),
                *{Display::s_framebuffer}
            );
        end
    end

    var Rct prv_r = val Rct(280, -48-12, _,_, &outer.main.ctr);
    var& SfcButton prv =
        spawn SfcButton(&prv_r,
                            "core/menu/arrow_up",
                            "core/menu/arrow_up_pressed",
                            "core/menu/arrow_up_hover");

    var Rct nxt_r = val Rct(280, 12, _,_, &outer.main.ctr);
    var& SfcButton nxt =
        spawn SfcButton(&nxt_r,
                            "core/menu/arrow_down",
                            "core/menu/arrow_down_pressed",
                            "core/menu/arrow_down_hover");

    // terminate on ESCAPE or cancel click

    par do
        every cancel.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await cancel.component.on_click;
        escape -1;
    with
        every prv.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        every nxt.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        par do
            every prv.component.on_click do
                if ui.item_at_top > 0 then
                    ui.item_at_top = ui.item_at_top - 1;
                    emit ui.go(item_height);
                end
            end
        with
            every nxt.component.on_click do
                if ui.item_at_top < items_total-items_per_page then
                    ui.item_at_top = ui.item_at_top + 1;
                    emit ui.go(-item_height);
                end
            end
        with
            var _Input__ButtonEvent&& but;
            every but in ON_BUTTON_PRESSED do
                if but:name == {Input::ACTION_DOWN_BUTTON} then
                    emit nxt.component.on_click;
                else/if but:name == {Input::ACTION_UP_BUTTON} then
                    emit prv.component.on_click;
                end
            end
        end
    with
        loop do
            var _Input__ButtonEvent&& but = await ON_BUTTON_PRESSED;
            if but:name == {Input::ESCAPE_BUTTON} then
                escape -1;
            end
        end
    end
end

////////////////////////////////////////////////////////////////////////////////

code/await Level (var& _Levelset levelset, var& ILevelUI ui, var int i, var Rct rct)
                    -> FOREVER
do
    var& RctComponent component = spawn RctComponent(&rct);

    var int y = rct.y;

    event bool pse;
    par do
        pause/if pse do
            par do
/// TODO
                if levelset.get_level(i):accessible as bool then
                    par do
                        every component.component.on_click do
                            emit ui.ok(i);
                        end
                    with
                        // draw background highlight mark
                        loop do
                            await component.component.on_pointer_enter;
                            var Rct r = val Rct(rct.x-25, y, _, _, &rct.off);
                            spawn Spr_from_name(&r, "core/menu/marker2", &outer.main.dt, &outer.main.redraw);
                            await component.component.on_pointer_leave;
                        end
                    end
                else
                    await FOREVER;
                end
            with
                // load checkbox
                var _char&& name;
                if not (levelset.get_level(i):accessible as bool) then
                    name = "core/menu/locked_small";
                else/if levelset.get_level(i):finished as bool then
                    name = "core/menu/checkbox_marked_small";
                else
                    name = "core/menu/checkbox_small";
                end
                var& Surface_from_name sfc = spawn Surface_from_name(name, _);

                every outer.main.redraw do
                    var Rct r = _;
                    call/recursive Rct_Off(&rct, &r);

                    // draw checkbox
                    call {Display::s_framebuffer}:draw_surface(
                        sfc.surface.framebuffer,
                        _Vector2i(r.x, r.y)
                    );

                    // draw levelname
                    if {globals::developer_mode} as bool then
                        call {Fonts::chalk_normal}.render(
                            _origin_top_left,
                            r.x+40, r.y+4,
                            __(levelset.get_level(i):plf.get_resname()),
                            *{Display::s_framebuffer}
                        );
                    else
                        call {Fonts::chalk_normal}.render(
                            _origin_top_left,
                            r.x+40, r.y+4,
                            __(levelset.get_level(i):plf.get_levelname()),
                            *{Display::s_framebuffer}
                        );
                    end
                end
            end
        end
    with
        loop do
            if i>=ui.item_at_top and
               i<ui.item_at_top+LEVEL_ITEMS_PER_PAGE
            then
                emit pse(false);
            else
                emit pse(true);
            end
            var int v = await ui.go;
            rct.y = rct.y + v;
            y = y + v;
        end
    end
end

////////////////////////////////////////////////////////////////////////////////

code/await LevelSelector (var& _Levelset levelset) -> int
do
    vector[] byte title = [] .. (levelset.get_title().c_str() as _char&&);
    vector[] byte image = [] .. (levelset.get_image().c_str() as _char&&);
    var int count = levelset.get_level_count() as int;

    //levelset.refresh();
    var&? LevelUI ui = spawn LevelUI(levelset.get_level_count() as int, LEVEL_ITEMS_PER_PAGE, LEVEL_ITEM_HEIGHT);
    var int? ret =
        watching ui do
            var Rct r1 = val Rct(0, -280+70-20, 0, 0, &outer.main.ctr);
            spawn Spr_from_name(&r1, levelset.get_image().c_str(), &outer.main.dt, &outer.main.redraw);
                r1.x = -370 + 35 + r1.w/2;

            var Rct r2 = val Rct(0, -280+70-20, 0, 0, &outer.main.ctr);
            spawn Spr_from_name(&r2, levelset.get_image().c_str(), &outer.main.dt, &outer.main.redraw);
                r2.x =  370 - 90 - r2.w/2;

            pool[] Level levels;
            var Rct rct = val Rct(-370+70+10, -280+70+70, 680-90, LEVEL_ITEM_HEIGHT-1, &outer.main.ctr);
            var int i;
            loop i in [0->levelset.get_level_count() as int[ do
                spawn Level(&levelset, &ui!.ui, i, rct) in levels;
                rct.y = rct.y + LEVEL_ITEM_HEIGHT;
            end

            par do
                var int v = await ui!.ui.ok;
                escape v;   // always >= 0
            with
                every outer.main.redraw do
                    call {Fonts::chalk_large}.render(
                        _origin_top_center,
                        outer.main.ctr.x, outer.main.ctr.y-280+40,
                        __(levelset.get_title()),
                        *{Display::s_framebuffer}
                    );
                end
            end
        end;
    escape ret!;
end

////////////////////////////////////////////////////////////////////////////////

code/await Levelset (var& ILevelUI ui, var int i, var Rct rct) -> FOREVER
do
    var& RctComponent component = spawn RctComponent(&rct);

    var int y = rct.y;

    event bool pse;
    par do
        pause/if pse do
            par do
                every component.component.on_click do
                    emit ui.ok(i);
                end
            with
                // draw background highlight mark
                loop do
                    await component.component.on_pointer_enter;
                    var Rct r = val Rct(rct.x-20, y-10, _,_, &rct.off);
                    spawn Spr_from_name(&r, "core/menu/marker", &outer.main.dt, &outer.main.redraw);
                    await component.component.on_pointer_leave;
                end
            with
                var& Surface_from_name sfc =
                    spawn Surface_from_name({levelsets[@i]->get_image().c_str()}, _);
                every outer.main.redraw do
                    var Rct r = _;
                    call/recursive Rct_Off(&rct, &r);

                    call {Display::s_framebuffer}:draw_surface(
                        sfc.surface.framebuffer,
                        _Vector2i(r.x+10, r.y)
                    );

                    call {Fonts::chalk_normal}.render(
                        _origin_top_left,
                        r.x+105, 15+r.y,
                        {_(levelsets[@i]->get_title())},
                        *{Display::s_framebuffer}
                    );

                    call {Fonts::chalk_small}.render(
                        _origin_top_left,
                        r.x+105, 40+r.y,
                        {_(levelsets[@i]->get_description())},
                        *{Display::s_framebuffer}
                    );

                    call {Fonts::chalk_normal}.render(
                        _origin_top_right,
                        60+r.w, 15+r.y,
                        {(boost::format("%1% %2%%%") % _("Solved:") % levelsets[@i]->get_completion()).str()},
                        *{Display::s_framebuffer}
                    );

                    call {Fonts::chalk_normal}.render(
                        _origin_top_right,
                        60+r.w, 40+r.y,
                        {(boost::format("%1% %2%") % levelsets[@i]->get_level_count() % _("levels")).str()},
                        *{Display::s_framebuffer}
                    );
                end
            end
        end
    with
        loop do
            if i>=ui.item_at_top and
               i<ui.item_at_top+LEVELSET_ITEMS_PER_PAGE
            then
                emit pse(false);
            else
                emit pse(true);
            end
            var int v = await ui.go;
            rct.y = rct.y + v;
            y = y + v;
        end
    end
end

code/await LevelsetSelector (void) -> int do
    {
        static auto directory = Pathname("levelsets", Pathname::DATA_PATH).opendir("*.levelset");
        directory = Pathname("levelsets", Pathname::DATA_PATH).opendir("*.levelset");
        levelsets.clear();
        for(auto i = directory.begin(); i != directory.end(); ++i) {
            try {
                std::shared_ptr<Levelset> levelset = Levelset::from_file(*i);
                //current_levelset = levelset;
                if (!levelset->get_developer_only() || globals::developer_mode) {
                    levelsets.push_back(levelset);
                }
            } catch(const std::exception& err) {
                log_error("%1%", err.what());
            }
        }
#if 0
        if (globals::developer_mode) {
            levelsets.push_back(Levelset::from_directory(_("Under Construction"),
                                                   _("Untested, unpolished and broken levels"),
                                                   "levelsets/underconstruction",
                                                   Pathname("levels", Pathname::DATA_PATH)).release());
        }
#endif
        std::sort(levelsets.begin(), levelsets.end(), LevelsetPrioritySorter());
    };
    var&? LevelUI ui =
        spawn LevelUI({levelsets.size()} as int, LEVELSET_ITEMS_PER_PAGE, LEVELSET_ITEM_HEIGHT);
    var int? ret =
        watching ui do
            pool[] Levelset sets;
            var Rct rct = val Rct(-370+70-10, -280+70+35, 680-90, LEVELSET_ITEM_HEIGHT-1, &outer.main.ctr);
            var int i;
            loop i in [0 -> {levelsets.size()}[ do
                spawn Levelset(&ui!.ui, i, rct) in sets;
                rct.y = rct.y + LEVELSET_ITEM_HEIGHT;
            end

            par do
                var int v = await ui!.ui.ok;
                escape v;   // always >= 0
            with
                every outer.main.redraw do
                    call {Fonts::chalk_large}.render(
                        _origin_top_center,
                        outer.main.ctr.x, outer.main.ctr.y-280+40,
                        __("Levelsets"),
                        *{Display::s_framebuffer}
                    );
                end
            end
        end;
    escape ret!;
end

////////////////////////////////////////////////////////////////////////////////

code/await LevelMenu (void) -> void do
    loop do
        var int i = await LevelsetSelector();
        if i == -1 then
            break;
        end
        var& _Levelset levelset = &{levelsets[@i]}.get() finalize (levelset) with end;
        {current_levelset = levelsets[@i];}
        loop do
            var int j = await LevelSelector(&levelset);
            if j == -1 then
                break;
            end
            var& _PingusLevel plf    = &_ID(&&levelset.get_level(j):plf) finalize (plf) with end;
            var& _Result      result = &_ID({&result}) finalize (result) with end;
            await Start_Game_Result_Loop(&plf, &result);
        end
    end
end

#endif
