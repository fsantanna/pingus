#ifndef _OPTIONMENU_CEU
#define _OPTIONMENU_CEU

native do
    ##include "util/system.hpp"
    ##include "tinygettext/dictionary_manager.hpp"
    ##include "pingus/config_manager.hpp"
    extern tinygettext::DictionaryManager dictionary_manager;
    struct LanguageSorter {
        bool operator()(const tinygettext::Language& lhs,
                      const tinygettext::Language& rhs) {
            return lhs.get_name() < rhs.get_name();
        }
    };
    static std::map<std::string, tinygettext::Language> m_language_map;
    static tinygettext::Language m_language = dictionary_manager.get_language();
end

#include "../../engine/gui/surface_button.ceu"
#include "../components/check_box.ceu"
#include "../components/label.ceu"
#include "../components/choice_box.ceu"

class OptionMenu with
do
    var float x = {Display::get_width()}  / 2;
    var float y = {Display::get_height()} / 2;
    // TODO: has to fill the screen
    //var Sprite _ = Sprite.w_xy_name(false, &x,&y, "core/menu/wood");
    var Sprite _ = Sprite.w_xy_name(false, &x,&y, "core/menu/blackboard");

    var int x_offset = ({Display::get_width()}  - 800) / 2;
    var int y_offset = ({Display::get_height()} - 600) / 2;

    var int yy = 140 + y_offset;
    var Rect rect = Rect(80+x_offset, yy, 320, 32);

    // LEFT OPTIONS //

    // Fullscreen
    var char[] l1 = [].."Fullscreen";
    var Rect r11 = Rect(rect.left,   rect.top, 32,32);
    var Rect r12 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b1 = CheckBox.build(r11, _config_manager.get_fullscreen());
    var Label _ = Label.build(&l1, r12);
    spawn do
        every v in b1.ok_clicked do
            _config_manager.set_fullscreen(v);
        end
    end

    rect.top = rect.top + 32;

    // Mouse Grab
    var char[] l2 = [].."Mouse Grab";
    var Rect r21 = Rect(rect.left,   rect.top, 32,32);
    var Rect r22 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b2 = CheckBox.build(r21, _config_manager.get_mouse_grab());
    var Label _ = Label.build(&l2, r22);
    spawn do
        every v in b2.ok_clicked do
            _config_manager.set_mouse_grab(v);
        end
    end

    rect.top = rect.top + 32;
    rect.top = rect.top + 32;

    // Software Cursor
    var char[] l3 = [].."Software Cursor";
    var Rect r31 = Rect(rect.left,   rect.top, 32,32);
    var Rect r32 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b3 = CheckBox.build(r31, _config_manager.get_software_cursor());
    var Label _ = Label.build(&l3, r32);
    spawn do
        every v in b3.ok_clicked do
            _config_manager.set_software_cursor(v);
        end
    end

    rect.top = rect.top + 32;

    // Auto Scrolling
    var char[] l4 = [].."Autoscrolling";
    var Rect r41 = Rect(rect.left,   rect.top, 32,32);
    var Rect r42 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b4 = CheckBox.build(r41, _config_manager.get_auto_scrolling());
    var Label _ = Label.build(&l4, r42);
    spawn do
        every v in b4.ok_clicked do
            _config_manager.set_auto_scrolling(v);
        end
    end

    rect.top = rect.top + 32;

    // Drag & Drop Scrolling
    var char[] l5 = [].."Drag&Drop Scrolling";
    var Rect r51 = Rect(rect.left,   rect.top, 32,32);
    var Rect r52 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b5 = CheckBox.build(r51, _config_manager.get_drag_drop_scrolling());
    var Label _ = Label.build(&l5, r52);
    spawn do
        every v in b5.ok_clicked do
            _config_manager.set_drag_drop_scrolling(v);
        end
    end

    rect.top = rect.top + 32;
    rect.top = rect.top + 32;

    // Print FPS
    var char[] l6 = [].."Print FPS";
    var Rect r61 = Rect(rect.left,   rect.top, 32,32);
    var Rect r62 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b6 = CheckBox.build(r61, _config_manager.get_print_fps());
    var Label _ = Label.build(&l6, r62);
    spawn do
        every v in b6.ok_clicked do
            _config_manager.set_print_fps(v);
        end
    end

    // RIGHT OPTIONS //

    rect.top  = yy;
    rect.left = rect.left + 320;

    // Resolution
    pool ChoiceItem[] its1;
    var ChoiceItem&&?[] vec1;

    {
        static std::vector<Size> resolutions = Display::get_fullscreen_video_modes();
        static Size fullscreen = config_manager.get_fullscreen_resolution();
        static auto it1 = resolutions.begin();
    };
    var int current1 = _resolutions.size() - 1;
    loop do
        if _it1 == _resolutions.end() then
            break;
        end

        // add resolution to the box
        {
            std::ostringstream ostr;
            ostr << it1->width << "x" << it1->height;
        };
        var char&& str = _XXX_PURE((char&&) _ostr.str().c_str());
        var ChoiceItem&&? it = spawn ChoiceItem.build(rect, str) in its1;
        vec1 = vec1..[it];

        if _fullscreen == *_it1 then
            current1 = (_it1 - _resolutions.begin());
        end
        {it1++;};
    end
    var ChoiceBox c1 = ChoiceBox.build(rect, &vec1, current1);
    spawn do
        every v in c1.ok_changed do
_printf("> res %d %s\n", v, &&vec1[v]!:value);
            { Size size_; };
            if _sscanf(&&vec1[v]!:value, "%dx%d", &&_size_.width, &&_size_.height) != 2 then
                _log_error("failed to parse: %1%", &&vec1[v]!:value);
            else
                _config_manager.set_fullscreen_resolution(_size_);
            end
        end
    end

    rect.top = rect.top + 32;

    // Renderer
    var int current2;
    if _config_manager.get_renderer() == _SDL_FRAMEBUFFER then
        current2 = 0;
    else/if _config_manager.get_renderer() == _DELTA_FRAMEBUFFER then
        current2 = 1;
#ifdef HAVE_OPENGL
    else/if _config_manager.get_renderer() == _OPENGL_FRAMEBUFFER then
        current2 = 2;
#endif
    else
        current2 = -1;
        _assert(not "unknown renderer type");
    end
    var ChoiceItem&&?[] vec2;
    var ChoiceItem it21 = ChoiceItem.build(rect, "sdl");
    vec2 = vec2 .. [ &&it21 ];
    var ChoiceItem it22 = ChoiceItem.build(rect, "delta");
    vec2 = vec2 .. [ &&it22 ];
#ifdef HAVE_OPENGL
    var ChoiceItem it23 = ChoiceItem.build(rect, "opengl");
    vec2 = vec2 .. [ &&it23 ];
#endif
    var ChoiceBox c2 = ChoiceBox.build(rect, &vec2, current2);
    spawn do
        every v in c2.ok_changed do
_printf("> ren %d %s\n", v, &&vec2[v]!:value);
            _config_manager.set_renderer(
                _framebuffer_type_from_string(&&vec2[v]!:value)
                    finalize with end
            );
        end
    end

    rect.top = rect.top + 32;
    rect.top = rect.top + 32;

    // Language
    var ChoiceItem&&?[] vec3;
    pool ChoiceItem[] its2;

    {
        static std::set<tinygettext::Language> languages =
            dictionary_manager.get_languages();
        // English is the default language, thus it's not in the list of
        // languages returned by tinygettext and we have to add it manually
        languages.insert(tinygettext::Language::from_name("en"));
        static std::vector<tinygettext::Language> langs(languages.begin(), languages.end());
        std::sort(langs.begin(), langs.end(), LanguageSorter());
        static auto it2 = langs.begin();
    };
    var int? current3;
    loop do
        if _it2 == _langs.end() then
            break;
        end

        var char&& str = _XXX_PURE((char&&)_it2:get_name().c_str());
        _m_language_map[_XXX_PURE(str)] = *_it2;

        var ChoiceItem&&? it = spawn ChoiceItem.build(rect, str) in its2;
        vec3 = vec3..[it];

        if _dictionary_manager.get_language() == *_it2 then
            current3 = (_it2 - _langs.begin());
        end
        {it2++;};
    end
    var ChoiceBox c3 = ChoiceBox.build(rect, &vec3, current3!);
    spawn do
        every v in c3.ok_changed do
_printf("> lan %d %s\n", v, &&vec3[v]!:value);
            { static char* str; };
            _str = _XXX_PURE(&&vec3[v]!:value);
            { static auto it = m_language_map.find(str); };
            if _it == _m_language_map.end() then
                _log_error("unknown language: %1%", &&vec3[v]!:value);
            else
                _m_language = _it:second;
                _config_manager.set_language(_it:second);
            end
        end
    end

    rect.top = rect.top + 32;

    // CLOSE //

    var SurfaceButton close with
        this.x = {Display::get_width()/2}  + 245;
        this.y = {Display::get_height()/2} + 150;
        this.button         = "core/start/ok";
        this.button_pressed = "core/start/ok_clicked";
        this.button_over    = "core/start/ok_hover";
    end;

    par/or do
        every close.get_component().on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await close.get_component().on_click;
        call {Sound::PingusSound::play_sound}("yipee");
    with
        loop do
            var _Input__Event&& e = await ON_INPUT_EVENT;
            var _Input__ButtonEvent&& but = &&e:button;
            if  e:type    == {Input::BUTTON_EVENT_TYPE}
            and but:state == {Input::BUTTON_PRESSED}
            and but:name  == {Input::ESCAPE_BUTTON}
            then
                break;
            end
        end
    with
        every gc in SCREENMANAGER_DRAW do
            gc:print_center({Fonts::chalk_large},
                            _Vector2i(gc:get_width()/2,
                                      gc:get_height()/2 - 240),
                            __("Option Menu"));

            gc:print_center({Fonts::chalk_normal},
                            _Vector2i(gc:get_width()/2 + 245 + 30,
                                      gc:get_height()/2 + 150 - 20),
                            __("Close"));

            gc:print_left({Fonts::chalk_normal},
                          _Vector2i(gc:get_width()/2 - 320,
                                    gc:get_height()/2 + 200),
                          __("Some options require a restart of the game to take effect."));
        end
    end

    {
        Pathname cfg_filename(System::get_userdir() + "config",
                              Pathname::SYSTEM_PATH);
    };
    _log_info("saving configuration: %1%", _cfg_filename);
    _config_manager.get_options().save(_cfg_filename);
end

#endif
