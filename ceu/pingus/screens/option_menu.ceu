#ifndef _OPTIONMENU_CEU
#define _OPTIONMENU_CEU

native do
    ##include "pingus/config_manager.hpp"
end

#include "../../engine/gui/surface_button.ceu"
#include "../components/check_box.ceu"
#include "../components/label.ceu"

class OptionMenu with
do
    var float x = {Display::get_width()}  / 2;
    var float y = {Display::get_height()} / 2;
    // TODO: has to fill the screen
    //var Sprite _ = Sprite.w_xy_name(false, &x,&y, "core/menu/wood");
    var Sprite _ = Sprite.w_xy_name(false, &x,&y, "core/menu/blackboard");

    var int x_offset = ({Display::get_width()}  - 800) / 2;
    var int y_offset = ({Display::get_height()} - 600) / 2;

    var Rect rect  = Rect(80+x_offset, 140+y_offset, 320, 32);

    // Fullscreen
    var char[] l1 = [].."Fullscreen";
    var Rect r11 = Rect(rect.left,   rect.top, 32,32);
    var Rect r12 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b1 = CheckBox.build(r11, _config_manager.get_fullscreen());
    var Label _ = Label.build(&l1, r12);
    spawn do
        every v in b1.ok_clicked do
            _config_manager.set_fullscreen(v);
        end
    end

    rect.top = rect.top + 32;

    // Mouse Grab
    var char[] l2 = [].."Mouse Grab";
    var Rect r21 = Rect(rect.left,   rect.top, 32,32);
    var Rect r22 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b2 = CheckBox.build(r21, _config_manager.get_mouse_grab());
    var Label _ = Label.build(&l2, r22);
    spawn do
        every v in b2.ok_clicked do
            _config_manager.set_mouse_grab(v);
        end
    end

    rect.top = rect.top + 32;
    rect.top = rect.top + 32;

    // Software Cursor
    var char[] l3 = [].."Software Cursor";
    var Rect r31 = Rect(rect.left,   rect.top, 32,32);
    var Rect r32 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b3 = CheckBox.build(r31, _config_manager.get_software_cursor());
    var Label _ = Label.build(&l3, r32);
    spawn do
        every v in b3.ok_clicked do
            _config_manager.set_software_cursor(v);
        end
    end

    rect.top = rect.top + 32;

    // Auto Scrolling
    var char[] l4 = [].."Autoscrolling";
    var Rect r41 = Rect(rect.left,   rect.top, 32,32);
    var Rect r42 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b4 = CheckBox.build(r41, _config_manager.get_auto_scrolling());
    var Label _ = Label.build(&l4, r42);
    spawn do
        every v in b4.ok_clicked do
            _config_manager.set_auto_scrolling(v);
        end
    end

    rect.top = rect.top + 32;

    // Drag & Drop Scrolling
    var char[] l5 = [].."Drag&Drop Scrolling";
    var Rect r51 = Rect(rect.left,   rect.top, 32,32);
    var Rect r52 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b5 = CheckBox.build(r51, _config_manager.get_drag_drop_scrolling());
    var Label _ = Label.build(&l5, r52);
    spawn do
        every v in b5.ok_clicked do
            _config_manager.set_drag_drop_scrolling(v);
        end
    end

    rect.top = rect.top + 32;
    rect.top = rect.top + 32;

    // Print FPS
    var char[] l6 = [].."Print FPS";
    var Rect r61 = Rect(rect.left,   rect.top, 32,32);
    var Rect r62 = Rect(rect.left+40,rect.top, 32,32);
    var CheckBox b6 = CheckBox.build(r61, _config_manager.get_print_fps());
    var Label _ = Label.build(&l6, r62);
    spawn do
        every v in b6.ok_clicked do
            _config_manager.set_print_fps(v);
        end
    end

    // Close
    var SurfaceButton close with
        this.x = {Display::get_width()/2}  + 245;
        this.y = {Display::get_height()/2} + 150;
        this.button         = "core/start/ok";
        this.button_pressed = "core/start/ok_clicked";
        this.button_over    = "core/start/ok_hover";
    end;

    par do
        every close.get_component().on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await close.get_component().on_click;
        call {Sound::PingusSound::play_sound}("yipee");
        escape 0;
    with
        loop do
            var _Input__Event&& e = await ON_INPUT_EVENT;
            var _Input__ButtonEvent&& but = &&e:button;
            if  e:type    == {Input::BUTTON_EVENT_TYPE}
            and but:state == {Input::BUTTON_PRESSED}
            and but:name  == {Input::ESCAPE_BUTTON}
            then
                escape 0;
            end
        end
    end
end

#endif
