#ifdef _SMALLMAP_CEU
#error multiple include
#else
#define _SMALLMAP_CEU

code/tight Is_At (var int x, var int y) -> bool do
    escape (x > outer.game.rect_smallmap.left and
            x < outer.game.rect_smallmap.left + outer.game.rect_smallmap.width and
            y > outer.game.rect_smallmap.top and
            y < outer.game.rect_smallmap.top + outer.game.rect_smallmap.height);
end

par do
    do ()
        #include "smallmap_image.ceu"
    end
with
    loop do
        var int x;
        var int y;
        (x,y) = await ON_PRIMARY_BUTTON_PRESSED until call Is_At(x,y);
        watching ON_PRIMARY_BUTTON_RELEASED do
            loop do
                // set view to the given COs
                var int cx = (x - outer.game.rect_smallmap.left) * outer.game.rect.width / outer.game.rect_smallmap.width;
                var int cy = (y - outer.game.rect_smallmap.top) * outer.game.rect.height / outer.game.rect_smallmap.height;
                call Game_Set_Viewpoint(cx, cy);
                (x,y) = await ON_POINTER_MOVE until call Is_At(x,y);
            end
        end
    end
with
    every SDL_REDRAW do
        var Vector2i vec = call Game_Get_Pos();
        {
            static Rect view_rect;
        };

        if (outer.game.rect.width > {Display::get_width()}) then
            var int rwidth = {Display::get_width()} * outer.game.rect_smallmap.width / outer.game.rect.width;
            {
                view_rect.left = @(outer.game.rect_smallmap.left + (vec.x * outer.game.rect_smallmap.width / outer.game.rect.width) - rwidth/2);
                view_rect.right = view_rect.left + @rwidth;
            }
        else
            {
                view_rect.left  = @outer.game.rect_smallmap.left;
                view_rect.right = @(outer.game.rect_smallmap.left + outer.game.rect_smallmap.width);
            }
        end

        if (outer.game.rect.height > {Display::get_height()}) then
            var int rheight = {Display::get_height()} * outer.game.rect_smallmap.height / outer.game.rect.height;
            {
                view_rect.top = @(outer.game.rect_smallmap.top + (vec.y * outer.game.rect_smallmap.height / outer.game.rect.height) - rheight/2);
                view_rect.bottom = view_rect.top + @rheight;
            }
        else
            {
                view_rect.top    = @outer.game.rect_smallmap.top;
                view_rect.bottom = @(outer.game.rect_smallmap.top + outer.game.rect_smallmap.height);
            }
        end

        {Display::s_framebuffer->draw_rect(view_rect, Color(255,255,0));}

        // Draw Pingus
        var&? Pingu pingu;
        loop pingu in outer.pingus do
            var int x = outer.game.rect_smallmap.left + (pingu!.pingu.rect.left * outer.game.rect_smallmap.width  / outer.game.rect.width);
            var int y = outer.game.rect_smallmap.top  + (pingu!.pingu.rect.top  * outer.game.rect_smallmap.height / outer.game.rect.height);
            {Display::s_framebuffer->draw_line(Vector2i(@x, @y), Vector2i(@x, @y-2), Color(255,255,0));}
        end
    end
end

#endif
