#ifdef _SMALLMAP_CEU
#error multiple include
#else
#define _SMALLMAP_CEU

code/tight Is_At (var int x, var int y) -> bool do
    escape (x > outer.game.rect_smallmap.abs.x and
            x < outer.game.rect_smallmap.abs.x + outer.game.rect_smallmap.abs.w and
            y > outer.game.rect_smallmap.abs.y and
            y < outer.game.rect_smallmap.abs.y + outer.game.rect_smallmap.abs.h);
end

par do
    do ()
        #include "smallmap_image.ceu"
    end
with
    loop do
        var int x;
        var int y;
        (x,y) = await ON_PRIMARY_BUTTON_PRESSED until call Is_At(x,y);
        watching ON_PRIMARY_BUTTON_RELEASED do
            loop do
                // set view to the given COs
                var int cx = (x - outer.game.rect_smallmap.abs.x) * outer.game.rect.w / outer.game.rect_smallmap.abs.w;
                var int cy = (y - outer.game.rect_smallmap.abs.y) * outer.game.rect.h / outer.game.rect_smallmap.abs.h;

                outer.game.offset.off.x = -cx;
                outer.game.offset.off.y = -cy;
                emit outer.game.offset.changed;

                (x,y) = await ON_POINTER_MOVE until call Is_At(x,y);
            end
        end
    end
with
    every outer.main.redraw do
        {
            static Rect view_rect;
        };

        if (outer.game.rect.w > outer.main.rect.abs.w) then
            var int rwidth = outer.main.rect.abs.w * outer.game.rect_smallmap.abs.w / outer.game.rect.w;
            {
                view_rect.left = @(outer.game.rect_smallmap.abs.x + (-outer.game.offset.off.x * outer.game.rect_smallmap.abs.w / outer.game.rect.w) - rwidth/2);
                view_rect.right = view_rect.left + @rwidth;
            }
        else
            {
                view_rect.left  = @outer.game.rect_smallmap.abs.x;
                view_rect.right = @(outer.game.rect_smallmap.abs.x + outer.game.rect_smallmap.abs.w);
            }
        end

        if (outer.game.rect.h > outer.main.rect.abs.h) then
            var int rheight = outer.main.rect.abs.h * outer.game.rect_smallmap.abs.h / outer.game.rect.h;
            {
                view_rect.top = @(outer.game.rect_smallmap.abs.y + (-outer.game.offset.off.y * outer.game.rect_smallmap.abs.h / outer.game.rect.h) - rheight/2);
                view_rect.bottom = view_rect.top + @rheight;
            }
        else
            {
                view_rect.top    = @outer.game.rect_smallmap.abs.y;
                view_rect.bottom = @(outer.game.rect_smallmap.abs.y + outer.game.rect_smallmap.abs.h);
            }
        end

        {Display::s_framebuffer->draw_rect(view_rect, Color(0,255,0));}

        // Draw Pingus
        var&? Pingu pingu;
        loop pingu in outer.pingus do
            var int x = outer.game.rect_smallmap.abs.x + (pingu!.pingu.rect.off.x * outer.game.rect_smallmap.abs.w  / outer.game.rect.w);
            var int y = outer.game.rect_smallmap.abs.y  + (pingu!.pingu.rect.off.y  * outer.game.rect_smallmap.abs.h / outer.game.rect.h);
            {Display::s_framebuffer->draw_line(Vector2i(@x, @y), Vector2i(@x, @y-2), Color(255,255,0));}
        end
    end
end

#endif
