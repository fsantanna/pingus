#ifdef _PINGU_CEU
#error multiple include
#else
#define _PINGU_CEU

#include "pingu_particle.ceu"
pool[] PinguParticle pingu_particles;

#include "smoke_particle.ceu"
pool[] SmokeParticle smoke_particles;

data IPingu with
    var& IRRect   rect;
    var  s8       direction;
    var  Vector3f velocity = val Vector3f(0, 0, 0);
    var  _ActionName__Enum current_action  = {ActionName::FALLER};
    var  _ActionName__Enum previous_action = {ActionName::FALLER};

    vector[] byte name;

    event _ActionName__Enum go_action;
    event void              go_toggle_capture;
end

code/await Pingu (pool&[] Pingu  pingus,
                  var     uint   id,
                  var     int    owner_id,
                  var     int    x,
                  var     int    y,
                  var     s8?    direction_)
                    -> (var IPingu pingu)
                        -> void
do
    if not direction_? then
        direction_ = {LEFT};
    end

    var& RRect r = spawn RRect(IRRect(Rect_(x,y, 32,32),
                                      AnchorXY(AnchorX.Center(), AnchorY.Bottom()),
                                      &outer.game.offset_,
                                      AnchorXY(AnchorX.Center(), AnchorY.Center()),
                                      _, _));

    pingu = val IPingu(&r.pub, direction_!, _,_,_,_,_,_);

    var _ActionName__Enum wall_action = {ActionName::NONE};
    var _ActionName__Enum fall_action = {ActionName::NONE};

    code/tight Pingu_Get_Owner_Str          (void)                  -> _char&&;
    code/tight Pingu_Set_Velocity           (var Vector3f velocity) -> void;
    code/tight Pingu_Toggle_Direction       (void)                  -> void;
    code/tight Pingu_Rel_Getpixel           (var int x, var int y)  -> int;
    code/tight Pingu_Head_Collision_On_Walk (var int x, var int y)  -> bool;
    code/tight Pingu_Check_Action           (var _ActionName__Enum new_action) -> bool;
    code/tight Pingu_Is_Over                (var int x, var int y)  -> bool;
    code/tight Pingu_Dist                   (var int x, var int y)  -> float;
    code/tight Pingu_Is_Inside              (var int x1, var int y1, var int x2, var int y2) -> bool;
    #include "codes.ceu"

    #include "mover.ceu"
    #include "actions/basher.ceu"
    #include "actions/blocker.ceu"
    #include "actions/bomber.ceu"
    #include "actions/bridger.ceu"
    #include "actions/climber.ceu"
    #include "actions/digger.ceu"
    #include "actions/drown.ceu"
    #include "actions/exiter.ceu"
    #include "actions/faller.ceu"
    #include "actions/floater.ceu"
    #include "actions/jumper.ceu"
    #include "actions/miner.ceu"
    #include "actions/slider.ceu"
    #include "actions/splashed.ceu"
    #include "actions/waiter.ceu"
    #include "actions/walker.ceu"

    spawn () do
        #include "capture_rectangle.ceu"
    end

    var int ret =
    do
        event _ActionName__Enum e_set_action;
        par do
            loop do
                await outer.game.dt;

                // FIXME: Out of screen check is ugly
                /* The Pingu has hit the edge of the screen, a good time to let
                   him die.
                 */
                if call Pingu_Rel_Getpixel(0,-1) == {Groundtype::GP_OUTOFSCREEN} then
                    //Sound::PingusSound::play_sound("die");
    // TODO: copied from walker.ceu
                    pingu.rect.off.x = (pingu.rect.off.x + (pingu.direction as int));
                    emit pingu.rect.changed;
                    escape {PS_DEAD};
                end

                if call Pingu_Rel_Getpixel(0,-1) == {Groundtype::GP_WATER} or
                   call Pingu_Rel_Getpixel(0,-1) == {Groundtype::GP_LAVA}
                then
                    emit e_set_action({ActionName::DROWN});
                    break;  // no more checks, will die
                end


                // if it has hit the ground too quickly
                if call Pingu_Rel_Getpixel(0,-1) != {Groundtype::GP_NOTHING} and
                        pingu.velocity.y > {deadly_velocity}
                then
                    emit e_set_action({ActionName::SPLASHED});
                    break;  // no more checks, will die
                end
            end
            await FOREVER;
        with
            var _ActionName__Enum next_action;
            every next_action in pingu.go_action do
                if next_action!={ActionName::EXITER} and next_action!={ActionName::LASERKILL} then
                    _ceu_dbg_assert(call Pingu_Check_Action(next_action));
                end
                if not call Pingu_Check_Action(next_action) then
                    continue;
                end

                var int mode = {ActionName::ACTIVATION_MODE}[next_action];

                if mode == {ActionType::INSTANT} then
                    if next_action != pingu.current_action and
                       ({ActionName::CHANGE_ALLOWED}
                            [pingu.current_action][next_action] as bool)
                    then
                        emit e_set_action(next_action);
                    end
                else/if mode == {ActionType::WALL_TRIGGERED} then
                    wall_action = next_action;
                else/if mode == {ActionType::FALL_TRIGGERED} then
                    fall_action = next_action;
                end
            end
        with
            loop do
                var _ActionName__Enum? next_action = _;
                pingu.name = [] .. {ActionName::to_screenname}(pingu.current_action) as _char&&;
                par/or do
                    next_action = await e_set_action;
                with
                    if pingu.current_action == {ActionName::NONE} then
                        _ceu_dbg_assert({!"invalid action"});
                        await FOREVER;
                    else/if pingu.current_action == {ActionName::DEAD} then
                        escape {PS_DEAD};
                    else/if pingu.current_action == {ActionName::BASHER} then
                        next_action = await Basher();
                    else/if pingu.current_action == {ActionName::BLOCKER} then
                        next_action = await Blocker();
                    else/if pingu.current_action == {ActionName::BOMBER} then
                        next_action = await Bomber();
                    else/if pingu.current_action == {ActionName::BRIDGER} then
                        next_action = await Bridger();
                    else/if pingu.current_action == {ActionName::CLIMBER} then
                        next_action = await Climber();
                    else/if pingu.current_action == {ActionName::DIGGER} then
                        next_action = await Digger();
                    else/if pingu.current_action == {ActionName::DROWN} then
                        next_action = await Drown();
                    else/if pingu.current_action == {ActionName::EXITER} then
                        next_action = await Exiter();
                        escape {PS_EXITED};
                    else/if pingu.current_action == {ActionName::FALLER} then
                        next_action = await Faller();
                    else/if pingu.current_action == {ActionName::FLOATER} then
                        next_action = await Floater();
                    else/if pingu.current_action == {ActionName::JUMPER} then
                        next_action = await Jumper();
                    else/if pingu.current_action == {ActionName::MINER} then
                        next_action = await Miner();
                    else/if pingu.current_action == {ActionName::SLIDER} then
                        next_action = await Slider();
                    else/if pingu.current_action == {ActionName::SPLASHED} then
                        next_action = await Splashed();
                    else/if pingu.current_action == {ActionName::WAITER} then
                        next_action = await Waiter();
                    else/if pingu.current_action == {ActionName::WALKER} then
                        next_action = await Walker();
                    else
_printf(">>> %d\n", pingu.current_action);
                        _ceu_dbg_assert({!"Invalid action name provied"});
                        await FOREVER;
                    end
                end
                pingu.previous_action = pingu.current_action;
                pingu.current_action  = next_action!;
            end
        end
    end;

    _ceu_dbg_assert(ret != {PS_ALIVE});

    call Game_Pingu_Out(ret);
end

#endif
