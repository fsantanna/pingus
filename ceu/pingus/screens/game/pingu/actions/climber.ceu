#ifdef _CLIMBER_CEU
#error multiple include
#else
#define _CLIMBER_CEU

code/await Climber (void) -> _ActionName__Enum
do
    vector[] byte left  = [] .. "pingus/player"
                          .. (call Pingu_Get_Owner_Str() as _char&&)
                          .. "/climber/left";
    vector[] byte right = [] .. "pingus/player"
                          .. (call Pingu_Get_Owner_Str() as _char&&)
                          .. "/climber/right";

    spawn RightLeftSprites(&outer.pingu.rect, &outer.pingu.direction, &left, &left, &right);

    loop do
        await outer.game.dt;

        // If above is free
        if (call Pingu_Rel_Getpixel(0,1) == {Groundtype::GP_NOTHING} or
            call Pingu_Rel_Getpixel(0,1) == {Groundtype::GP_BRIDGE})
        then
            // and there is still ground to walk on
            if (call Pingu_Rel_Getpixel(1,1) != {Groundtype::GP_NOTHING}) then
                outer.pingu.rect.y = outer.pingu.rect.y - 1;
            else/if (call Pingu_Rel_Getpixel(1,1) ==  {Groundtype::GP_NOTHING}) then
                //  log_info("Climber failed, no more wall");
                // If Pingu able to get to new position without head collision
                if (not call Pingu_Head_Collision_On_Walk(outer.pingu.direction as int,1)) then
                    // Get ready to walk
                    outer.pingu.rect.x = outer.pingu.rect.x + (outer.pingu.direction as int);
                    outer.pingu.rect.y = outer.pingu.rect.y - 1;
                else
                    // Get ready to fall
                    call Pingu_Toggle_Direction();
                end
                // Finish climbing.
                escape {ActionName::WALKER};
            end
        else
            //    log_info("Climber failed, falling down");
            call Pingu_Toggle_Direction();
            escape {ActionName::WALKER};
        end
    end
end

#endif
