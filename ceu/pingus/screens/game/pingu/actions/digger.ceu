#ifdef _DIGGER_CEU
#error multiple include
#else
#define _DIGGER_CEU

code/await Digger (void) -> _ActionName__Enum
do
    vector[] byte str = [] .. "pingus/player"
                           .. (call Pingu_Get_Owner_Str() as _char&&)
                           .. "/digger/left";

    spawn Sprite_from_name(&outer.pingu.rect, &&str[0] as _char&&, &outer.game.dt, &outer.main.redraw);

    code/tight Have_Something_To_Dig (void)           -> bool;
    code/tight Dig                   (var bool final) -> void;

    /* UPDATE */

    var int i;
    loop i do
        await outer.game.dt;
        if not call Have_Something_To_Dig() then
            call Dig(true);
            escape {ActionName::WALKER};
        else/if i%4 == 0 then
            call Dig(false);
        end
    end

    /* PRIVATE */

    code/tight Have_Something_To_Dig (void) -> bool do
        if call Pingu_Rel_Getpixel(0,-1) == {Groundtype::GP_NOTHING} then
            escape false;
        else/if call Pingu_Rel_Getpixel(0,-1) == {Groundtype::GP_SOLID} then
            call { Sound::PingusSound::play_sound }("chink");
            escape false;
        else
            escape true;
        end
    end


    code/tight Dig (var bool final) -> void do
        {
            ##include "../../../src/pingus/collision_mask.hpp"
            static CollisionMask digger_radius(
                    "pingus/common/digger_radius_gfx",
                    "pingus/common/digger_radius"
            );
            static CollisionMask digger_radius_final(
                    "pingus/common/digger_radius_final_gfx",
                    "pingus/common/digger_radius_final_gfx"
            );
        };

        if not final then
            call Game_Remove({&digger_radius},
                             outer.pingu.rect.x - {digger_radius.get_width()}/2,
                             outer.pingu.rect.y - {digger_radius.get_height()} + 2);
        else
            call Game_Remove({&digger_radius_final},
                             outer.pingu.rect.x - {digger_radius.get_width()}/2,
                             outer.pingu.rect.y - {digger_radius.get_height()} + 2);
        end
        outer.pingu.rect.y = outer.pingu.rect.y + 1;
    end
end

#endif
