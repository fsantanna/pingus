#ifdef _BRIDGER_CEU
#error multiple include
#else
#define _BRIDGER_CEU

code/await Bridger (void) -> _ActionName__Enum
do
    var int bricks = {BRIDGER_MAX_BRICKS};

// TODO: ???
    vector[] byte name = //&outer.pingu.name;
        [] .. "Bridger (" ..
           (({StringUtil::to_string}(bricks).c_str()) as _char&&) ..
           ")";

    code/tight Way_Is_Free             (void) -> bool;
    code/tight Brick_Placement_Allowed (void) -> bool;
    code/tight Place_A_Brick           (void) -> void;
    code/tight Walk_One_Step_Up        (void) -> void;

    /* UPDATE */
    var int i;
    loop i in [1 -> {BRIDGER_MAX_BRICKS}] do

        // BUILDING
        do/_
            vector[] byte left  = [] .. "pingus/player"
                                  .. (call Pingu_Get_Owner_Str() as _char&&)
                                  .. "/bridger/left";
            vector[] byte right = [] .. "pingus/player"
                                  .. (call Pingu_Get_Owner_Str() as _char&&)
                                  .. "/bridger/right";

            var&? RightLeftSprites_ builds =
                spawn RightLeftSprites_(&outer.pingu.rect, &outer.pingu.direction, &left, &left, &right);

/// TODO
            var&? Sprite_from_name_ s;
            loop s in builds!.sprites do
                break;
            end

            await outer.game.dt until s!.sprite.frame == 7;

            if call Brick_Placement_Allowed() then
                call Place_A_Brick(); // me.bricks--;
            else
                call Pingu_Toggle_Direction();
                escape {ActionName::WALKER};
            end
            await builds;
        end

        // SKIP the last WALKING
        if i == {BRIDGER_MAX_BRICKS} then
            escape {ActionName::WAITER};
        end

        // WALKING
        do/_
            vector[] byte left  = [] .. "pingus/player"
                                  .. (call Pingu_Get_Owner_Str() as _char&&)
                                  .. "/bridger_walk/left";
            vector[] byte right = [] .. "pingus/player"
                                  .. (call Pingu_Get_Owner_Str() as _char&&)
                                  .. "/bridger_walk/right";

            await RightLeftSprites_(&outer.pingu.rect, &outer.pingu.direction, &left, &left, &right);

            // FIXME: Dangerous! might not be fixed timing
            if not call Way_Is_Free() then
                // We reached a wall...
                call Pingu_Toggle_Direction();
                escape {ActionName::WALKER};
            end
            call Walk_One_Step_Up();
        end
    end
    _assert(0);
    escape {ActionName::WALKER};

#if 0
        /* DRAW */
        every gc in PINGUHOLDER_DRAW do
            var int x_offset = 6;
            var int y_offset = 4;
            if      (bricks == _BRIDGER_MAX_BRICKS  ) then
                x_offset = -4;
                y_offset = 0;
            else/if (bricks == _BRIDGER_MAX_BRICKS-1) then
                x_offset = 0;
                y_offset = 1;
            else/if (bricks == _BRIDGER_MAX_BRICKS-2) then
                x_offset = 3;
                y_offset = 2;
            end

            if mode == _BRIDGER_BUILDING then
                _GC_COLOR_DRAW(
                    gc,
                    builds.get(outer.pingu.direction).me,
                    _Vector3f(outer.pingu.rect.left -
                                (float)(x_offset * outer.pingu.direction),
                                outer.pingu.rect.top + (float)(y_offset))
                );
            else // _BRIDGER_WALKING
                _GC_COLOR_DRAW(
                    gc,
                    walks.get(outer.pingu.direction).me,
                    _Vector3f(outer.pingu.rect.left -
                                (float)(x_offset * outer.pingu.direction),
                                outer.pingu.rect.top + (float)(y_offset))
                );
            end
        end
#endif

    /* PRIVATE */

    // Way_Is_Free() needs to stop BRIDGERS from getting stuck between a brick
    // and the ceiling.  The routine also stops cases of Bridgers building up but
    // then not being able to walk all the way down the bridge the it has built.
    // Even though the routine may be the same as brick_placement_allowed(), it is
    // best to keep them apart as they may need to be independent of each other if
    // there needs to be a patch.
    code/tight Way_Is_Free (void) -> bool do
        var bool way_free = true;
        var int x_inc;
        loop x_inc in [1 -> 4] do
            if call Pingu_Rel_Getpixel(x_inc, 2) != {Groundtype::GP_NOTHING}
            or call Pingu_Head_Collision_On_Walk(x_inc, 2)
            then
                way_free = false;
                break;
            end
        end
        escape way_free;
    end

    // brick_placement_allowed() is mainly for stopping WALKERS from getting 
    // stuck
    // between a brick and the ceiling.  Even though the routine may be the same,
    // as Way_Is_Free() it is best to keep them apart as they may need to be
    // independent of each other if there needs to be a patch.
    code/tight Brick_Placement_Allowed (void) -> bool do
        escape not call Pingu_Head_Collision_On_Walk(0, 2);
    end

    code/tight Place_A_Brick (void) -> void do
        outer.bricks = outer.bricks - 1;

// TODO: ???
        outer.pingu.name = [] .. "Bridger (" ..
                            ({StringUtil::to_string}(outer.bricks).c_str()) as _char&& ..
                            ")";

        if outer.bricks < 4 then
            { Sound::PingusSound::play_sound("ting"); };
        end

        {
            static CollisionMask brick_l("other/brick_left");
            static CollisionMask brick_r("other/brick_right");
        };

        if outer.pingu.direction == {RIGHT} then
            call Game_Put({&brick_r},
                          outer.pingu.rect.off.x + 10 - {brick_r.get_width()},
                          outer.pingu.rect.off.y,
                          {Groundtype::GP_BRIDGE}
            );
        else
            call Game_Put({&brick_l},
                          outer.pingu.rect.off.x - 10,
                          outer.pingu.rect.off.y,
                          {Groundtype::GP_BRIDGE}
            );
        end
    end

    code/tight Walk_One_Step_Up (void) -> void do
        outer.pingu.rect.off.x = outer.pingu.rect.off.x + (4*(outer.pingu.direction as int));
        outer.pingu.rect.off.y = outer.pingu.rect.off.y - 2;
        emit outer.pingu.rect.changed;
    end
end

#endif
