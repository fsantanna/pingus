#ifdef _MINER_CEU
#error multiple include
#else
#define _MINER_CEU

code/await Miner (void) -> _ActionName__Enum
do
    vector[] byte left  = [] .. "pingus/player"
                          .. (call Pingu_Get_Owner_Str() as _char&&)
                          .. "/miner/left";
    vector[] byte right = [] .. "pingus/player"
                          .. (call Pingu_Get_Owner_Str() as _char&&)
                          .. "/miner/right";

    spawn RightLeftSprites(&outer.pingu.rect, &outer.pingu.direction, &left, &right, true);

    code/tight Mine (var bool final, var int delay_count) -> void;

    /* UPDATE */
    var int delay_count;
    loop delay_count do
        await WORLD_UPDATE;

        if delay_count%4 != 0 then
            continue;
        end

        if call Pingu_Rel_Getpixel(0,-1) == {Groundtype::GP_NOTHING} then
            // stop mining when in the air
            call Mine(true, delay_count);
            escape {ActionName::WALKER};
        else/if call Pingu_Rel_Getpixel(0,            -1)  == {Groundtype::GP_SOLID} or
                call Pingu_Rel_Getpixel(0, {pingu_height}) == {Groundtype::GP_SOLID}
        then
            // stop mining when hitting solid ground
            if (call Pingu_Rel_Getpixel(0,-1) == {Groundtype::GP_SOLID}) then
                {Sound::PingusSound::play_sound("chink");};
            end
            call Mine(true, delay_count);

            // stop pingu from walking further into the solid.
            call Pingu_Toggle_Direction();
            escape {ActionName::WALKER};
        else
            // mine and walk forward
            call Mine(false, delay_count);
            outer.pingu.rect.left = outer.pingu.rect.left + (outer.pingu.direction as int);
            outer.pingu.rect.top  = outer.pingu.rect.top  + 1;
        end
    end

    /* PRIVATE */

    code/tight Mine (var bool final, var int delay_count) -> void do
        {
            ##include "../../../src/pingus/collision_mask.hpp"
            static CollisionMask miner_radius(
                    "pingus/common/miner_radius_gfx",
                    "pingus/common/miner_radius");
            static CollisionMask miner_radius_left(
                    "pingus/common/miner_radius_left_gfx",
                    "pingus/common/miner_radius_left");
            static CollisionMask miner_radius_right(
                    "pingus/common/miner_radius_right_gfx",
                    "pingus/common/miner_radius_right");
        };

        if not final then
            if delay_count%2 == 0 then
                // regular mine action
                call Game_Remove({&miner_radius},
                                 outer.pingu.rect.left - {miner_radius.get_width()/2} + (outer.pingu.direction as int),
                                 outer.pingu.rect.top  - {miner_radius.get_height()} + 2);
            end

        // the last mine action before switching to another action
        else/if outer.pingu.direction == {LEFT} then
            call Game_Remove({&miner_radius_left},
                             outer.pingu.rect.left - {miner_radius_left.get_width()/2} + (outer.pingu.direction as int),
                             outer.pingu.rect.top  - {miner_radius_left.get_height()} + 2);
        else    // RIGHT
            call Game_Remove({&miner_radius_right},
                             outer.pingu.rect.left - {miner_radius_right.get_width()/2} + (outer.pingu.direction as int),
                             outer.pingu.rect.top  - {miner_radius_right.get_height()} + 2);
        end
    end
end

#endif
