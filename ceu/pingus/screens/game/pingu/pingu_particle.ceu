#ifdef _PINGU_PARTICLE_HOLDER
#error multiple include
#else
#define _PINGU_PARTICLE_HOLDER

#define x_collision_decrease 0.3
#define y_collision_decrease 0.6

code/await PinguParticle (var int x, var int y) -> void
do
    var int livetime = (50 + _rand()%75);
    var Vector3f velocity = val Vector3f(({Math::frand}() * 7 - 3.5) as float,
                                         ({Math::frand}() * -9)      as float,
                                         0);

    var Rect rect = val Rect(x,y, 0,0);
    spawn Sprite_from_name(&rect, "particles/pingu_explo", true);

    var bool has_pixel = do
        var _CollisionMap_ptr ptr = call Game_Get_Colmap();
        escape ptr:getpixel(rect.left,rect.top) as bool;
    end;

    var int i;
    loop i in [0 -> livetime[ do
        await WORLD_UPDATE;

        var float tmp_x_add = 0.0;
        var float tmp_y_add = 0.0;

        // Simulated gravity
        velocity.y = velocity.y + outer.game.gravity;

        if velocity.y > 0 then
            tmp_y_add = velocity.y;
            loop do
                if tmp_y_add < 1.0 then
                    break;
                end
                if has_pixel then
                    velocity.y = velocity.y * -y_collision_decrease;
                    tmp_y_add = -tmp_y_add;
                    rect.top = rect.top - 1;
                    break;
                end
                rect.top = rect.top + 1;
                tmp_y_add = tmp_y_add - 1;
            end
            rect.top = rect.top + (tmp_y_add as int);
        else
            tmp_y_add = velocity.y;
            loop do
                if tmp_y_add > -1.0 then
                    break;
                end
                if has_pixel then
                    velocity.y = velocity.y * -y_collision_decrease;
                    tmp_y_add = -tmp_y_add;
                    rect.top = rect.top + 1;
                    break;
                end
                rect.top = rect.top - 1;
                tmp_y_add = tmp_y_add + 1;
            end
            rect.top = rect.top + (tmp_y_add as int);
        end

        if velocity.x > 0 then
            tmp_x_add = velocity.x;
            loop do
                if tmp_x_add < 1.0 then
                    break;
                end
                if has_pixel then
                    velocity.x = velocity.x * -x_collision_decrease;
                    tmp_x_add = -tmp_x_add;
                    rect.left = rect.left - 1;
                    break;
                end
                rect.left = rect.left + 1;
                tmp_x_add = tmp_x_add - 1;
            end
            rect.left = rect.left + (tmp_x_add as int);
        else
            tmp_x_add = velocity.x;
            loop do
                if tmp_x_add > -1.0 then
                    break;
                end
                if has_pixel then
                    velocity.x = velocity.x * -x_collision_decrease;
                    tmp_x_add = -tmp_x_add;
                    rect.left = rect.left + 1;
                    break;
                end
                rect.left = rect.left - 1;
                tmp_x_add = tmp_x_add + 1;
            end
            rect.left = rect.left + (tmp_x_add as int);
        end
    end
end

#undef x_collision_decrease
#undef y_collision_decrease

#endif
