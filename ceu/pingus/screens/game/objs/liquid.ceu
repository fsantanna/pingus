#ifdef _LIQUID_CEU
#error multiple include
#else
#define _LIQUID_CEU

code/await Liquid (void) -> FOREVER
do
    {
        static Vector3f p;
        WORLDOBJ_FACTORY_READER.read_vector("position", p);

        static ResDescriptor desc;
        WORLDOBJ_FACTORY_READER.read_desc("surface", desc);

        static int width;
        WORLDOBJ_FACTORY_READER.read_int("repeat", width);
    }
    var Rect rect = val Rect({p.x},{p.y}, 0,0);

/// TODO: vector of sprites up to width
    /* Background image */
    // FIXME: would be nice to allow surface manipulation with
    // animated sprites, but it's not that easy to do
    var&? Sprite_from_desc sprite =
        spawn Sprite_from_desc(&rect, {Resource::load_sprite_desc(desc.res_name)}, true);

    var int width = {width} * sprite!.sprite.frame_size.width;
    do
        { static CollisionMask mask("liquids/water_cmap"); };
        var int i;
        loop i in [0 -> width[ do
            call Game_Put({&mask}, rect.left+i, rect.top, {Groundtype::GP_WATER});
        end
    end

    every SDL_REDRAW do
        var int x = rect.left;
        loop do
            if x >= rect.left+width then
                break;
            end
            x = x + sprite!.sprite.frame_size.width;
            call sprite!.Draw(x, rect.top);
        end
    end

#if 0
    /* PUBLIC */

    function (void)       =>float     get_z_pos;
    function (_Vector3f&&)=>void      set_pos;
    function (void)       =>_Vector3f get_pos;
    function (void)=>float get_z_pos do
        return 0;
    end
    function (_Vector3f&& p)=>void set_pos do
        this.rect.left = p:x;
        this.rect.top  = p:y;
    end
    function (void)=>_Vector3f get_pos do
        return _Vector3f(this.rect.left, this.rect.top, 0);
    end
#endif
end

#endif
