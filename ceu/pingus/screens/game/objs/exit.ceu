#ifdef _EXIT_CEU
#error multiple include
#else
#define _EXIT_CEU

code/await Exit (void) -> FOREVER
do
    {
        static Vector3f p;
        WORLDOBJ_FACTORY_READER.read_vector("position", p);
    }
    var Vector2i pst = val Vector2i({p.x},{p.y});

    var int owner_id = 0;
    { WORLDOBJ_FACTORY_READER.read_int("owner-id", @owner_id); }
    // Set default owner ID to 0
    if (owner_id < 0 or owner_id > 3) then
        owner_id = 0;
    end

    var& RRect r1 = spawn RRect(IRRect(Rect(pst.x,pst.y,_,_),
                                       AnchorXY(AnchorX.Left(), AnchorY.Top()),
                                       &outer.game.offset,
                                       AnchorXY(AnchorX.Center(), AnchorY.Center()),
                                       _, _));
    {
        static ResDescriptor desc1;
        WORLDOBJ_FACTORY_READER.read_desc("surface", desc1);
    };         // TODO: repeated below

    var&? Sprite_from_desc sprite =
        spawn Sprite_from_desc(&r1.pub, {Resource::load_sprite_desc(desc1.res_name)}, &outer.game.dt);

    vector[] byte name = [] .. "core/misc/flag" ..
                            {StringUtil::to_string}(owner_id).c_str() as _char&&;
    var& RRect r2 = spawn RRect(IRRect(Rect(pst.x+40,pst.y,_,_),
                                       AnchorXY(AnchorX.Left(), AnchorY.Top()),
                                       &outer.game.offset,
                                       AnchorXY(AnchorX.Center(), AnchorY.Center()),
                                       _, _));
    spawn Sprite_from_name(&r2.pub, &&name[0] as _char&&, &outer.game.dt);

    do
        {{
            static ResDescriptor desc2;
            WORLDOBJ_FACTORY_READER.read_desc("surface", desc2);
            CollisionMask mask(desc2);
            @(call Game_Remove({&mask},
                               pst.x - sprite!.sprite.frame_size.width/2,
                               pst.y - sprite!.sprite.frame_size.height));
        }};         // TODO: repeated above
    end

    par do
        every outer.game.dt do
            var&? Pingu p;
            loop p in outer.pingus do
                // Make sure this particular exit is allowed for this pingu
    #if 0
    /// TODO
                if (p:get_owner() != this.owner_id) then
                    continue;
                end
    #endif

                // Now, make sure the pingu is within range
                if ( (p!.pingu.rect.off.x > pst.x-1) and
                     (p!.pingu.rect.off.x < pst.x+1) and
                     (p!.pingu.rect.off.y > pst.y-5) and
                     (p!.pingu.rect.off.y < pst.y+5) )
                then
                    // Now, make sure the pingu isn't already exiting, gone, or dead
                    // Pingu actually exits
                    emit p!.pingu.go_action({ActionName::EXITER});
                    break;
                end
            end
        end
    with
        var Vector2i pst3 = call Game_Pos_To_Smallmap(Vector2i(pst.x,pst.y));
        var& Surface_from_name sfc = spawn Surface_from_name("core/misc/smallmap_exit",_);
        var int w = sfc.surface.framebuffer.get_width();
        var int h = sfc.surface.framebuffer.get_height();
        every outer.game.redraw_smallmap do
            call {Display::s_framebuffer}:draw_surface(
                sfc.surface.framebuffer,
                _Vector2i(outer.game.rect_smallmap.abs.x + pst3.x-w/2,
                          outer.game.rect_smallmap.abs.y + pst3.y-h)
            );
        end
    end

    /* PUBLIC */

#if 0
    function (void)=>float get_z_pos do
        return this.pst.z;
    end
    function (_Vector3f&& p)=>void set_pos do
        this.pst = Vector3f(p:x, p:y, p:z);
    end
    function (void)=>_Vector3f get_pos do
        return _Vector3f(this.pst.x, this.pst.y, this.pst.z);
    end
#endif
end

#endif
