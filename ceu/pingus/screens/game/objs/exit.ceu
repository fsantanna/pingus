#ifdef _EXIT_CEU
#error multiple include
#else
#define _EXIT_CEU

code/await Exit (void) -> FOREVER
do
    {
        static Vector3f p;
        WORLDOBJ_FACTORY_READER.read_vector("position", p);
    }
    var Vector2i pst = val Vector2i({p.x},{p.y});

    var int owner_id = 0;
    { WORLDOBJ_FACTORY_READER.read_int("owner-id", @owner_id); }
    // Set default owner ID to 0
    if (owner_id < 0 or owner_id > 3) then
        owner_id = 0;
    end

    var Rect r1 = val Rect(pst.x,pst.y, 0,0);
    {
        static ResDescriptor desc1;
        WORLDOBJ_FACTORY_READER.read_desc("surface", desc1);
    };         // TODO: repeated below

    var&? Sprite_from_desc sprite =
        spawn Sprite_from_desc(&r1, {Resource::load_sprite_desc(desc1.res_name)}, true);

    vector[] byte name = [] .. "core/misc/flag" ..
                            {StringUtil::to_string}(owner_id).c_str() as _char&&;
    var Rect r2 = val Rect(pst.x+40,pst.y, 0,0);
    spawn Sprite_from_name(&r2, &&name[0] as _char&&, true);

    do
        {{
            static ResDescriptor desc2;
            WORLDOBJ_FACTORY_READER.read_desc("surface", desc2);
            CollisionMask mask(desc2);
            @(call Game_Remove({&mask},
                               pst.x - sprite!.sprite.frame_size.width/2,
                               pst.y - sprite!.sprite.frame_size.height));
        }};         // TODO: repeated above
    end

#if 0
/// TODO
    var Rect r3 = val Rect(pst.x,pst.y, 0,0);
    spawn Sprite_from_name(&r3, "core/misc/smallmap_exit", false);
#endif

    every WORLD_UPDATE do
        var&? Pingu p;
        loop p in outer.pingus do
            // Make sure this particular exit is allowed for this pingu
#if 0
/// TODO
            if (p:get_owner() != this.owner_id) then
                continue;
            end
#endif

            // Now, make sure the pingu is within range
            if ( (p!.pingu.rect.left > pst.x-1) and
                 (p!.pingu.rect.left < pst.x+1) and
                 (p!.pingu.rect.top  > pst.y-5) and
                 (p!.pingu.rect.top  < pst.y+5) )
            then
                // Now, make sure the pingu isn't already exiting, gone, or dead
                // Pingu actually exits
                emit p!.pingu.go_action({ActionName::EXITER});
                break;
            end
        end
    end

    /* PUBLIC */

#if 0
    function (void)=>float get_z_pos do
        return this.pst.z;
    end
    function (_Vector3f&& p)=>void set_pos do
        this.pst = Vector3f(p:x, p:y, p:z);
    end
    function (void)=>_Vector3f get_pos do
        return _Vector3f(this.pst.x, this.pst.y, this.pst.z);
    end
#endif
end

#endif
