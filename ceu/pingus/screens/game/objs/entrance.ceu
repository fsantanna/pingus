#ifdef _ENTRANCE_CEU
#error multiple include
#else
#define _ENTRANCE_CEU

code/await Entrance (var Vector2i pst_offset)
                        -> (var Vector2i pst)
                            -> FOREVER
do
    {
        static Vector3f p;
        WORLDOBJ_FACTORY_READER.read_vector("position", p);
    }
    pst = val Vector2i(pst_offset.x+{p.x}, pst_offset.y+{p.y});

    var int owner_id = 0;
    { WORLDOBJ_FACTORY_READER.read_int("owner-id", @owner_id); }
    // Set default owner ID to 0
    if (owner_id < 0 or owner_id > 3) then
        owner_id = 0;
    end

    var int release_rate = 150;
    var s8 direction = {ENTRANCE_MISC};
    {
        WORLDOBJ_FACTORY_READER.read_int("release-rate", @release_rate);

        static std::string direction_str;
        WORLDOBJ_FACTORY_READER.read_string("direction", direction_str);

        if (direction_str == "left")
            @direction = ENTRANCE_LEFT;
        else if (direction_str == "right")
            @direction = ENTRANCE_RIGHT;
        else if (direction_str == "misc")
            @direction = ENTRANCE_MISC;
        else
            log_error("unknown direction: '%1%'", direction_str);
    };

    var Vector2i pst2 = call Game_Pos_To_Smallmap(Vector2i(pst.x,pst.y));
    var& RRect r2 = spawn RRect(IRRect(Rect(pst2.x,pst2.y,_,_),
                                       AnchorXY(AnchorX.Left(), AnchorY.Top()),
                                       nil,_,
                                       _,_));
    spawn Sprite_from_name(&r2.pub, "core/misc/smallmap_entrance", &outer.game.dt, &outer.game.redraw_smallmap);

    var int last_release = 150 - release_rate;
        // wait ~2sec at startup to allow a 'lets go' sound

    var bool last_was_right = false;

    watching outer.game.go_armageddon do
        loop do
            await outer.game.dt
            until outer.game.game_time >= last_release+release_rate;
            last_release = outer.game.game_time;

            var s8 dir;
            if direction == {ENTRANCE_LEFT} then
                dir = {LEFT};
            else/if direction == {ENTRANCE_RIGHT}  then
                dir = {RIGHT};
            else/if direction == {ENTRANCE_MISC} then
                if last_was_right then
                    dir = {LEFT};
                else
                    dir = {RIGHT};
                end
                last_was_right = not last_was_right;
            else
                _log_error("warning direction is wrong: %1%", direction);
                dir = {RIGHT};
            end

            await Pingu_Spawn(owner_id, pst.x as int, pst.y as int, dir);
        end
    end

    await FOREVER;

#if 0
    /* PUBLIC */

    function (void)=>float get_z_pos do
        return this.pos.z;
    end
    function (_Vector3f&& p)=>void set_pos do
        this.pos = Vector3f(p:x, p:y, p:z);
    end
    function (void)=>_Vector3f get_pos do
        return _Vector3f(this.pos.x, this.pos.y, this.pos.z);
    end
#endif
end

#endif
