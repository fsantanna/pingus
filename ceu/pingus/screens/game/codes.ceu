#ifdef _GAME_CODES_CEU
#error multiple include
#else
#define _GAME_CODES_CEU

code/tight Game_Pingu_In (void) -> bool
do
    if outer.game.counter.number_of_released < outer.game.counter.number_of_allowed then
        outer.game.counter.number_of_released = outer.game.counter.number_of_released + 1;
        outer.game.counter.number_of_alive    = outer.game.counter.number_of_alive    + 1;
        escape true;
    else
        escape false;
    end
end

code/tight Game_Pingu_Out (var int status) -> void do
    if status == {PS_DEAD} then
//_assert(0);
        outer.game.counter.number_of_killed = outer.game.counter.number_of_killed + 1;
    else/if status == {PS_EXITED} then
        outer.game.counter.number_of_exited = outer.game.counter.number_of_exited + 1;
    else
        _ceu_dbg_assert(status != {PS_ALIVE});
    end
    outer.game.counter.number_of_alive = outer.game.counter.number_of_alive - 1;
    _ceu_dbg_assert(outer.game.counter.number_of_released == outer.game.counter.number_of_alive  +
                                                  outer.game.counter.number_of_killed +
                                                  outer.game.counter.number_of_exited);
end

code/tight Game_Get_Offset (var& Rect ret) -> void do
    ret = val Rect((outer.game.state.get_pos().x - outer.game.state.get_width()/2),
                   (outer.game.state.get_pos().y - outer.game.state.get_height()/2),
                   0, 0, nil);
end

code/tight Game_Put (var _CollisionMask&& mask,var int x, var int y, var _Groundtype__GPType type) -> void do
    outer.gfx_map.put(mask:get_surface(), x, y);
    outer.gfx_map.get_colmap():put(*mask, x, y, type);
end

code/tight Game_Remove (var _CollisionMask&& mask,var int x,var int y) -> void do
    outer.gfx_map.remove(mask:get_surface(), x, y);
    outer.gfx_map.get_colmap():remove(*mask, x, y);
end

code/tight Game_Get_Colmap (void) -> _CollisionMap_ptr do
    escape outer.gfx_map.get_colmap();
end

code/tight Game_Get_Pos (void) -> Vector2i do
    var Vector2i ret = val Vector2i(outer.game.state.get_pos().x,
                                    outer.game.state.get_pos().y);
    escape ret;
end

code/tight Game_Set_Viewpoint (var int x, var int y) -> void do
    outer.game.state.set_pos(_Vector2i(x, y));
    outer.game.rect.x = x;
    outer.game.rect.y = y;
end

code/tight Game_Pos_To_Smallmap (var Vector2i pst) -> Vector2i do
    var int xx = 6;
    var int yy = {Display::get_size}().height-105;
    var int ww = 175;
    var int hh = 100;

    var Vector2i ret = val Vector2i(outer.game.rect_smallmap.x + pst.x*outer.game.rect_smallmap.w/outer.game.rect.w,
                                    outer.game.rect_smallmap.y + pst.y*outer.game.rect_smallmap.h/outer.game.rect.h);
    escape ret;
end

#endif
