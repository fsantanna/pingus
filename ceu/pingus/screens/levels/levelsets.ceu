#ifdef _LEVELSETS_CEU
#error multiple include
#else
#define _LEVELSETS_CEU

#define LEVELSET_ITEMS_PER_PAGE 4
#define LEVELSET_ITEM_HEIGHT 95

code/await Levelset (var& ILevelUI ui, var int i, var& IRRect rect) -> FOREVER
do
    var& RRect r = spawn RRect(rect);
    var& RectComponent component = spawn RectComponent(&r.pub);

    event bool pse;
    par do
        pause/if pse do
            par do
                every component.component.on_click do
                    emit ui.ok(i);
                end
            with
                // draw background highlight mark
                loop do
                    await component.component.on_pointer_enter;
                    var& RRect rr = spawn RRect(IRRect(Rect(0,0, _,_),
                                                       AnchorXY(AnchorX.Left(), AnchorY.Center()),
                                                       &r.pub,
                                                       AnchorXY(AnchorX.Left(), AnchorY.Center()),
                                                       _, _));

                    spawn Sprite_from_name(&rr.pub, "core/menu/marker", &outer.main.dt);
                    await component.component.on_pointer_leave;
                end
            with
                {
                    static std::string str;
                    str = levelsets[@i]->get_image();
                }
                var& Surface_from_name sfc =
                    spawn Surface_from_name({str.c_str()}, _);
                every outer.main.redraw do
                    call {Display::s_framebuffer}:draw_surface(
                        sfc.surface.framebuffer,
                        _Vector2i(r.pub.abs.x+25, r.pub.abs.y)
                    );

                    call {Fonts::chalk_normal}.render(
                        _origin_top_left,
                        r.pub.abs.x+105, r.pub.abs.y+15,
                        {_(levelsets[@i]->get_title())},
                        *{Display::s_framebuffer}
                    );

                    call {Fonts::chalk_small}.render(
                        _origin_top_left,
                        r.pub.abs.x+105, r.pub.abs.y+40,
                        {_(levelsets[@i]->get_description())},
                        *{Display::s_framebuffer}
                    );

                    call {Fonts::chalk_normal}.render(
                        _origin_top_right,
                        r.pub.abs.x+r.pub.abs.w-25, r.pub.abs.y+15,
                        {(boost::format("%1% %2%%%") % _("Solved:") % levelsets[@i]->get_completion()).str()},
                        *{Display::s_framebuffer}
                    );

                    call {Fonts::chalk_normal}.render(
                        _origin_top_right,
                        r.pub.abs.x+r.pub.abs.w-25, r.pub.abs.y+40,
                        {(boost::format("%1% %2%") % levelsets[@i]->get_level_count() % _("levels")).str()},
                        *{Display::s_framebuffer}
                    );
                end
            end
        end
    with
        loop do
            if i>=ui.item_at_top and
               i<ui.item_at_top+LEVELSET_ITEMS_PER_PAGE
            then
                emit pse(false);
            else
                emit pse(true);
            end
            var int v = await ui.go;
            r.pub.off.y = r.pub.off.y + v;
            emit r.pub.changed;
        end
    end
end

code/await Levelsets (void) -> int do
    {
        static auto directory = Pathname("levelsets", Pathname::DATA_PATH).opendir("*.levelset");
        directory = Pathname("levelsets", Pathname::DATA_PATH).opendir("*.levelset");
        levelsets.clear();
        for(auto i = directory.begin(); i != directory.end(); ++i) {
            try {
                std::shared_ptr<Levelset> levelset = Levelset::from_file(*i);
                //current_levelset = levelset;
                if (!levelset->get_developer_only() || globals::developer_mode) {
                    levelsets.push_back(levelset);
                }
            } catch(const std::exception& err) {
                log_error("%1%", err.what());
            }
        }
#if 0
        if (globals::developer_mode) {
            levelsets.push_back(Levelset::from_directory(_("Under Construction"),
                                                   _("Untested, unpolished and broken levels"),
                                                   "levelsets/underconstruction",
                                                   Pathname("levels", Pathname::DATA_PATH)).release());
        }
#endif
        std::sort(levelsets.begin(), levelsets.end(), LevelsetPrioritySorter());
    };
    var&? LevelUI ui =
        spawn LevelUI({levelsets.size()} as int, LEVELSET_ITEMS_PER_PAGE, LEVELSET_ITEM_HEIGHT);
    var int? ret =
        watching ui do
            pool[] Levelset sets;
            var IRRect r = val IRRect(Rect(44,155, 680-90,LEVELSET_ITEM_HEIGHT-1),
                                      AnchorXY(AnchorX.Left(), AnchorY.Center()),
                                      &ui!.rect,
                                      AnchorXY(AnchorX.Left(), AnchorY.Top()),
                                      _, _);
            var int i;
            loop i in [0 -> {levelsets.size()}[ do
                spawn Levelset(&ui!.ui, i, &r) in sets;
                r.off.y = r.off.y + LEVELSET_ITEM_HEIGHT;
            end

            par do
                var int v = await ui!.ui.ok;
                escape v;   // always >= 0
            with
                every outer.main.redraw do
                    call {Fonts::chalk_large}.render(
                        _origin_top_center,
                        ui!.rect.abs.x + ui!.rect.abs.w/2,
                        ui!.rect.abs.y + 40,
                        __("Levelsets"),
                        *{Display::s_framebuffer}
                    );
                end
            end
        end;
    escape ret!;
end

#endif
