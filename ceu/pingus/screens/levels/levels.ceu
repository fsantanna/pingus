#ifdef _LEVELS_CEU
#error multiple include
#else
#define _LEVELS_CEU

native/pre do
    typedef std::vector<std::shared_ptr<Levelset>> Levelsets;
    struct LevelsetPrioritySorter {
        bool operator()(std::shared_ptr<Levelset> lhs, std::shared_ptr<Levelset> rhs) const {
            return lhs->get_priority() > rhs->get_priority();
        }
    };
    static std::shared_ptr<Levelset> current_levelset;
    static Levelsets levelsets;
end

#define LEVEL_ITEMS_PER_PAGE 10
#define LEVEL_ITEM_HEIGHT 32

////////////////////////////////////////////////////////////////////////////////

data ILevelUI with
    var   int item_at_top = 0;
    event int ok;
    event int go;
end

code/await LevelUI (var int items_total, var int items_per_page, var int item_height)
                    -> (var ILevelUI ui, var& IRRect rect)
                        -> int
do
    ui = _;

    spawn Wood();

    var& RRect r = spawn RRect(IRRect(Rect(0,0, _,_),
                               AnchorXY(AnchorX.Center(), AnchorY.Center()),
                               &outer.main.rect,
                               AnchorXY(AnchorX.Center(), AnchorY.Center()),
                               _, _));
    rect = &r.pub;
    spawn Sprite_from_name(&r.pub, "core/menu/blackboard", &outer.main.dt);

    var& RRect cancel_r = spawn RRect(IRRect(Rect(70,-2, _,_),
                                             AnchorXY(AnchorX.Left(), AnchorY.Bottom()),
                                             &r.pub,
                                             AnchorXY(AnchorX.Left(), AnchorY.Bottom()),
                                             _, _));
    var& SurfaceButton cancel =
        spawn SurfaceButton(&cancel_r.pub,
                            "core/start/back",
                            "core/start/back_clicked",
                            "core/start/back_hover");

    spawn do
        every outer.main.redraw do
            call {Fonts::chalk_normal}.render(
                _origin_top_center,
                cancel_r.pub.abs.x+cancel_r.pub.abs.w/2,
                cancel_r.pub.abs.y,
                __("Back"),
                *{Display::s_framebuffer}
            );
        end
    end

    var& RRect prv_r = spawn RRect(IRRect(Rect(-35,-10, _,_),
                                             AnchorXY(AnchorX.Right(), AnchorY.Bottom()),
                                             &r.pub,
                                             AnchorXY(AnchorX.Right(), AnchorY.Center()),
                                             _, _));
    var& SurfaceButton prv =
        spawn SurfaceButton(&prv_r.pub,
                            "core/menu/arrow_up",
                            "core/menu/arrow_up_pressed",
                            "core/menu/arrow_up_hover");

    var& RRect nxt_r = spawn RRect(IRRect(Rect(-35,10, _,_),
                                             AnchorXY(AnchorX.Right(), AnchorY.Top()),
                                             &r.pub,
                                             AnchorXY(AnchorX.Right(), AnchorY.Center()),
                                             _, _));
    var& SurfaceButton nxt =
        spawn SurfaceButton(&nxt_r.pub,
                            "core/menu/arrow_down",
                            "core/menu/arrow_down_pressed",
                            "core/menu/arrow_down_hover");

    // terminate on ESCAPE or cancel click

    par do
        every cancel.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await cancel.component.on_click;
        escape -1;
    with
        every prv.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        every nxt.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        par do
            every prv.component.on_click do
                if ui.item_at_top > 0 then
                    ui.item_at_top = ui.item_at_top - 1;
                    emit ui.go(item_height);
                end
            end
        with
            every nxt.component.on_click do
                if ui.item_at_top < items_total-items_per_page then
                    ui.item_at_top = ui.item_at_top + 1;
                    emit ui.go(-item_height);
                end
            end
        with
            var _Input__ButtonEvent&& but;
            every but in ON_BUTTON_PRESSED do
                if but:name == {Input::ACTION_DOWN_BUTTON} then
                    emit nxt.component.on_click;
                else/if but:name == {Input::ACTION_UP_BUTTON} then
                    emit prv.component.on_click;
                end
            end
        end
    with
        loop do
            var _Input__ButtonEvent&& but = await ON_BUTTON_PRESSED;
            if but:name == {Input::ESCAPE_BUTTON} then
                escape -1;
            end
        end
    end
end

////////////////////////////////////////////////////////////////////////////////

code/await Level (var& _Levelset levelset, var& ILevelUI ui, var int i, var& IRRect rect)
                    -> FOREVER
do
    var& RRect r = spawn RRect(rect);
    var& RectComponent component = spawn RectComponent(&r.pub);

    event bool pse;
    par do
        pause/if pse do
            par do
/// TODO
                if levelset.get_level(i):accessible as bool then
                    par do
                        every component.component.on_click do
                            emit ui.ok(i);
                        end
                    with
                        // draw background highlight mark
                        loop do
                            await component.component.on_pointer_enter;
                            var& RRect rr = spawn RRect(IRRect(Rect(0,0, _,_),
                                                               AnchorXY(AnchorX.Left(), AnchorY.Center()),
                                                               &r.pub,
                                                               AnchorXY(AnchorX.Left(), AnchorY.Center()),
                                                               _, _));

                            spawn Sprite_from_name(&rr.pub, "core/menu/marker2", &outer.main.dt);
                            await component.component.on_pointer_leave;
                        end
                    end
                else
                    await FOREVER;
                end
            with
                // load checkbox
                var _char&& name;
                if not (levelset.get_level(i):accessible as bool) then
                    name = "core/menu/locked_small";
                else/if levelset.get_level(i):finished as bool then
                    name = "core/menu/checkbox_marked_small";
                else
                    name = "core/menu/checkbox_small";
                end
                var& Surface_from_name sfc = spawn Surface_from_name(name, _);

                every outer.main.redraw do
                    // draw checkbox
                    call {Display::s_framebuffer}:draw_surface(
                        sfc.surface.framebuffer,
                        _Vector2i(r.pub.abs.x+25, r.pub.abs.y)
                    );

                    // draw levelname
                    if {globals::developer_mode} as bool then
                        call {Fonts::chalk_normal}.render(
                            _origin_top_left,
                            r.pub.abs.x+65, r.pub.abs.y+4,
                            __(levelset.get_level(i):plf.get_resname()),
                            *{Display::s_framebuffer}
                        );
                    else
                        call {Fonts::chalk_normal}.render(
                            _origin_top_left,
                            r.pub.abs.x+65, r.pub.abs.y+4,
                            __(levelset.get_level(i):plf.get_levelname()),
                            *{Display::s_framebuffer}
                        );
                    end
                end
            end
        end
    with
        loop do
            if i>=ui.item_at_top and
               i<ui.item_at_top+LEVEL_ITEMS_PER_PAGE
            then
                emit pse(false);
            else
                emit pse(true);
            end
            var int v = await ui.go;
            r.pub.off.y = r.pub.off.y + v;
            emit r.pub.changed;
        end
    end
end

code/await Levels (var& _Levelset levelset) -> int
do
    vector[] byte title = [] .. (levelset.get_title().c_str() as _char&&);
    vector[] byte image = [] .. (levelset.get_image().c_str() as _char&&);
    var int count = levelset.get_level_count() as int;

    //levelset.refresh();
    var&? LevelUI ui = spawn LevelUI(levelset.get_level_count() as int, LEVEL_ITEMS_PER_PAGE, LEVEL_ITEM_HEIGHT);
    var int? ret =
        watching ui do
            {
                static std::string str;
                str = @levelset.get_image();
            }
            var& RRect r1 = spawn RRect(IRRect(Rect(100,85, _,_),
                                               AnchorXY(AnchorX.Center(), AnchorY.Center()),
                                               &ui!.rect,
                                               AnchorXY(AnchorX.Left(), AnchorY.Top()),
                                               _, _));
            spawn Sprite_from_name(&r1.pub, {str.c_str()}, &outer.main.dt);

            var& RRect r2 = spawn RRect(IRRect(Rect(-100,85, _,_),
                                               AnchorXY(AnchorX.Center(), AnchorY.Center()),
                                               &ui!.rect,
                                               AnchorXY(AnchorX.Right(), AnchorY.Top()),
                                               _, _));
            spawn Sprite_from_name(&r2.pub, {str.c_str()}, &outer.main.dt);

            pool[] Level levels;

            var IRRect r = val IRRect(Rect(44,155, 680-90,LEVEL_ITEM_HEIGHT-1),
                                      AnchorXY(AnchorX.Left(), AnchorY.Center()),
                                      &ui!.rect,
                                      AnchorXY(AnchorX.Left(), AnchorY.Top()),
                                      _, _);

            var int i;
            loop i in [0->levelset.get_level_count() as int[ do
                spawn Level(&levelset, &ui!.ui, i, &r) in levels;
                r.off.y = r.off.y + LEVEL_ITEM_HEIGHT;
            end

            par do
                var int v = await ui!.ui.ok;
                escape v;   // always >= 0
            with
                every outer.main.redraw do
                    call {Fonts::chalk_large}.render(
                        _origin_top_center,
                        ui!.rect.abs.x + ui!.rect.abs.w/2,
                        ui!.rect.abs.y + 40,
                        __(levelset.get_title()),
                        *{Display::s_framebuffer}
                    );
                end
            end
        end;
    escape ret!;
end

#endif
