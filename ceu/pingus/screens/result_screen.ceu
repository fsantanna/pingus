#ifndef _RESULT_SCREEN
#define _RESULT_SCREEN

native/pre do
    ##include "pingus/string_format.hpp"
end

#include "../../engine/display/sprite.ceu"
#include "../../engine/gui/surface_button.ceu"
#include "../components/wood.ceu"

class ResultScreen with
    var _Result& result;
do
    var bool has_succeeded = result.success();
    var int n_killed = result.killed;

    {
        static std::string RESULT_SCREEN_time_str;
    };
    if result.max_time == -1 then
        _RESULT_SCREEN_time_str = "-";
    else
        _RESULT_SCREEN_time_str = _XXX_PURE(
            {GameTime::ticks_to_realtime_string}(
                {std::max}(0, result.max_time - result.used_time))
        );
    end

    var char[] level_name = [] ..  (char&&)__(result.plf.get_levelname()).c_str();
    var char[] message;
    if has_succeeded then
        if (result.killed == 0 and result.saved == result.total) then
            message = [] .. "Perfect! You saved everyone possible - great!";
        else/if (result.killed == 0) then
            message = [] .. "No-one got killed, pretty good work.";
        else/if (result.saved == result.needed) then
            message = [] .. "You saved exactly what you needed - you made it, but\nmaybe you can do better?";
        else/if (result.killed >= 5) then
            message = [] .. "Not everybody was saved, but still good work!";
        else
            message = [] .. "What can I say, you made it - congratulations!";
        end
    else
        if (result.killed == result.total) then
            message = [] .. "You killed everybody, not good.";
        else/if (result.saved == 0) then
            message = [] .. "No-one got saved - I know you can do better.";
        else/if (result.saved > 0) then
            message = [] .. "You didn't save enough, but you saved a few.  Next\ntime you might do better.";
        else/if (result.saved + 1 >= result.needed) then
            message = [] .. "Only one more and you would have made it - try again!";
        else/if (result.saved + 5 >= result.needed) then
            message = [] .. "Only a handful more and you would have made it - try again!";
        else
            message = [] .. "Better luck next time!";
        end
    end

    var char[] saved_needed = [] ..  
        (char&&){StringUtil::to_string}((int)result.saved).c_str() .. ['/'] ..
        (char&&){StringUtil::to_string}((int)result.needed).c_str();

    var Rect rect = Rect(
        {Display::get_width()}  / 2,
        {Display::get_height()} / 2,
        0, 0
    );

    var Wood _;
    var Sprite _ = Sprite.build_name(&rect, "core/menu/blackboard");

    var SurfaceButton ok with
        this.x = {Display::get_width()/2}  + 245;
        this.y = {Display::get_height()/2} + 150;
        this.button         = "core/start/ok";
        this.button_pressed = "core/start/ok_clicked";
        this.button_over    = "core/start/ok_hover";
    end;

    var SurfaceButton abort with
        this.x = {Display::get_width()/2}  - 300;
        this.y = {Display::get_height()/2} + 200;
        this.button         = "core/start/back";
        this.button_pressed = "core/start/back_clicked";
        this.button_over    = "core/start/back_hover";
    end;

    var SurfaceButton retry with
        this.x = {Display::get_width()/2}  + 245;
        this.y = {Display::get_height()/2} + 150;
        this.button         = "core/start/ok";
        this.button_pressed = "core/start/ok_clicked";
        this.button_over    = "core/start/ok_hover";
    end;

    if has_succeeded then
        kill abort;
        kill retry;
        {Sound::PingusSound::play_music("success_1.it", 1.f, false);};
    else
        kill ok;
        {Sound::PingusSound::play_music("pingus-2.it", 1.f, false);};
    end

    par do
        every abort.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await abort.component.on_click;
        escape false;
    with
        every retry.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await retry.component.on_click;
        escape true;
    with
        every ok.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await ok.component.on_click;
        call {Sound::PingusSound::play_sound}("yipee");
        escape false;
    with
        loop do
            var _Input__ButtonEvent&& but = await ON_BUTTON_PRESSED;
            if but:name == {Input::PAUSE_BUTTON} then
                escape (not has_succeeded);
            else/if but:name == {Input::FAST_FORWARD_BUTTON} then
                escape (not has_succeeded);
            else/if but:name == {Input::ESCAPE_BUTTON} then
                escape false;
            end
        end
    with
        every REDRAW do
            var int left_x  = {Display::get_width()}/2 - 150;
            var int right_x = {Display::get_width()}/2 + 150;
            var int y = {Display::get_height()}/2 + 40;

            if not has_succeeded then
                // abort button
                call {Fonts::chalk_normal}.render(
                    _origin_top_center,
                    abort.x+55, abort.y-4,
                    __("Give Up"),
                    *{Display::s_framebuffer}
                );
                call {Fonts::chalk_normal}.render(
                    _origin_top_center,
                    retry.x+30, retry.y-24,
                    __("Retry"),
                    *{Display::s_framebuffer}
                );
            end

            call {Fonts::chalk_large}.render(
                _origin_top_center,
                {Display::get_width()}/2, {Display::get_height()}/2-200,
                &&level_name,
                *{Display::s_framebuffer}
            ) finalize with nothing; end;

            if has_succeeded then
                call {Fonts::chalk_large}.render(
                    _origin_top_center,
                    {Display::get_width()}/2, {Display::get_height()}/2-140,
                    __("Success!"),
                    *{Display::s_framebuffer}
                );
                /*gc:print_center(Fonts::pingus_small, gc:get_width()/2, * * * gc:get_height()-30,
                "..:: Press Space to continue ::..");*/
            else
                call {Fonts::chalk_large}.render(
                    _origin_top_center,
                    {Display::get_width()}/2, {Display::get_height()}/2-140,
                    __("Failure!"),
                    *{Display::s_framebuffer}
                );
                /*gc:print_center(Fonts::pingus_normal, gc:get_width()/2, * * gc:get_height()-30,
                "..:: Press Space to retry the level ::..");*/
            end

            call {Fonts::chalk_normal}.render(
                _origin_top_center,
                {Display::get_width()}/2, {Display::get_height()}/2-70,
                &&message,
                *{Display::s_framebuffer}
            ) finalize with nothing; end;

            var int left_x  = {Display::get_width()}/2 - 100;
            var int right_x = {Display::get_width()}/2 + 100;
            var int y = {Display::get_height()}/2 + 10;

            call {Fonts::chalk_normal}.render(
                _origin_top_left,
                left_x, y,
                __("Saved: "),
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
                right_x, y,
                &&saved_needed,
                *{Display::s_framebuffer}
            ) finalize with nothing; end;

            y = y + 30;
            call {Fonts::chalk_normal}.render(
                _origin_top_left,
                left_x, y,
                __("Died: "),
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
                right_x, y,
                {StringUtil::to_string}(n_killed),
                *{Display::s_framebuffer}
            );

            y = y + 30;
            call {Fonts::chalk_normal}.render(
                _origin_top_left,
                left_x, y,
                __("Time left: "),
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
                right_x, y,
                _RESULT_SCREEN_time_str,
                *{Display::s_framebuffer}
            );
        end
    end
end

#endif
