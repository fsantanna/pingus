#ifndef _RESULT_SCREEN
#define _RESULT_SCREEN

native/pre do
    ##include "pingus/string_format.hpp"
end

#include "../../engine/display/sprite.ceu"
#include "../../engine/gui/surface_button.ceu"
#include "../components/wood.ceu"

code/await ResultScreen (var& _Result result) -> bool
do
    var bool has_succeeded = result.success() as bool;
    var int n_killed = result.killed;

    {
        static std::string RESULT_SCREEN_time_str;
    };
    if result.max_time == -1 then
        {RESULT_SCREEN_time_str = "-";}
    else
        {RESULT_SCREEN_time_str = 
            GameTime::ticks_to_realtime_string(std::max(0, @result.max_time - @result.used_time));}
    end

    {
        static std::string str;
        str = _(@result.plf.get_levelname());
    }
    vector[] byte level_name = [] .. ({str.c_str()} as _char&&);

    vector[] byte message;
    if has_succeeded then
        if (result.killed == 0 and result.saved == result.total) then
            message = [] .. "Perfect! You saved everyone possible - great!";
        else/if (result.killed == 0) then
            message = [] .. "No-one got killed, pretty good work.";
        else/if (result.saved == result.needed) then
            message = [] .. "You saved exactly what you needed - you made it, but\nmaybe you can do better?";
        else/if (result.killed >= 5) then
            message = [] .. "Not everybody was saved, but still good work!";
        else
            message = [] .. "What can I say, you made it - congratulations!";
        end
    else
        if (result.killed == result.total) then
            message = [] .. "You killed everybody, not good.";
        else/if (result.saved == 0) then
            message = [] .. "No-one got saved - I know you can do better.";
        else/if (result.saved > 0) then
            message = [] .. "You didn't save enough, but you saved a few.  Next\ntime you might do better.";
        else/if (result.saved + 1 >= result.needed) then
            message = [] .. "Only one more and you would have made it - try again!";
        else/if (result.saved + 5 >= result.needed) then
            message = [] .. "Only a handful more and you would have made it - try again!";
        else
            message = [] .. "Better luck next time!";
        end
    end

    vector[] byte saved_needed = [] ..  
        ({StringUtil::to_string((int)@result.saved)}.c_str() as _char&&) .. [{'/'}] ..
        ({StringUtil::to_string((int)@result.needed)}.c_str() as _char&&);

    var Rect rect = val Rect(
        {Display::get_width()}  / 2,
        {Display::get_height()} / 2,
        0, 0
    );

    spawn Wood();
    spawn Sprite_from_name(&rect, "core/menu/blackboard", false);

/// TODO: only two
    var& IRectComponent ok;
    var Rect ok_r = val Rect({Display::get_width()/2}+245,
                             {Display::get_height()/2}-150, /// TODO: +
                             _,_);
    spawn SurfaceButton(&ok_r,
                        "core/start/ok",
                        "core/start/ok_clicked",
                        "core/start/ok_hover")
            -> (&ok);

    var& IRectComponent abort;
    var Rect abort_r = val Rect({Display::get_width()/2}-300,
                                {Display::get_height()/2}+200,
                                _,_);
    spawn SurfaceButton(&abort_r,
                        "core/start/back",
                        "core/start/back_clicked",
                        "core/start/back_hover")
            -> (&abort);

    var& IRectComponent retry;
    var Rect retry_r = val Rect({Display::get_width()/2}+245,
                                {Display::get_height()/2}+150,
                                _,_);
    spawn SurfaceButton(&retry_r,
                        "core/start/ok",
                        "core/start/ok_clicked",
                        "core/start/ok_hover")
            -> (&retry);

    if has_succeeded then
        ///kill abort;
        ///kill retry;
        {Sound::PingusSound::play_music("success_1.it", 1.f, false);};
    else
        ///kill ok;
        {Sound::PingusSound::play_music("pingus-2.it", 1.f, false);};
    end

    par do
        every abort.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await abort.on_click;
        escape false;
    with
        every retry.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await retry.on_click;
        escape true;
    with
        every ok.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await ok.on_click;
        call {Sound::PingusSound::play_sound}("yipee");
        escape false;
    with
        loop do
            var _Input__ButtonEvent&& but = await ON_BUTTON_PRESSED;
            if but:name == {Input::PAUSE_BUTTON} then
                escape (not has_succeeded);
            else/if but:name == {Input::FAST_FORWARD_BUTTON} then
                escape (not has_succeeded);
            else/if but:name == {Input::ESCAPE_BUTTON} then
                escape false;
            end
        end
    with
        every SDL_REDRAW do
            do
                var int left_x  = {Display::get_width()}/2 - 150;
                var int right_x = {Display::get_width()}/2 + 150;
                var int y = {Display::get_height()}/2 + 40;

                if not has_succeeded then
                    // abort button
                    call {Fonts::chalk_normal}.render(
                        _origin_top_center,
                        abort_r.left+55, abort_r.top-4,
                        __("Give Up"),
                        *{Display::s_framebuffer}
                    );
                    call {Fonts::chalk_normal}.render(
                        _origin_top_center,
                        retry_r.left+30, retry_r.top-24,
                        __("Retry"),
                        *{Display::s_framebuffer}
                    );
                end

                call ({Fonts::chalk_large}.render as /nohold)(
                    _origin_top_center,
                    {Display::get_width()}/2, {Display::get_height()}/2-200,
                    &&level_name[0] as _char&&,
                    *{Display::s_framebuffer}
                );

                if has_succeeded then
                    call {Fonts::chalk_large}.render(
                        _origin_top_center,
                        {Display::get_width()}/2, {Display::get_height()}/2-140,
                        __("Success!"),
                        *{Display::s_framebuffer}
                    );
                    /*gc:print_center(Fonts::pingus_small, gc:get_width()/2, * * * gc:get_height()-30,
                    "..:: Press Space to continue ::..");*/
                else
                    call {Fonts::chalk_large}.render(
                        _origin_top_center,
                        {Display::get_width()}/2, {Display::get_height()}/2-140,
                        __("Failure!"),
                        *{Display::s_framebuffer}
                    );
                    /*gc:print_center(Fonts::pingus_normal, gc:get_width()/2, * * gc:get_height()-30,
                    "..:: Press Space to retry the level ::..");*/
                end

                call ({Fonts::chalk_normal}.render as /nohold)(
                    _origin_top_center,
                    {Display::get_width()}/2, {Display::get_height()}/2-70,
                    &&message[0] as _char&&,
                    *{Display::s_framebuffer}
                );
            end

            do
                var int left_x  = {Display::get_width()}/2 - 100;
                var int right_x = {Display::get_width()}/2 + 100;
                var int y = {Display::get_height()}/2 + 10;

                call {Fonts::chalk_normal}.render(
                    _origin_top_left,
                    left_x, y,
                    __("Saved: "),
                    *{Display::s_framebuffer}
                );
                call ({Fonts::chalk_normal}.render as /nohold)(
                    _origin_top_right,
                    right_x, y,
                    &&saved_needed[0] as _char&&,
                    *{Display::s_framebuffer}
                );

                y = y + 30;
                call {Fonts::chalk_normal}.render(
                    _origin_top_left,
                    left_x, y,
                    __("Died: "),
                    *{Display::s_framebuffer}
                );
                call {Fonts::chalk_normal}.render(
                    _origin_top_right,
                    right_x, y,
                    {StringUtil::to_string}(n_killed),
                    *{Display::s_framebuffer}
                );

                y = y + 30;
                call {Fonts::chalk_normal}.render(
                    _origin_top_left,
                    left_x, y,
                    __("Time left: "),
                    *{Display::s_framebuffer}
                );
                call {Fonts::chalk_normal}.render(
                    _origin_top_right,
                    right_x, y,
                    {RESULT_SCREEN_time_str},
                    *{Display::s_framebuffer}
                );
            end
        end
    end
end

#endif
