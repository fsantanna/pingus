#ifndef _START_SCREEN
#define _START_SCREEN

#include "../../engine/display/sprite.ceu"
#include "../../engine/gui/surface_button.ceu"
#include "../components/wood.ceu"

code/await StartScreen (var& _PingusLevel plf) -> bool
do
    vector[] byte description = [] ..
        ({StringFormat::break_line(_(@plf.get_description()),
                                   800-200,
                                   Fonts::chalk_normal).c_str()} as _char&&);

    var Rect rect = val Rect(
        {Display::get_width()}  / 2,
        {Display::get_height()} / 2,
        0, 0
    );

    spawn Wood();
    spawn Sprite_from_name(_, &rect, "core/menu/blackboard");

    var& IRectComponent start;
    var Rect start_r = val Rect({Display::get_width()/2}+245, {Display::get_height()/2}+150, _,_);
    spawn SurfaceButton(&start_r,
                        "core/start/ok",
                        "core/start/ok_clicked",
                        "core/start/ok_hover")
            -> (&start);

    var& IRectComponent cancel;
    var Rect cancel_r = val Rect({Display::get_width()/2}-300, {Display::get_height()/2}+200, _,_);
    spawn SurfaceButton(&cancel_r,
                        "core/start/back",
                        "core/start/back_clicked",
                        "core/start/back_hover")
            -> (&cancel);

    par do
        every cancel.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await cancel.on_click;
        escape false;
    with
        every start.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await start.on_click;
        call {Sound::PingusSound::play_sound}("yipee");
        escape true;
    with
        loop do
            var _Input__ButtonEvent&& but = await ON_BUTTON_PRESSED;
            if but:name == {Input::PAUSE_BUTTON} then
                escape true;
            else/if but:name == {Input::FAST_FORWARD_BUTTON} then
                escape true;
            else/if but:name == {Input::ESCAPE_BUTTON} then
                escape false;
            end
        end
    with
        every SDL_REDRAW do
            var int left_x  = {Display::get_width()}/2 - 150;
            var int right_x = {Display::get_width()}/2 + 150;
            var int y = {Display::get_height()}/2 + 40;

            // cancel button
            call {Fonts::chalk_normal}.render(
                _origin_top_center,
                cancel_r.left+55, cancel_r.top,
                __("Back"),
                *{Display::s_framebuffer}
            );

            call {Fonts::chalk_large}.render(
                _origin_top_center,
                {Display::get_width()}/2, {Display::get_height()}/2-230,
                __(plf.get_levelname()),
                *{Display::s_framebuffer}
            );
            call ({Fonts::chalk_normal}.render as /nohold)(
                _origin_top_left,
                {Display::get_width()}/2-300, {Display::get_height()}/2-170,
                "TODO-DESCRIPTION", //&&description[0] as _char&&,
                *{Display::s_framebuffer}
            );

            y = y+32;
            y = y+45;

            call {Fonts::chalk_normal}.render(
                _origin_top_left,
                left_x, y,
                __("Number of Pingus: "),
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
                right_x, y,
                {StringUtil::to_string}(plf.get_number_of_pingus()),
                *{Display::s_framebuffer}
            );

            y = y+30;
            call {Fonts::chalk_normal}.render(
                _origin_top_left,
                left_x, y,
                __("Number to Save: "),
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
                right_x, y,
                {StringUtil::to_string}(plf.get_number_to_save()),
                *{Display::s_framebuffer}
            );

            y = y+30;
            call {Fonts::chalk_normal}.render(
                _origin_top_left,
                left_x, y,
                __("Time: "),
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
                right_x, y,
                {GameTime::ticks_to_realtime_string}(plf.get_time()),
                *{Display::s_framebuffer}
            );

            call {Fonts::chalk_small}.render(
                _origin_top_center,
                {Display::get_width()}/2, {Display::get_height()}/2 + 215,
                __("Author: ") + plf.get_author(),
                *{Display::s_framebuffer}
            );

            if {globals::developer_mode} as bool then
                call {Fonts::chalk_small}.render(
                    _origin_top_center,
                    {Display::get_width()}/2, {Display::get_height()}/2-50,
                    plf.get_resname(),
                    *{Display::s_framebuffer}
                );
            end
        end
    end
end

#endif
