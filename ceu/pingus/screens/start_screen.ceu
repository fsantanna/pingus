#ifndef _START_SCREEN
#define _START_SCREEN

native/pre do
    ##include "pingus/string_format.hpp"
end

#include "../../engine/display/sprite.ceu"
#include "../../engine/gui/surface_button.ceu"
#include "../components/wood.ceu"

class StartScreen with
    var _PingusLevel& plf;
do
    var char[] description = [] .. (char&&)
        {StringFormat::break_line}(__(plf.get_description()),
                                   800-200,
                                   {Fonts::chalk_normal}).c_str();

    var Rect rect = Rect(
        {Display::get_width()}  / 2,
        {Display::get_height()} / 2,
        0, 0
    );

    var Wood _;
    var Sprite _ = Sprite.build_name(&rect, "core/menu/blackboard");

    var SurfaceButton start with
        this.x = {Display::get_width()/2}  + 245;
        this.y = {Display::get_height()/2} + 150;
        this.button         = "core/start/ok";
        this.button_pressed = "core/start/ok_clicked";
        this.button_over    = "core/start/ok_hover";
    end;

    var SurfaceButton cancel with
        this.x = {Display::get_width()/2}  - 300;
        this.y = {Display::get_height()/2} + 200;
        this.button         = "core/start/back";
        this.button_pressed = "core/start/back_clicked";
        this.button_over    = "core/start/back_hover";
    end;

    par do
        every cancel.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await cancel.component.on_click;
        escape false;
    with
        every start.component.on_pointer_enter do
            call {Sound::PingusSound::play_sound}("tick");
        end
    with
        await start.component.on_click;
        call {Sound::PingusSound::play_sound}("yipee");
        escape 1;
    with
        loop do
            var _Input__ButtonEvent&& but = await ON_BUTTON_PRESSED;
            if but:name == {Input::PAUSE_BUTTON} then
                escape true;
            else/if but:name == {Input::FAST_FORWARD_BUTTON} then
                escape true;
            else/if but:name == {Input::ESCAPE_BUTTON} then
                escape false;
            end
        end
    with
        every REDRAW do
            var int left_x  = {Display::get_width()}/2 - 150;
            var int right_x = {Display::get_width()}/2 + 150;
            var int y = {Display::get_height()}/2 + 40;

            // cancel button
            call {Fonts::chalk_normal}.render(
                _origin_top_center,
                cancel.x+55, cancel.y,
                __("Back"),
                *{Display::s_framebuffer}
            );

            call {Fonts::chalk_large}.render(
                _origin_top_center,
                {Display::get_width()}/2, {Display::get_height()}/2-230,
                __(plf.get_levelname()),
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_left,
                {Display::get_width()}/2-300, {Display::get_height()}/2-170,
                &&description,
                *{Display::s_framebuffer}
            ) finalize with nothing; end;

            y = y+32;
            y = y+45;

            call {Fonts::chalk_normal}.render(
                _origin_top_left,
                left_x, y,
                __("Number of Pingus: "),
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
                right_x, y,
                {StringUtil::to_string}(plf.get_number_of_pingus()),
                *{Display::s_framebuffer}
            );

            y = y+30;
            call {Fonts::chalk_normal}.render(
                _origin_top_left,
                left_x, y,
                __("Number to Save: "),
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
                right_x, y,
                {StringUtil::to_string}(plf.get_number_to_save()),
                *{Display::s_framebuffer}
            );

            y = y+30;
            call {Fonts::chalk_normal}.render(
                _origin_top_left,
                left_x, y,
                __("Time: "),
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
                right_x, y,
                {GameTime::ticks_to_realtime_string}(plf.get_time()),
                *{Display::s_framebuffer}
            );

            call {Fonts::chalk_small}.render(
                _origin_top_center,
                {Display::get_width()}/2, {Display::get_height()}/2 + 215,
                __("Author: ") + plf.get_author(),
                *{Display::s_framebuffer}
            );

            if {globals::developer_mode} then
                call {Fonts::chalk_small}.render(
                    _origin_top_center,
                    {Display::get_width()}/2, {Display::get_height()}/2-50,
                    plf.get_resname(),
                    *{Display::s_framebuffer}
                );
            end
        end
    end
end

#endif
