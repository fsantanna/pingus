#ifndef _PLAYFIELD_CEU
#define _PLAYFIELD_CEU

input void PLAYFIELD_NEW;
input void PLAYFIELD_DELETE;

interface IPlayfield with
    var   IPingu&&?   current_pingu;
    event void        ok_pingu;
    var   _Playfield& me;
end

native do
    ##include "src/pingus/screens/game_session.hpp"
end

#include "../capture_rectangle.ceu"

class Playfield with
    interface IPlayfield;
    var PinguHolder& pingu_holder;
do
    par do
        var bool was_empty = true;
            // having current_pingu&&? is not enough because it can die and 
            // clear the variable

        every WORLD_UPDATE do
            var Position pos = Position(
                                this.me.state.screen2world(this.me.mouse_pos).x,
                                this.me.state.screen2world(this.me.mouse_pos).y
                               );

            var float min_dist = 500.0;
            var IPingu&&? cur;
            loop pingu in pingu_holder.pingus do
                if pingu:me.is_over((int)pos.x, (int)pos.y) then
                    var float dist = pingu:me.dist((int)pos.x, (int)pos.y);
                    if (dist < min_dist) then
                        min_dist = dist;
                        cur = pingu;
                    end
                end
            end

            var bool has_changed;
            if cur? then
                has_changed = was_empty or
                              (this.current_pingu? and (cur! != this.current_pingu!));
            else
                has_changed = (not was_empty);
            end

            this.current_pingu = cur;
            was_empty = (not cur?);
            if has_changed then
                emit this.ok_pingu;
            end
        end
    with
        // MUST BE UPDATED AFTER MYSELF

        var CaptureRectangle _ with
            this.playfield = &outer;
            this.me        = &outer.me.capture_rectangle;
        end;
        await FOREVER;
    end
end

#endif
