#ifndef _BUTTONPANEL_CEU
#define _BUTTONPANEL_CEU

native do
    ##include "pingus/game_time.hpp"
end

class ActionButtonE with
    event int e;
    var int n = 0;
    var int max;
do
    every v in ON_INPUT_EVENT do
        if v:type != {Input::BUTTON_EVENT_TYPE} then
            continue;
        end
        var _Input__ButtonEvent&& but = &&v:button;
        if but:state != {Input::BUTTON_PRESSED} then
            continue;
        end
        var int inc = 0;
        if but:name == {Input::ACTION_DOWN_BUTTON} then
            inc = 1;
        else/if but:name == {Input::ACTION_UP_BUTTON} then
            inc = -1;
        end
        if inc != 0 then
            this.n = (this.n+inc) % this.max;
            if this.n < 0 then
                this.n = this.n + this.max;
            end
            emit this.e => this.n;
        end
    end
end

class ActionButton with
    var int x;
    var int y;
    var int n;
    var _ActionName__Enum  id_me;
    var _ActionName__Enum& id_out;
    var ActionButtonE&    out;
do
    var Rect rect = Rect(this.x,this.y, 60,38);
    var RectComponent component with
        this.rect  = &rect;
        //this.state = &global:world!:get_state();
    end;

    var char[] name = []
        .. "pingus/player0/"
        ..  (char&&)({ActionName::to_string}(this.id_me).c_str())
        .. "/right";

    var float xf  = this.x;
    var float yf  = this.y;
    var float xf2 = this.x + 20;
    var float yf2 = this.y + 32;

    par do
        if n == 0 then
            var Sprite _ = Sprite.w_xy_name(false, &xf,&yf, "core/buttons/buttonbackgroundhl");
            var Sprite sprite = Sprite.w_xy_name(false, &xf2,&yf2, _XXX_PURE(&&name));
            sprite.is_loop = true;
            this.id_out = this.id_me;
            await out.e;
        end

        loop do
            do
                var Sprite _ = Sprite.w_xy_name(false, &xf,&yf, "core/buttons/buttonbackground");
                var Sprite sprite = Sprite.w_xy_name(false, &xf2,&yf2, _XXX_PURE(&&name));
                sprite.frame_delay = 0;

                par/or do
                    await component.on_primary_button_pressed;
                with
                    var int n = await out.e until n==this.n;
                end
                this.id_out = this.id_me;
                out.n = this.n;
                emit out.e => this.n;
            end
            do
                var Sprite _ = Sprite.w_xy_name(false, &xf,&yf, "core/buttons/buttonbackgroundhl");
                var Sprite sprite = Sprite.w_xy_name(false, &xf2,&yf2, _XXX_PURE(&&name));
                sprite.is_loop = true;
                await out.e;
            end
        end
    with
        every gc in SCREENMANAGER_DRAW do
            if {globals::developer_mode} then
#if 0
                {
                    std::ostringstream out;
                    std::string str = StringUtil::to_string(aholder->get_available(buttons[i].name));
                    out << aholder->get_available(buttons[i].name)
                        << " / "
                        << aholder->get_used(buttons[i].name);
                };
                gc:print_left(Fonts::pingus_small, Vector2i(rect.left + 46, rect.top + 5 + 38*static_cast<int>(i)), out.str());
#endif
            else
                gc:print_center(
                    {Fonts::pingus_small},
                    _Vector2i(this.x+46, this.y+5),
                    {StringUtil::to_string}(_GLOBAL_SERVER:get_action_holder():get_available(this.id_me))
                );
            end
        end
    with
        loop do
            await component.on_pointer_enter;
            watching component.on_pointer_leave do
                every gc in SCREENMANAGER_DRAW do
                    gc:print_left(
                        {Fonts::pingus_small},
                        _Vector2i(this.x+65, this.y+5),
                        {ActionName::to_screenname}(this.id_me)
                    );
                end
            end
        end
    end
end

native do
    std::vector<ActionName::Enum> ButtonPanel_actions;
    void ButtonPanel_load_actions (void) {
        ActionHolder* aholder = GLOBAL_SERVER->get_action_holder();
        ButtonPanel_actions = aholder->get_available_actions();
        std::sort(ButtonPanel_actions.begin(), ButtonPanel_actions.end());
    }
end

class ButtonPanel with
    var _ActionName__Enum action = {ActionName::WALKER};
do
    _ButtonPanel_load_actions();

    var ActionButtonE out with
        this.max = _ButtonPanel_actions.size();
    end;

    var float x = 100;
    var float y = ({Display::get_height()}-150)/2 - /// TODO: screen.size
                    (_ButtonPanel_actions.size()*38/2);

    loop i in _ButtonPanel_actions.size() do
        spawn ActionButton with
            this.x      = x;
            this.y      = y + 38*i;
            this.n      = i;
            this.id_me  = _ButtonPanel_actions[i];
            this.id_out = &outer.action;
            this.out    = &out;
        end;
    end

    await FOREVER;
end

#endif
