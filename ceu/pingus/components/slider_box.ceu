#ifndef _SLIDERBOX_CEU
#define _SLIDERBOX_CEU

class SliderBox with
    var Rect rect;
    var int  max;
    var int  current;
    function (Rect rect, int max, int current)=>SliderBox build;
    event int ok_changed;
do
    function (Rect rect, int max, int current)=>SliderBox build do
        this.rect    = rect;
        this.max     = max;
        this.current = current;
    end

    var RectComponent component with
        this.rect = &outer.rect;
    end;

    par do
        var int x=0,y=0;
        loop do
            (x,y) = await component.on_primary_button_pressed;
            watching ON_PRIMARY_BUTTON_RELEASED do
                loop do
                    var int old = this.current;
                    x = x - this.rect.left;

                    this.current = this.max*x / (rect.width-12);
                    this.current = {Math::clamp}(0, current, max);

                    if this.current != old then
                        emit this.ok_changed => current*5; // scale to [0,100]
                    end

                    (x,y) = await ON_POINTER_MOVE;
                end
            end
        end
    with
        every REDRAW do
            if {globals::developer_mode} then
                call {Display::s_framebuffer}:draw_rect(
                    _Rect(rect.left,rect.width,rect.top,rect.height),
                    _Color(0,255,255)
                );
            end
            if this.current == 0 then
                call {Fonts::chalk_normal}.render(
                    _origin_top_center,
                    rect.left + rect.width/2, rect.top,
                    "off",
                    *{Display::s_framebuffer}
                );
            else
                loop i in this.max do
                    if i < this.current then
                        call {Fonts::chalk_normal}.render(
                            _origin_top_left,
                            rect.left + i*(rect.width-12)/this.max + 6, rect.top,
                            "|",
                            *{Display::s_framebuffer}
                        );
                    end
                end
            end
            call {Fonts::chalk_normal}.render(
                _origin_top_left,
               rect.left, rect.top,
                "[",
                *{Display::s_framebuffer}
            );
            call {Fonts::chalk_normal}.render(
                _origin_top_right,
               rect.left+rect.width, rect.top,
                "]",
                *{Display::s_framebuffer}
            );
        end
    end
end

#endif

