#ifndef _BOMBER_CEU
#define _BOMBER_CEU

native/pre do
    ##include "../src/pingus/colliders/pingu_collider.hpp"
    ##include "../src/pingus/movers/linear_mover.hpp"
    ##include "../src/pingus/particles/pingu_particle_holder.hpp"
    ##include "../src/pingus/pingu_enums.hpp"
end

#include "../right_left_sprites.ceu"

class Bomber with
    interface IPinguAction;
do
    var char[] left  = [] .. "pingus/player"
                          .. (char&&)*this.pingu.me.get_owner_str().c_str()
                          .. "/bomber/left";
    var char[] right = [] .. "pingus/player"
                          .. (char&&)*this.pingu.me.get_owner_str().c_str()
                          .. "/bomber/right";
    var RightLeftSprites sprites with
        this.pingu = &outer.pingu;
        this.left  = &left;
        this.right = &right;
    end;

    call {WorldObj::get_world()->play_sound}("ohno", this.pingu.me.get_pos());

    var _Pingu& pingu_ = &this.pingu.me;
    par do
        /* UPDATE */
        every PINGUHOLDER_UPDATE do
            // XXX_CPP
            {
                Movers::LinearMover mover(WorldObj::get_world(),
                                          THIS(CEU_Bomber)->pingu_->get_pos());
            };
            _mover.update(this.pingu.me.get_velocity(),
                          {Colliders::PinguCollider(pingu_height)});
            this.pingu.me.set_pos(_mover.get_pos());
        end
    with
        /* UPDATE */
        // while the Bomber hasn't 'exploded' yet
        await PINGUHOLDER_UPDATE
        until sprites.get():get_current_frame() == 10;

        // Throwing particles
        {
            WorldObj::get_world()->play_sound("plop",
                THIS(CEU_Bomber)->pingu_->get_pos());
        };
        await PINGUHOLDER_UPDATE
        until sprites.get():get_current_frame() == 13;
        {
            WorldObj::get_world()->get_pingu_particle_holder()->
                add_particle((int)(THIS(CEU_Bomber)->pingu_->get_x()),
                             (int)(THIS(CEU_Bomber)->pingu_->get_y())-5);
        };
        {
            ##include "../../../src/pingus/collision_mask.hpp"
            static CollisionMask bomber_radius(
                    "other/bomber_radius_gfx",
                    "other/bomber_radius"
            );
            WorldObj::get_world()->remove(bomber_radius,
                (int) ((int)(THIS(CEU_Bomber)->pingu_->get_x()) 
                                - (bomber_radius.get_width()/2)),
                (int) ((int)(THIS(CEU_Bomber)->pingu_->get_y()) -
                                16 - (bomber_radius.get_width()/2)));
        };

        do
            var char[] str = [] .. "pingus/player"
                                .. (char&&)*this.pingu.me.get_owner_str().c_str()
                                .. "/explo";
            var SpritePingu _ with
                this.x     = &_XXX_NOHOLD(&&outer.pingu.me.pos_x);
                this.y     = &_XXX_NOHOLD(&&outer.pingu.me.pos_y);
                this.name  = _XXX_PURE(&&str);
            end;
            await PINGUHOLDER_UPDATE;
        end

        // The pingu explode
        await sprites;
        escape {ActionName::DEAD};
    end
end

#endif
