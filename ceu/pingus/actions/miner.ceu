#ifndef _MINER_CEU
#define _MINER_CEU

#include "../pingu_action.ceu"
#include "../right_left_sprites.ceu"

class Miner with
    interface IPinguAction;
do
    function (bool final, int delay_count) => void mine;

    var char[] left  = [] .. "pingus/player"
                          .. (char&&)*this.pingu.me.get_owner_str().c_str()
                          .. "/miner/left";
    var char[] right = [] .. "pingus/player"
                          .. (char&&)*this.pingu.me.get_owner_str().c_str()
                          .. "/miner/right";
    var RightLeftSprites sprites with
        this.left  = &left;
        this.right = &right;
    end;

    par do
        /* UPDATE */
        loop delay_count do
            AWAIT_UNTIL_PINGU(PINGU_UPDATE);
            sprites.get(this.pingu.me.direction).me.update();

            if delay_count%4 != 0 then
                continue;
            end

            if me.rel_getpixel(0,-1) == {Groundtype::GP_NOTHING} then
                // stop mining when in the air
                this.mine(true, delay_count);
                escape {ActionName::WALKER};
            else/if me.rel_getpixel(0,            -1) == {Groundtype::GP_SOLID} or
                    me.rel_getpixel(0, _pingu_height) == {Groundtype::GP_SOLID}
            then
                // stop mining when hitting solid ground
                if (me.rel_getpixel(0, -1) == {Groundtype::GP_SOLID}) then
                    {Sound::PingusSound::play_sound("chink");};
                end
                this.mine(true, delay_count);

                // stop pingu from walking further into the solid.
                this.pingu.me.direction.change();
                escape {ActionName::WALKER};
            else
                // mine and walk forward
                this.mine(false, delay_count);
                this.pingu.me.set_pos(this.pingu.me.get_xi() + this.pingu.me.direction,
                                      this.pingu.me.get_yi() + 1);
            end
        end
    with
        /* DRAW */
        every (me_,gc) in PINGU_DRAW do
            if me_ != &&this.pingu.me then
                continue;
            end
            _GC_COLOR_DRAW(gc, sprites.get(this.pingu.me.direction).me,
                               this.pingu.me.get_pos());
        end
    end

    /* PRIVATE */

    function (bool final, int delay_count) => void mine do
        {
            ##include "../../../src/pingus/collision_mask.hpp"
            static CollisionMask miner_radius(
                    "pingus/common/miner_radius_gfx",
                    "pingus/common/miner_radius");
            static CollisionMask miner_radius_left(
                    "pingus/common/miner_radius_left_gfx",
                    "pingus/common/miner_radius_left");
            static CollisionMask miner_radius_right(
                    "pingus/common/miner_radius_right_gfx",
                    "pingus/common/miner_radius_right");
        };

        if not final then
            if delay_count%2 == 0 then
                // regular mine action
                call {WorldObj::get_world()->remove}(
                    _miner_radius,
                    this.pingu.me.get_xi() - (_miner_radius.get_width()/2)
                        + this.pingu.me.direction,
                    this.pingu.me.get_yi() - _miner_radius.get_height() + 2
                );
            end

        // the last mine action before switching to another action
        else/if this.pingu.me.direction == {Direction::LEFT} then
            call {WorldObj::get_world()->remove}(
                    _miner_radius_left,
                    this.pingu.me.get_xi() - (_miner_radius_left.get_width()/2)
                        + this.pingu.me.direction,
                    this.pingu.me.get_yi() - _miner_radius_left.get_height() + 
            2
            );
        else    // RIGHT
            call {WorldObj::get_world()->remove}(
                    _miner_radius_right,
                    this.pingu.me.get_xi() - (_miner_radius_right.get_width()/2)
                        + this.pingu.me.direction,
                    this.pingu.me.get_yi() - _miner_radius_right.get_height() + 
            2
            );
        end
    end

    /* PUBLIC */

    function (_ActionName__Enum action_name) => bool change_allowed do
        return true;
    end
end

#endif
