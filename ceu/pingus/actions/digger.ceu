#ifndef _DIGGER_CEU
#define _DIGGER_CEU

class Digger with
    interface IPinguAction;
do
    function (void)=>bool have_something_to_dig;
    function (bool final)=>void dig;

    var char[] str = [] .. "pingus/player"
                        .. (char&&)*this.pingu.get_owner_str().c_str()
                        .. "/digger/left";
    var SpritePingu _ with
        this.x    = &_XXX_NOHOLD(&&outer.pingu.pos_x);
        this.y    = &_XXX_NOHOLD(&&outer.pingu.pos_y);
        this.name = _XXX_PURE(&&str);
    end;

    /* UPDATE */
    var int delay_count = 0;
    loop do
        await WORLD_UPDATE;
        delay_count = delay_count + 1;
        if not this.have_something_to_dig() then
            this.dig(true);
            escape {ActionName::WALKER};
        else/if delay_count%4 == 0 then
            this.dig(false);
        end
    end

    function @rec (void)=>bool have_something_to_dig do
        if (this.pingu.rel_getpixel(0,-1) !=  {Groundtype::GP_NOTHING}) then
            if (this.pingu.rel_getpixel(0,-1) ==  {Groundtype::GP_SOLID}) then
                call { Sound::PingusSound::play_sound }("chink");
                return false;
            else
                return true;
            end
        else
            return false;
        end
    end

    function @rec (bool final)=>void dig do
        {
            ##include "../../../src/pingus/collision_mask.hpp"
            static CollisionMask digger_radius(
                    "pingus/common/digger_radius_gfx",
                    "pingus/common/digger_radius"
            );
            static CollisionMask digger_radius_final(
                    "pingus/common/digger_radius_final_gfx",
                    "pingus/common/digger_radius_final_gfx"
            );
        };

        if (not final) then
            call {WorldObj::get_world()->remove}(
                    _digger_radius,
                    this.pingu.get_xi() - _digger_radius.get_width()/2,
                    this.pingu.get_yi() - _digger_radius.get_height() + 2);
        else
            call {WorldObj::get_world()->remove}(
                    _digger_radius_final,
                    this.pingu.get_xi() - _digger_radius.get_width()/2,
                    this.pingu.get_yi() - _digger_radius.get_height() + 2);
        end
        this.pingu.set_pos(this.pingu.get_xi(), this.pingu.get_yi()+1);
    end
end

#endif
