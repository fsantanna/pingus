#ifndef _FALLER_CEU
#define _FALLER_CEU

#include "../right_left_sprites.ceu"
#include "../movers/linear_mover.ceu"

class Faller with
    interface IPinguAction;
do
    function (void) => bool is_tumbling;
    var _Pingu& pingu_ = &this.pingu.me;

    /* UPDATE */
    par do
        loop do
            await WORLD_UPDATE;

            // FIXME: This should be triggered at a later point, when close to
            // FIXME: deadly_velocity or something like that. A translation
            // FIXME: animation for the floater might also help
            if (this.pingu.get_velocity().y > 5.0) then
                var int fall_action = this.pingu.fall_action;
                if fall_action != {ActionName::NONE} then
                    escape fall_action;
                end
            end

            // Apply gravity
            var Vector3f velocity = this.pingu.get_velocity();
            velocity.y = velocity.y + {WorldObj::get_world()->get_gravity()};
            this.pingu.set_velocity(velocity);
            end
    with
        var LinearMover mover with
            this.pingu = &outer.pingu;
        end;
        loop do
            await mover.ok_collided;

            // If the Pingu collided with something...

            var Vector3f velocity = this.pingu.get_velocity();

            if this.pingu.rel_getpixel(0,-1) == {Groundtype::GP_NOTHING} and
               this.pingu.rel_getpixel(0,-2) == {Groundtype::GP_NOTHING} and
               this.pingu.rel_getpixel(0,-3) == {Groundtype::GP_NOTHING} and
               this.pingu.rel_getpixel(1, 0) != {Groundtype::GP_NOTHING} and
               this.pingu.rel_getpixel(1, 0) != {Groundtype::GP_BRIDGE}
            then
                // Make Pingu bounce off wall
                velocity.x = -(velocity.x / 3.0);

                // Make the Pingu face the correct direction.  NB: Pingu 
                // may previously have been facing in the opposite direction of its
                // velocity because of an explosion.
                if (velocity.x > 0.0) then
                    this.pingu.me.direction.right();
                else
                    this.pingu.me.direction.left();
                end
                this.pingu.set_velocity(velocity);

            else/if (velocity.y > 0.0) then
                // If the Pingu collided into something while moving 
                // down...
                // Not lava/water because they are handled in pingu.ceu
                // This is where the jumper bug happens
                //log_info("Reached the unreachable: " << 
                //me.pingu:get_velocity().y);
                if this.previous_action == {ActionName::BLOCKER} then
                    escape (int){ActionName::BLOCKER};
                else
                    escape (int){ActionName::WALKER};
                end

            else // if (velocity.y < 0.0f)
                // If the Pingu collided into something while moving up...
                // Don't make the Pingu go up any further.
                velocity.y = 0;
                velocity.x = (velocity.x / 3.0);
                this.pingu.set_velocity(velocity);
            end
        end
    with
        do
            var char[] left  = [] .. "pingus/player"
                                  ..  (char&&)*this.pingu.get_owner_str().c_str()
                                  .. "/faller/left";
            var char[] right = [] .. "pingus/player"
                                  ..  (char&&)*this.pingu.get_owner_str().c_str()
                                  .. "/faller/right";
            var RightLeftSprites _ with
                this.pingu = &pingu;
                this.left  = &left;
                this.right = &right;
            end;
            await WORLD_UPDATE until this.is_tumbling();
        end
        do
            var char[] left  = [] .. "pingus/player"
                                  ..  (char&&)*this.pingu.get_owner_str().c_str()
                                  .. "/tumbler/left";
            var char[] right = [] .. "pingus/player"
                                  ..  (char&&)*this.pingu.get_owner_str().c_str()
                                  .. "/tumbler/right";
            do RightLeftSprites with
                this.pingu = &pingu;
                this.left  = &left;
                this.right = &right;
            end;
            _assert(0);     // sprite has loop
        end
    end

    /* PRIVATE */

// TODO: not @rec!!
    function @rec (void)=>bool is_tumbling do
        // If we are going fast enough to get smashed, start tumbling
        return {Math::abs}(this.pingu.get_velocity().x) > _deadly_velocity
            or {Math::abs}(this.pingu.get_velocity().y) > _deadly_velocity;
    end
end

#endif
