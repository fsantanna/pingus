#ifndef _FALLER_CEU
#define _FALLER_CEU

#include "../right_left_sprites.ceu"

code/await Faller (void) -> _ActionName__Enum
do
    var _ActionName__Enum previous_action = outer.current_action;

    code/tight Is_Tumbling (void) -> bool do
        // If we are going fast enough to get smashed, start tumbling
        escape {Math::abs(@(call Get_Velocity()).x) > deadly_velocity ||
                Math::abs(@(call Get_Velocity()).y) > deadly_velocity} as bool;
    end

    /* UPDATE */
    par do
        loop do
            await WORLD_UPDATE;

            // FIXME: This should be triggered at a later point, when close to
            // FIXME: deadly_velocity or something like that. A translation
            // FIXME: animation for the floater might also help
            var Vector3f velocity = call Get_Velocity();
            if (velocity.y > 5.0) then
                var _ActionName__Enum fall_action = outer.fall_action;
                if fall_action != {ActionName::NONE} then
                    escape fall_action;
                end
            end

            // Apply gravity
            velocity.y = velocity.y + outer.gravity;
            call Set_Velocity(velocity);
        end
    with
        event& void ok_collided;
        spawn LinearMover() -> (&ok_collided);
        loop do
            await ok_collided;

/// TODO: FIX (from original version in C++)
// For some reasone, the LinearMover detects the collision before the Pingu 
// UPDATE loop. Have to make them detect at the same time, so that the Pingu 
// loop reacts first.
// As a workaround, just delaying here one frame.
await WORLD_UPDATE;

            // If the Pingu collided with something...

            var Vector3f velocity = call Get_Velocity();

            if call Rel_Getpixel(0,-1) == {Groundtype::GP_NOTHING} and
               call Rel_Getpixel(0,-2) == {Groundtype::GP_NOTHING} and
               call Rel_Getpixel(0,-3) == {Groundtype::GP_NOTHING} and
               call Rel_Getpixel(1, 0) != {Groundtype::GP_NOTHING} and
               call Rel_Getpixel(1, 0) != {Groundtype::GP_BRIDGE}
            then
                // Make Pingu bounce off wall
                velocity.x = -(velocity.x / 3.0);

                // Make the Pingu face the correct direction.  NB: Pingu 
                // may previously have been facing in the opposite direction of its
                // velocity because of an explosion.
                if (velocity.x > 0.0) then
                    outer.direction = {RIGHT};
                else
                    outer.direction = {LEFT};
                end
                call Set_Velocity(velocity);

            else/if (velocity.y > 0.0) then
                // If the Pingu collided into something while moving 
                // down...
                // Not lava/water because they are handled in pingu.ceu
                // This is where the jumper bug happens
                //log_info("Reached the unreachable: " << 
                //me.pingu:get_velocity().y);
                if previous_action == {ActionName::BLOCKER} then
                    escape {ActionName::BLOCKER};
                else
                    escape {ActionName::WALKER};
                end

            else // if (velocity.y < 0.0f)
                // If the Pingu collided into something while moving up...
                // Don't make the Pingu go up any further.
                velocity.y = 0;
                velocity.x = (velocity.x / 3.0);
                call Set_Velocity(velocity);
            end
        end
    with
        do
            vector[] byte left  = [] .. "pingus/player"
                                     .. call Get_Owner_Str() as _char&&
                                     .. "/faller/left";
            vector[] byte right = [] .. "pingus/player"
                                     .. call Get_Owner_Str() as _char&&
                                     .. "/faller/right";
            spawn RightLeftSprites(&outer.rect, &outer.direction, &left, &right, true);
            await WORLD_UPDATE until call Is_Tumbling();
        end
        do
            vector[] byte left  = [] .. "pingus/player"
                                  .. call Get_Owner_Str() as _char&&
                                  .. "/tumbler/left";
            vector[] byte right = [] .. "pingus/player"
                                  .. call Get_Owner_Str() as _char&&
                                  .. "/tumbler/right";
            await RightLeftSprites(&outer.rect, &outer.direction, &left, &right, true);
            _ceu_dbg_assert(0);     // sprite has loop
        end
    end
end

#endif
