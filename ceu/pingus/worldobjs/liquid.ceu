#ifndef _LIQUID_CEU
#define _LIQUID_CEU

class Liquid with
    var _FileReader&& reader;

    function (void)       =>float     get_z_pos;
    function (_Vector3f&&)=>void      set_pos;
    function (void)       =>_Vector3f get_pos;
do
    var Vector3f pos;
    { static Vector3f p; };
    this.reader:read_vector("position", _p);
    this.pos = Vector3f(_p.x,_p.y,_p.z);

/// TODO: vector of sprites up to width
    /* Background image */
    // FIXME: would be nice to allow surface manipulation with
    // animated sprites, but it's not that easy to do
    { static ResDescriptor desc; };
    this.reader:read_desc("surface", _desc);
    var _Sprite&? sprite_;
    finalize
        sprite_ = &{new Sprite}(_desc);
    with
        //_delete(&&sprite_!);
    end
    var _Sprite& sprite = &sprite_!;

    var int width = 0;
    this.reader:read_int("repeat", width);
    width = width * this.sprite.get_width();

    do
        { static CollisionMask mask("liquids/water_cmap"); };
        loop i in this.width do
            global:world!:get_colmap():put(_mask,
                             (int)(this.pos.x + (float)(i)),
                             (int)(this.pos.y),
                             {Groundtype::GP_WATER});
        end
    end

    par do
        every WORLD_UPDATE do
            this.sprite.update(0.033);
        end
    with
        every gc in SCREENMANAGER_DRAW do
            var int x = (int)(this.pos.x);
            loop i do
                if x >= (int)(this.pos.x) + this.width then
                    break;
                end
                x = x + this.sprite.get_width();
                global:world!:get_scene_context().color().draw(this.sprite, _Vector3f((float)(x), this.pos.y));
            end
        end
    end

    /* PUBLIC */

    function (void)=>float get_z_pos do
        return this.pos.z;
    end
    function (_Vector3f&& p)=>void set_pos do
        this.pos = Vector3f(p:x, p:y, p:z);
    end
    function (void)=>_Vector3f get_pos do
        return _Vector3f(this.pos.x, this.pos.y, this.pos.z);
    end
end

#endif
