#ifndef _ENTRANCE_CEU
#define _ENTRANCE_CEU

native/pre do
    namespace WorldObjs {
        class Entrance;
    }
    ##define WorldObjs__Entrance WorldObjs::Entrance
end

native do
    ##include "src/pingus/worldobjs/entrance.hpp"
end
native @plain _WorldObjs__Entrance;

input (_WorldObjs__Entrance&&, _FileReader&&) ENTRANCE_NEW;
input _WorldObjs__Entrance&& ENTRANCE_DELETE;

#include "../../engine/display/sprite_pingu.ceu"

class Entrance with
    var _WorldObjs__Entrance& me;
    var _FileReader&&         reader;

    var s8 direction = {WorldObjs::Entrance::MISC};

    function (void)       =>float     get_z_pos;
    function (_Vector3f&&)=>void      set_pos;
    function (void)       =>_Vector3f get_pos;
do
    this.me.ceu = &&this;

    var Vector3f pos;
    { static Vector3f p; };
    this.reader:read_vector("position", _p);
    this.pos = Vector3f(_p.x,_p.y,_p.z);

    var int owner_id;
    this.reader:read_int("owner-id", owner_id);
    // Set default owner ID to 0
    if (owner_id < 0 or owner_id > 3) then
        owner_id = 0;
    end

    var int release_rate = 150;
    this.reader:read_int("release-rate", release_rate);

    { static std::string direction_str; };
    this.reader:read_string("direction", _direction_str);
    {
        if (direction_str == "left")
            THIS(CEU_Entrance)->direction = WorldObjs::Entrance::LEFT;
        else if (direction_str == "right")
            THIS(CEU_Entrance)->direction = WorldObjs::Entrance::RIGHT;
        else if (direction_str == "misc")
            THIS(CEU_Entrance)->direction = WorldObjs::Entrance::MISC;
        else
            log_error("unknown direction: '%1%'", direction_str);
    };

    var _Sprite&? smallmap_symbol;
    finalize
        smallmap_symbol = &{new Sprite}("core/misc/smallmap_entrance");
    with
        //_delete(&&smallmap_symbol!);
    end

    par/or do
        AWAIT_UNTIL_MYSELF(_WorldObjs__Entrance,ENTRANCE_DELETE);
    with
        every smallmap in WORLD_DRAW_SMALLMAP do
            smallmap:draw_sprite(*(&&this.smallmap_symbol!), this.get_pos());
        end
    with
        var int last_release = 150 - release_rate;
            // wait ~2sec at startup to allow a 'lets go' sound

        var bool last_was_right = false;

        loop do
            await WORLD_UPDATE
            until this.me.world:get_time() >= last_release+release_rate;
            last_release = this.me.world:get_time();

            if this.me.world:check_armageddon() then
                break;
            end

            { static Vector3f pos;
              pos.x = THIS(CEU_Entrance)->pos.x;
              pos.y = THIS(CEU_Entrance)->pos.y;
              pos.z = THIS(CEU_Entrance)->pos.z;
            };
            var IPingu&& pingu = _XXX_PURE(
                this.me.world:get_pingus():create_pingu(
                    _pos,
                    this.owner_id));
            if pingu == null then
                continue;
            end

            var s8 dir;
            if this.direction == {WorldObjs::Entrance::LEFT} then
                dir = _LEFT;
            else/if this.direction == {WorldObjs::Entrance::RIGHT}  then
                dir = _RIGHT;
            else/if this.direction == {WorldObjs::Entrance::MISC} then
                if last_was_right then
                    dir = _LEFT;
                else
                    dir = _RIGHT;
                end
                last_was_right = not last_was_right;
            else
                _log_error("warning direction is wrong: %1%", this.direction);
                dir = _RIGHT;
            end
            pingu:set_direction(dir);
        end
    end

    /* PUBLIC */

    function (void)=>float get_z_pos do
        return this.pos.z;
    end
    function (_Vector3f&& p)=>void set_pos do
        this.pos = Vector3f(p:x, p:y, p:z);
    end
    function (void)=>_Vector3f get_pos do
        return _Vector3f(this.pos.x, this.pos.y, this.pos.z);
    end
end

class EntranceFactory with
do
    every (me_,reader_) in ENTRANCE_NEW do
        _printf("ENTRANCE %p %p\n", me_, reader_);
        //spawn Entrance with
            //this.me     = &_XXX_PTR2REF(me_);
            //this.reader = reader_;
        //end;
    end
end

var EntranceFactory _;

#endif
