#ifndef _ENTRANCE_CEU
#define _ENTRANCE_CEU

#include "../../engine/display/sprite.ceu"

native do
    enum EntranceDirection { ENTRANCE_LEFT, ENTRANCE_RIGHT, ENTRANCE_MISC };
end

class Entrance with
    var _FileReader&& reader;
    var Vector3f      pos_offset;

    var s8 direction = _ENTRANCE_MISC;

    function (void)       =>float     get_z_pos;
    function (_Vector3f&&)=>void      set_pos;
    function (void)       =>_Vector3f get_pos;
do
    var Vector3f pos;
    { static Vector3f p; };
    this.reader:read_vector("position", _p);
    this.pos = Vector3f(pos_offset.x + _p.x,
                        pos_offset.y + _p.y,
                        pos_offset.z + _p.z);

    var int owner_id;
    this.reader:read_int("owner-id", owner_id);
    // Set default owner ID to 0
    if (owner_id < 0 or owner_id > 3) then
        owner_id = 0;
    end

    var int release_rate = 150;
    this.reader:read_int("release-rate", release_rate);

    { static std::string direction_str; };
    this.reader:read_string("direction", _direction_str);
    {
        if (direction_str == "left")
            THIS(CEU_Entrance)->direction = ENTRANCE_LEFT;
        else if (direction_str == "right")
            THIS(CEU_Entrance)->direction = ENTRANCE_RIGHT;
        else if (direction_str == "misc")
            THIS(CEU_Entrance)->direction = ENTRANCE_MISC;
        else
            log_error("unknown direction: '%1%'", direction_str);
    };

/// TODO
await SDL_DT;
await SDL_DT;
_printf("< SMALLMAP %p\n", _GLOBAL_SMALLMAP);
_printf("< SMALLMAP %p\n", _GLOBAL_SMALLMAP:ceu);
_printf("< SMALLMAP %p %p\n", _GLOBAL_SMALLMAP:ceu,
                              &&((SmallMap&&)_GLOBAL_SMALLMAP:ceu):rect);
    var Sprite _ with
        this.x = &pos.x;
        this.y = &pos.y;
        this.name = "core/misc/smallmap_entrance";
        this.is_world = false;
        this.rect = &((SmallMap&&)_GLOBAL_SMALLMAP:ceu):rect;
    end;

    var int last_release = 150 - release_rate;
        // wait ~2sec at startup to allow a 'lets go' sound

    var bool last_was_right = false;

    loop do
        await WORLD_UPDATE
        until global:world!:get_time() >= last_release+release_rate;
        last_release = global:world!:get_time();

        if global:world!:check_armageddon() then
            break;
        end

        var s8 dir;
        if this.direction == _ENTRANCE_LEFT then
            dir = _LEFT;
        else/if this.direction == _ENTRANCE_RIGHT  then
            dir = _RIGHT;
        else/if this.direction == _ENTRANCE_MISC then
            if last_was_right then
                dir = _LEFT;
            else
                dir = _RIGHT;
            end
            last_was_right = not last_was_right;
        else
            _log_error("warning direction is wrong: %1%", this.direction);
            dir = _RIGHT;
        end

        emit global:world!:get_pingu_holder().create =>
                (this.pos.x, this.pos.y, dir, this.owner_id);
    end

    /* PUBLIC */

    function (void)=>float get_z_pos do
        return this.pos.z;
    end
    function (_Vector3f&& p)=>void set_pos do
        this.pos = Vector3f(p:x, p:y, p:z);
    end
    function (void)=>_Vector3f get_pos do
        return _Vector3f(this.pos.x, this.pos.y, this.pos.z);
    end
end

#endif
