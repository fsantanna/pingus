#ifndef _GROUNDPIECE_CEU
#define _GROUNDPIECE_CEU

native/pre do
    namespace WorldObjs {
        class Groundpiece;
    }
    ##define WorldObjs__Groundpiece WorldObjs::Groundpiece
    ##define Groundtype__GPType     Groundtype::GPType
    ##define ResourceModifier__Enum ResourceModifier::Enum
end

native do
    ##include "src/pingus/worldobjs/groundpiece.hpp"
end
native @plain _WorldObjs__Groundpiece, _Groundtype__GPType, _ResourceModifier__Enum;

class Groundpiece with
    var _WorldObjs__Groundpiece& me;
    var _FileReader&&            reader;

    function (void)       =>float     get_z_pos;
    function (_Vector3f&&)=>void      set_pos;
    function (void)       =>_Vector3f get_pos;
do
    this.me.ceu = &&this;

    var Vector3f pos;
    { static Vector3f p; };
    this.reader:read_vector("position", _p);
    this.pos = Vector3f(_p.x,_p.y,_p.z);

    do
        { static ResDescriptor desc; };
        this.reader:read_desc("surface", _desc);

        var _Groundtype__GPType gptype = {Groundtype::GP_GROUND};
        this.reader:read_enum("type", gptype, {&Groundtype::string_to_type});

        { CollisionMask mask(desc); };
        // FIXME: overdrawing of bridges and similar things aren't handled here
        if (gptype == {Groundtype::GP_REMOVE}) then
            global:world!:me.remove(_mask, (int)(pos.x), (int)(pos.y));
        else
            global:world!:me.put(_mask, (int)(pos.x), (int)(pos.y), gptype);
        end
    end

    await FOREVER;

    /* PUBLIC */

    function (void)=>float get_z_pos do
        return this.pos.z;
    end
    function (_Vector3f&& p)=>void set_pos do
        this.pos = Vector3f(p:x, p:y, p:z);
    end
    function (void)=>_Vector3f get_pos do
        return _Vector3f(this.pos.x, this.pos.y, this.pos.z);
    end
end

#endif
