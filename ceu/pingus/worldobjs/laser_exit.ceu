#ifndef _LASEREXIT_CEU
#define _LASEREXIT_CEU

native/pre do
    namespace WorldObjs {
        class LaserExit;
    }
    ##define WorldObjs__LaserExit WorldObjs::LaserExit
end

native do
    ##include "src/pingus/worldobjs/laser_exit.hpp"
end
native @plain _WorldObjs__LaserExit;

input (_WorldObjs__LaserExit&&, _FileReader&&) LASEREXIT_NEW;
input _WorldObjs__LaserExit&& LASEREXIT_DELETE;

class LaserExit with
    var _WorldObjs__LaserExit& me;
    var _FileReader&&          reader;

    function (void)       =>float     get_z_pos;
    function (_Vector3f&&)=>void      set_pos;
    function (void)       =>_Vector3f get_pos;
do
    this.me.ceu = &&this;

    var Vector3f pos;
    { static Vector3f p; };
    this.reader:read_vector("position", _p);
    this.pos = Vector3f(_p.x,_p.y,_p.z);

    par/or do
        AWAIT_UNTIL_MYSELF(_WorldObjs__LaserExit,LASEREXIT_DELETE);
    with
        loop do
            do
                var SpritePingu sprite with
                    this.x = &pos.x;
                    this.y = &pos.y;
                    this.name = "traps/laser_exit";
                end;
                sprite.frame_delay = 0;

                var IPingu&& pingu = do
                    loop do
                        await WORLD_UPDATE;
                        var IPingu&&? pingu;
                        loop p in global:world!:get_pingu_holder().pingus do
                            if (p:get_x() < this.pos.x+34+10 and
                                p:get_x() > this.pos.x+34    and
                                p:get_y() < this.pos.y+43+20 and
                                p:get_y() > this.pos.y+43)
                            then
                                escape p;
                            end
                        end
                    end
                end;
                emit pingu:go_action => {ActionName::LASERKILL};
            end

            do SpritePingu with
                this.x = &pos.x;
                this.y = &pos.y;
                this.name = "traps/laser_exit";
            end;
       end
    end

    /* PUBLIC */

    function (void)=>float get_z_pos do
        return this.pos.z;
    end
    function (_Vector3f&& p)=>void set_pos do
        this.pos = Vector3f(p:x, p:y, p:z);
    end
    function (void)=>_Vector3f get_pos do
        return _Vector3f(this.pos.x, this.pos.y, this.pos.z);
    end
end

#endif
