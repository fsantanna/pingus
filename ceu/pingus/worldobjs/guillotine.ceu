#ifndef _GUILLOTINE_CEU
#define _GUILLOTINE_CEU

#include "../../engine/display/sprite.ceu"

class Guillotine with
    pool IPingu[]& pingus;
    var _FileReader&& reader;

    function (void)       =>float     get_z_pos;
    function (_Vector3f&&)=>void      set_pos;
    function (void)       =>_Vector3f get_pos;
do
    var Vector3f pos;
    { static Vector3f p; };
    this.reader:read_vector("position", _p);
    this.pos = Vector3f(_p.x,_p.y,_p.z);

    var Rect r = Rect(pos.x,pos.y, 0,0);
    loop do
        var IPingu&& pingu = do
            var Sprite _ = Sprite.build_name(&r, "traps/guillotineidle");

            loop do
                await WORLD_UPDATE;
                var IPingu&&? pingu;
                loop p in this.pingus do
                    if (p:is_inside((int)(this.pos.x + 38),
                                    (int)(this.pos.y + 90),
                                    (int)(this.pos.x + 42),
                                    (int)(this.pos.y + 98)))
                    then
                        escape p;
                    end
                end
            end
        end;
        var s8 dir = pingu:direction;
        emit pingu:go_action => {ActionName::DEAD};

        do
            var Sprite sprite with
                this.rect = &r;
                if dir == _LEFT then
                    this.name = "traps/guillotinekill/left";
                else
                    this.name = "traps/guillotinekill/right";
                end
            end;
            watching sprite do
                every WORLD_UPDATE do
                    if (sprite.get_current_frame() == 7) then
                        { static Vector3f pos;
                          pos.x = THIS(CEU_Guillotine)->pos.x;
                          pos.y = THIS(CEU_Guillotine)->pos.y;
                          pos.z = THIS(CEU_Guillotine)->pos.z;
                        };
                        //global:world!:play_sound("splash", _pos, 0.5);
                        call {Sound::PingusSound::play_sound}("splash", 0.5, 0.0);
                    end
                end
            end
        end
    end

    /* PUBLIC */

    function (void)=>float get_z_pos do
        return this.pos.z;
    end
    function (_Vector3f&& p)=>void set_pos do
        this.pos = Vector3f(p:x, p:y, p:z);
    end
    function (void)=>_Vector3f get_pos do
        return _Vector3f(this.pos.x, this.pos.y, this.pos.z);
    end
end

#endif
