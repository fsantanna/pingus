#ifndef _SPRITE_PINGUS_CEU
#define _SPRITE_PINGUS_CEU

native/pre do
    ##include "../src/engine/display/sprite_ceu.hpp"
    ##define loop_ loop
end
native @plain _SpriteCeu;

class SpritePingu with
    function (void)=>int get_current_frame;
    function (void)=>int get_frame_count;

    var float& x;
    var float& y;

    // constructor
    var _Surface&&              surface  = null;
    var _SpriteDescription&&    spr_desc = null;
    var _ResourceModifier__Enum spr_mod = {ResourceModifier::ROT0};
    var char&&                  name     = null;
do
    var _SpriteCeu&? me_;
    var _SpriteCeu&  me;

    // constructor
    do
        if surface != null then
            finalize
                me_ = &({new SpriteCeu}(*surface));
            with
                //_delete(&&me_!);
                nothing;    // handled in sprite.ceu/Sprite.cpp with shared_ptr
            end
        else
            if name != null then
                spr_desc = _Resource__load_sprite_desc(name);
            end
            _assert(spr_desc != null);
            finalize
                me_ = &({new SpriteCeu}(
                        *spr_desc,
                        (_ResourceModifier__Enum) spr_mod));
            with
                //_delete(&&me_!);
                nothing;    // handled in sprite.ceu/Sprite.cpp with shared_ptr
            end
        end
        me = &me_!;
    end

    var int total_time = me.frame_delay * (me.array.width * me.array.height);

    me.frame = 0;

    if me.frame_delay == 0 then
        await FOREVER;
    end

    var int tick_count = 0;

    par do
        /* UPDATE */
        loop do
            loop do
                await PINGUHOLDER_UPDATE;
                var float dt = 0.033;   // TODO
                tick_count = tick_count + (int)(dt * 1000);

                if tick_count >= total_time then
                    if me.loop_ then
                        tick_count = tick_count % total_time;
                        me.frame = tick_count / me.frame_delay;
                    end
                    break;
                else
                    me.frame = tick_count / me.frame_delay;
                end

            end
            if not me.loop_ then
                escape 0;
            end
        end
    with
        /* DRAW */
        every gc in PINGUHOLDER_DRAW_OTHERS do
            _GC_COLOR_DRAW(gc, this.me, _Vector3f(x,y,0));
        end
    end

    /* PUBLIC */

    function (void)=>int get_frame_count do
        return me.array.width * me.array.height;
    end

    function (void)=>int get_current_frame do
        return me.frame;
    end
end

#endif
