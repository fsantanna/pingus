#ifndef _SPRITE_PINGUS_CEU
#define _SPRITE_PINGUS_CEU

native/pre do
    ##include "engine/display/display.hpp"
    ##include "engine/display/framebuffer.hpp"
    ##include "engine/display/sdl_framebuffer_surface_impl.hpp"
    ##include "engine/display/sprite_description.hpp"
    ##define loop_ loop
    extern FramebufferSurface* load_framebuffer_sdl_surface(const Pathname& filename, ResourceModifier::Enum modifier);
end
native/plain _FramebufferSurface;

#include "surface.ceu"

data ISprite with
    var Vector2i offset      = val Vector2i(0, 0);
    var Vector2i frame_pos   = val Vector2i(0, 0);
    var Size     frame_size  = val Size(0,0);
    var int      frame_delay = 0;
    var Size     array       = val Size(0,0);
    var bool     is_loop     = false;
    var int      frame       = 0;
end

code/tight Get_Frame_Count (var& ISprite sprite) -> int do
    escape sprite.array.width * sprite.array.height;
end

code/await Sprite_from_name (var& Rect rect, var _char_const_ptr name, var bool is_world)
                                -> (var&? ISprite sprite)
                                    -> void
do
    var& Surface sfc;
    spawn Surface_from_name(name, {ResourceModifier::ROT0}) -> (&sfc);

    var ISprite sprite_ = val ISprite(
        _,
        Vector2i(sfc.desc:frame_pos.x, sfc.desc:frame_pos.y),
        _,
        sfc.desc:speed,
        Size(sfc.desc:array.width, sfc.desc:array.height),
        (sfc.desc:loop_ as bool),
        _,
    );
    sprite = &sprite_;

    sprite_.frame_pos   = val Vector2i(sfc.desc:frame_pos.x, sfc.desc:frame_pos.y);
    sprite_.array       = val Size(sfc.desc:array.width, sfc.desc:array.height);
    sprite_.frame_delay = sfc.desc:speed;
    sprite_.is_loop     = sfc.desc:loop_ as bool;

    if sfc.desc:frame_size.width  == -1 then
        sprite_.frame_size.width  = sfc.framebuffer.get_width()  / sprite_.array.width;
        sprite_.frame_size.height = sfc.framebuffer.get_height() / sprite_.array.height;
    else
        sprite_.frame_size.width  = sfc.desc:frame_size.width;
        sprite_.frame_size.height = sfc.desc:frame_size.height;
    end
    rect.width  = sprite_.frame_size.width;
    rect.height = sprite_.frame_size.height;

    native _vec;
    {
        static Vector2i vec;
        vec = calc_origin(@(sfc.desc:origin),
                          Size(@(sprite_.frame_size.width),
                               @(sprite_.frame_size.height)))
                - @(sfc.desc:offset);
    };
    sprite_.offset = val Vector2i(_vec.x, _vec.y);

    var int total_time = sprite_.frame_delay *
                         (sprite_.array.width * sprite_.array.height);

    sprite_.frame = 0;

    var int tick_count = 0;

    par do
        /* UPDATE */
        loop do
            loop do
                var int dt = _;
                if is_world then
                    await WORLD_UPDATE;
                    dt = 33;   // TODO
                else
                    dt = await SDL_DT;
                end
                if sprite_.frame_delay == 0 then
                    await FOREVER;
                end

                tick_count = tick_count + dt;

                if tick_count >= total_time then
                    if sprite_.is_loop then
                        tick_count = tick_count % total_time;
                        sprite_.frame = tick_count / sprite_.frame_delay;
                    end
                    break;
                else
                    sprite_.frame = tick_count / sprite_.frame_delay;
                end
            end
            if not sprite_.is_loop then
                escape;
            end
        end
    with
        /* DRAW */
        every SDL_REDRAW do
            var float x, y;
            x = rect.left;
            y = rect.top;

            var int xx=0, yy=0;
            if is_world then
                xx = outer.main.offset.x;
                yy = outer.main.offset.y;
            end

#if 0
            call {Display::s_framebuffer}:draw_surface(
                                            sfc.framebuffer,
                                            _Vector2i(x,y),
            );
#endif
            call {Display::s_framebuffer}:draw_surface(
                sfc.framebuffer,
                _Rect(
                    _Vector2i(sprite_.frame_pos.x,sprite_.frame_pos.y) +
                        _Vector2i(sprite_.frame_size.width  * (sprite_.frame%sprite_.array.width),
                                  sprite_.frame_size.height * (sprite_.frame/sprite_.array.width)),
                    _Size(sprite_.frame_size.width,sprite_.frame_size.height)),
                _Vector2i(-xx + x - sprite_.offset.x,
                          -yy + y - sprite_.offset.y)
            );
        end
    end
#if 0
    var bool is_world = true;   // TODO: rename to is_relative
    var Rect&? small_map;   // TODO
    // constructor
    var _Surface&&              surface = null;
    var _SpriteDescription&&    desc    = null;
    var _ResourceModifier__Enum mod     = {ResourceModifier::ROT0};

    if surface != null then
        this.frame_pos   = Vector2i(0, 0);
        this.offset      = Vector2i(0, 0);
        this.array       = Size(sfc.get_width(), sfc.get_height());
        this.frame_delay = 0;
        this.frame_size  = this.array;
    else
...
    end
    //end

    /* PUBLIC */

    function (void)=>int get_current_frame do
        return this.frame;
    end
    function (int frame)=>void set_frame do
        this.frame = frame;
    end

    function (void)=>int get_width do
        return this.frame_size.width;
    end
    function (void)=>int get_height do
        return this.frame_size.height;
    end
    function (int x, int y)=>void draw do
        var int xx=0, yy=0;
        if this.is_world then
            xx = global:offset.x;
            yy = global:offset.y;
        end

        call {Display::s_framebuffer}:draw_surface(
            this.sfc.framebuffer_surface,
            _Rect(
                _Vector2i(this.frame_pos.x,this.frame_pos.y) +
                    _Vector2i(this.frame_size.width  * (this.frame%this.array.width),
                              this.frame_size.height * (this.frame/this.array.width)),
                _Size(this.frame_size.width,this.frame_size.height)),
            _Vector2i(-xx + x - this.offset.x,
                      -yy + y - this.offset.y)
        );
    end
#endif
end

#endif
