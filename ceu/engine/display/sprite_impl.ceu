#ifndef _SPRITE_IMPL_CEU
#define _SPRITE_IMPL_CEU

native/pre do
    ##include "../src/engine/display/sprite_impl.hpp"
    ##define loop_ loop
end
native @plain _SpriteImpl;

input (_SpriteImpl&&,float) SPRITE_IMPL_UPDATE;
input _SpriteImpl&&         SPRITE_IMPL_RESTART;
input _SpriteImpl&&         SPRITE_IMPL_FINISH;

class SpriteImpl with
    function (void)=>_SpriteImpl&& get;

    // constructor
    var _Surface&&              surface  = null;
    var _SpriteDescription&&    spr_desc = null;
    var _ResourceModifier__Enum spr_mod;
do
    var _SpriteImpl&? me__;
    var _SpriteImpl&  me;

    // constructor
    //do
        if surface != null then
            finalize
                me__ = &({new SpriteImpl}(*surface));
            with
                _delete(&&me__!);
            end
        else
            _assert(spr_desc != null);
            finalize
                me__ = &({new SpriteImpl}(
                        *spr_desc,
                        (_ResourceModifier__Enum) spr_mod));
            with
                _delete(&&me__!);
            end
        end
        me = &me__!;
    //end

    function (void)=>_SpriteImpl& get do
        return &&me;
    end

    var int total_time = me.frame_delay *
                        (me.array.width * me.array.height);

    // RESTART LOOP
    loop do
        me.loop_last_cycle = false;
        me.finished = false;
        me.frame = 0;

        if me.frame_delay == 0 then
            await FOREVER;
        end

        var int tick_count = 0;

        par/or do
            AWAIT_UNTIL_MYSELF(_SpriteImpl,SPRITE_IMPL_RESTART);
        with
            par/or do
                AWAIT_UNTIL_MYSELF(_SpriteImpl,SPRITE_IMPL_FINISH);
            with
                // CONTINUOUS SPRITES LOOP (this->loop==true)
                loop do
                    loop do
                        var _SpriteImpl&& me_;
                        var float dt;
                        (me_, dt) = await SPRITE_IMPL_UPDATE
                                    until me_ == &&this.me;
                        tick_count = tick_count + (int)(dt * 1000);

                        if tick_count >= total_time then
                            if me.loop_ then
                                me.loop_last_cycle = true;
                                tick_count = tick_count % total_time;
                                me.frame = tick_count / me.frame_delay;
                            end
                            break;
                        else
                            me.loop_last_cycle = false;
                            me.frame = tick_count / me.frame_delay;
                        end

                    end
                    if not me.loop_ then
                        break;
                    end
                end
            end
            me.finished = true;
            await FOREVER;
        end
    end
    //_printf("delete sprite %p\n", &&this.me);
end

#endif
