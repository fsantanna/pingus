#ifdef _RCT_COMPONENT_CEU
#error multiple include
#else
#define _RCT_COMPONENT_CEU

data IRctComponent with
    event (int,int) on_primary_button_pressed;
    event (int,int) on_primary_button_released;
    event void      on_pointer_enter;
    event void      on_pointer_leave;
    event void      on_click;
end

code/await RctComponent (var& Rct rct)
                            -> (var IRctComponent component)
                                -> FOREVER
do
    component = _;

    code/tight/recursive Rct_is_at (var int x, var int y) -> bool do
        var Rct r = _;
        call/recursive Rct_Off(&outer.rct, &r);
        escape r.x<=x and x<=r.x+r.w
           and r.y<=y and y<=r.y+r.h;
    end

    par do
        loop do
            var int x;
            var int y;
            (x,y) = await ON_PRIMARY_BUTTON_PRESSED
                    until call/recursive Rct_is_at(x,y);
            emit component.on_primary_button_pressed(x,y);
            (x,y) = await ON_PRIMARY_BUTTON_RELEASED;
            if call/recursive Rct_is_at(x,y) then
                emit component.on_click;
            end
            emit component.on_primary_button_released(x,y);
        end
    with
        var bool is_on = false;
        var int x;
        var int y;
        every (x,y) in ON_POINTER_MOVE do
            if call/recursive Rct_is_at(x,y) != is_on then
                is_on = not is_on;
                if is_on then
                    emit component.on_pointer_enter;
                else
                    emit component.on_pointer_leave;
                end
            end
        end
    end
end

#endif
