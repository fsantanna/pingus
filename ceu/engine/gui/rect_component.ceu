#ifndef _RECT_COMPONENT_CEU
#define _RECT_COMPONENT_CEU

data IRectComponent with
    event (int,int) on_primary_button_pressed;
    event void      on_pointer_enter;
    event void      on_pointer_leave;
    event void      on_click;
end

code/tight Rect_is_at (var& Rect rect, var int x, var int y) -> bool do
    escape rect.left<=x and x<=rect.left+rect.width
       and rect.top <=y and y<=rect.top+rect.height;
end

code/await RectComponent (var& Rect rect)
                            -> (var& IRectComponent component)
                                -> FOREVER
do
    var IRectComponent component_ = val IRectComponent(_,_,_,_);
    component = &component_;

    par do
        loop do
            var int x, y;
            (x,y) = await ON_PRIMARY_BUTTON_PRESSED
                    until call Rect_is_at(&rect,x,y);
            emit component_.on_primary_button_pressed(x,y);
            (x,y) = await ON_PRIMARY_BUTTON_RELEASED;
            if call Rect_is_at(&rect,x,y) then
                emit component_.on_click;
            end
        end
    with
        var bool is_on = false;
        var int x,y;
        every (x,y) in ON_POINTER_MOVE do
            if call Rect_is_at(&rect,x,y) != is_on then
                is_on = not is_on;
                if is_on then
                    emit component_.on_pointer_enter;
                else
                    emit component_.on_pointer_leave;
                end
            end
        end
    end
end

#endif
