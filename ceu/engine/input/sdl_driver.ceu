#ifdef _SDL_DRIVER
#error multiple include
#else
#define _SDL_DRIVER

input void SDL_QUIT;
input void SDL_REDRAW;
input int  SDL_DT;

input _SDL_MouseButtonEvent&& SDL_MOUSEBUTTONDOWN;
input _SDL_MouseButtonEvent&& SDL_MOUSEBUTTONUP;
input _SDL_MouseMotionEvent&& SDL_MOUSEMOTION;
input _SDL_KeyboardEvent&& SDL_KEYDOWN;
input _SDL_KeyboardEvent&& SDL_KEYUP;

native/pos do
void SDL_Driver_update (float delta) {
  SDL_Event event;
  while (SDL_PollEvent(&event))
  {
    void* p = &event;
    switch(event.type)
    {
      case SDL_QUIT:
        ceu_input(CEU_INPUT_SDL_QUIT, NULL);
        break;

      case SDL_MOUSEMOTION:
        ceu_input(CEU_INPUT_SDL_MOUSEMOTION, &p);
        break;
      case SDL_MOUSEBUTTONDOWN:
        ceu_input(CEU_INPUT_SDL_MOUSEBUTTONDOWN, &p);
        break;
      case SDL_MOUSEBUTTONUP:
        ceu_input(CEU_INPUT_SDL_MOUSEBUTTONUP, &p);
        break;

      case SDL_VIDEORESIZE:
        //Display::resize(Size(event.resize.w, event.resize.h));
        break;

      case SDL_KEYDOWN:
        //global_event.on_button_press(event.key);
        ceu_input(CEU_INPUT_SDL_KEYDOWN, &p);
        break;
      case SDL_KEYUP:
        //global_event.on_button_release(event.key);
        ceu_input(CEU_INPUT_SDL_KEYUP, &p);
        break;

      case SDL_JOYAXISMOTION:
      case SDL_JOYBUTTONDOWN:
      case SDL_JOYBUTTONUP:
        // TODO
        break;

      default:
        // FIXME: Do something with other events
        break;
    }
  }
}
end

// TODO: may loose events (loop vs every)

code/await SDL_Driver (void) -> FOREVER do
    par do
        loop do
            var _SDL_MouseButtonEvent&& e = await SDL_MOUSEBUTTONDOWN;
            var _SDL_MouseButtonEvent but = *e;
            await async (but) do
                if but.button == _SDL_BUTTON_LEFT then
                    emit ON_PRIMARY_BUTTON_PRESSED(but.x, but.y);
                else
                    emit ON_SECONDARY_BUTTON_PRESSED(but.x, but.y);
                end
            end
        end
    with
        loop do
            var _SDL_MouseButtonEvent&& e = await SDL_MOUSEBUTTONUP;
            var _SDL_MouseButtonEvent but = *e;
            await async (but) do
                if but.button == _SDL_BUTTON_LEFT then
                    emit ON_PRIMARY_BUTTON_RELEASED(but.x, but.y);
                else
                    emit ON_SECONDARY_BUTTON_RELEASED(but.x, but.y);
                end
            end
        end
    with
        loop do
            var _SDL_MouseMotionEvent&& e = await SDL_MOUSEMOTION;
            var _SDL_MouseMotionEvent mot = *e;
            await async (mot) do
                emit ON_POINTER_MOVE(mot.x, mot.y);
            end
        end
    with
        loop do
            var _SDL_KeyboardEvent&&? e;
            var bool is_down = do
                par do
                    e = await SDL_KEYDOWN;
                    escape true;
                with
                    e = await SDL_KEYUP;
                    escape false;
                end
            end;
            var _SDL_KeyboardEvent key = *e!;
            await async (is_down,key) do
                var bool ok = true;
// TODO: problem of initialization
{
                Input__ButtonEvent but;
};
                if key.keysym.sym == _SDLK_p then
                    {but.name = Input::PAUSE_BUTTON;}
                else/if key.keysym.sym == _SDLK_f then
                    {but.name = Input::FAST_FORWARD_BUTTON;}
                else/if key.keysym.sym == _SDLK_s then
                    {but.name = Input::SINGLE_STEP_BUTTON;}
                else/if key.keysym.sym == _SDLK_a then
                    {but.name = Input::ARMAGEDDON_BUTTON;}
                else/if key.keysym.sym == _SDLK_ESCAPE then
                    {but.name = Input::ESCAPE_BUTTON;}
                else
                    ok = false;
                end
                if ok then
                    if is_down then
                        emit ON_BUTTON_PRESSED({&but});
                    else
                        emit ON_BUTTON_RELEASED({&but});
                    end
                end
            end
        end
    end
end

#endif
