code/await Exit (void) -> FOREVER do
    { WORLDOBJ_FACTORY_READER.read_vector("position", p); }
    var Vector2i pst = val Vector2i({p.x},{p.y});
    var int owner_id = 0;
    { WORLDOBJ_FACTORY_READER.read_int("owner-id", @owner_id); }
    if (owner_id < 0 or owner_id > 3) then
        owner_id = 0;
    end
    var& RRect r1 = spawn RRect(IRRect(Rect(pst.x,pst.y,_,_), AnchorXY(AnchorX.Left(), AnchorY.Top()), &outer.game.offset, AnchorXY(AnchorX.Center(), AnchorY.Center()), _, _));
    { WORLDOBJ_FACTORY_READER.read_desc("surface", desc1); };         // TODO: repeated below 
    var&? Sprite_from_desc sprite = spawn Sprite_from_desc(&r1.pub, {Resource::load_sprite_desc(desc1.res_name)}, &outer.game.dt);
    vector[] byte name = [] .. "core/misc/flag" ..  {StringUtil::to_string}(owner_id).c_str() as _char&&;
    var& RRect r2 = spawn RRect(IRRect(Rect(pst.x+40,pst.y,_,_), AnchorXY(AnchorX.Left(), AnchorY.Top()), &outer.game.offset, AnchorXY(AnchorX.Center(), AnchorY.Center()), _, _));
    spawn Sprite_from_name(&r2.pub, &&name[0] as _char&&, &outer.game.dt);
    do
        {{
            WORLDOBJ_FACTORY_READER.read_desc("surface", desc2);
            CollisionMask mask(desc2);
            @(call Game_Remove({&mask}, pst.x - sprite!.sprite.frame_size.width/2, pst.y - sprite!.sprite.frame_size.height));
        }};         // TODO: repeated above
    end
    par do
        every outer.game.dt do
            var&? Pingu p;
            loop p in outer.pingus do
                if ( (p!.pingu.rect.off.x > pst.x-1) and (p!.pingu.rect.off.x < pst.x+1) and (p!.pingu.rect.off.y > pst.y-5) and (p!.pingu.rect.off.y < pst.y+5) ) then
                    emit p!.pingu.go_action({ActionName::EXITER});
                end
            end
        end
    with
        var Vector2i pst3 = call Game_Pos_To_Smallmap(Vector2i(pst.x,pst.y));
        var& Surface_from_name sfc = spawn Surface_from_name("core/misc/smallmap_exit",_);
        var int w = sfc.surface.framebuffer.get_width();
        var int h = sfc.surface.framebuffer.get_height();
        every outer.game.redraw_smallmap do
            call {Display::s_framebuffer}:draw_surface( sfc.surface.framebuffer, _Vector2i(outer.game.rect_smallmap.abs.x + pst3.x-w/2, outer.game.rect_smallmap.abs.y + pst3.y-h));
        end
    end
end
