vector[] byte return_filename;
code/await Worldmap (void) -> int do
    par do
        var int ret = do ()
native/pre do
    struct unlock_nodes {
      void operator()(WorldmapNS::Node<WorldmapNS::Dot*>& node) {
        if (node.data->finished()) {
          for (std::vector<WorldmapNS::EdgeId>::iterator i = node.next.begin(); i != node.next.end(); ++i) {
            WorldmapNS::Edge<WorldmapNS::Path*>& edge = path_graph->graph.resolve_edge(*i);
            path_graph->graph.resolve_node(edge.source).data->unlock();
            path_graph->graph.resolve_node(edge.destination).data->unlock();
          }
        }
      }
    };
end
{
    worldmap = PingusWorldmap(filename);
    path_graph_reader = worldmap.get_graph();
    path_graph.reset(new WorldmapNS::PathGraph(path_graph_reader));
    path_graph->graph.for_each_node(unlock_nodes(path_graph.get()));
    Sound::PingusSound::play_music(worldmap.get_music());
    static WorldmapNS__NodeId id;
    id = path_graph->lookup_node(worldmap.get_default_node());
    static std::string node_name;
    if (StatManager::instance()->get_string(worldmap.get_short_name() + "-current-node", node_name)) { // Just in case that level doesn't exist, look it up.
        id = path_graph->lookup_node(node_name);
    }
}
event (int,int) set_pst;
var Vector2i pst = val Vector2i({path_graph->get_dot(id)->get_pos().x}, {path_graph->get_dot(id)->get_pos().y}); 
var& RRect r = spawn RRect(IRRect(Rect(0,0,outer.main.rect.abs.w,outer.main.rect.abs.w), AnchorXY(AnchorX.Center(), AnchorY.Center()), &outer.main.rect, AnchorXY(AnchorX.Center(), AnchorY.Center()), _,_));
var& IRRect offset = &r.pub;
spawn do
    every outer.main.rect.changed do
        r.pub.off.w = outer.main.rect.abs.w;
        r.pub.off.h = outer.main.rect.abs.h;
        emit set_pst(pst.x, pst.y); // emits r.pub.changed
    end
end
code/tight Get_Offset (void)-> Vector2i do
    var int x = 0;
    do
        var int min;
        var int max;
        var int width  = {worldmap.get_width()};
        if width >= outer.main.rect.abs.w then
            min = outer.main.rect.abs.w/2;
            max = width - outer.main.rect.abs.w/2;
        else
            min = width - outer.main.rect.abs.w/2;
            max = outer.main.rect.abs.w/2;
        end
        x = {Math::clamp}(min, outer.pst.x, max);
    end
    var int y = 0;
    do
        var int min;
        var int max;
        var int height = {worldmap.get_height()};
        if height >= outer.main.rect.abs.h then
            min = outer.main.rect.abs.h/2;
            max = height - outer.main.rect.abs.h/2;
        else
            min = height - outer.main.rect.abs.h/2;
            max = outer.main.rect.abs.h/2;
        end
        y = {Math::clamp}(min, outer.pst.y, max);
    end
    var Vector2i ret = val Vector2i(-x,-y);
    escape ret;
end
spawn do
    var int x;
    var int y;
    every (x,y) in set_pst do
        pst.x = x;
        pst.y = y;
        var Vector2i off = call Get_Offset();
        offset.off.x = off.x;
        offset.off.y = off.y;
        emit offset.changed;
    end
end
emit set_pst(pst.x,pst.y);
{{
    WorldmapNS::LevelDot* leveldot = dynamic_cast<WorldmapNS::LevelDot*>(path_graph->get_dot(id));
    if (leveldot) {
        leveldot->unlock();
    }
}}
par do
    #include "sprite_drawable.ceu"
    pool[] SpriteDrawable draws;
    {
        object_reader = worldmap.get_objects();
        i1 = object_reader.begin();
    };
    loop do
        if {i1 == object_reader.end()} as bool then
            break;
        end
        {
            DO
                const FileReader& f = *i1;
                file_reader = (FileReader*) &f;
        };
        spawn SpriteDrawable() in draws;
        {i1++;}
        { END }
    end
    var IPingus pingus = val IPingus({id},_,_);
    event int ok_escape;
    #include "dots.ceu"
    pool[] StoryDot sds;
    pool[] LevelDot lds;
    spawn (pingus) do
        #include "pingus.ceu"
    end
    var int to = await ok_escape;
    escape to;
end
        end;
        escape ret;
    with
        var& RRect close_r = spawn RRect(IRRect(Rect(0,-2, _,_), AnchorXY(AnchorX.Left(), AnchorY.Bottom()), &outer.main.rect, AnchorXY(AnchorX.Left(), AnchorY.Bottom()), _, _));
        var& SurfaceButton close = spawn SurfaceButton(&close_r.pub, "core/worldmap/leave_button_normal", "core/worldmap/leave_button_pressed", "core/worldmap/leave_button_hover");
        par do
            every outer.main.redraw do
                call {Fonts::chalk_small}.render( _origin_top_center, 44, outer.main.rect.abs.h-25, __("Leave?"), *{Display::s_framebuffer});
            end
        with
            every close.component.on_pointer_enter do
                call {Sound::PingusSound::play_sound}("tick");
            end
        with
            await close.component.on_click;
            escape {WORLDMAP_RETURN_EXIT};
        end
    with
        loop do
            var _Input__ButtonEvent&& but = await ON_BUTTON_PRESSED;
            if but:name == {Input::ESCAPE_BUTTON} then
                escape {WORLDMAP_RETURN_EXIT};
            end
        end
    end
end
code/await Worldmap_Loop (void) -> void do
    {
        story_seen = false;
        StatManager::instance()->get_bool("tutorial-startstory-seen", story_seen);
    }
    if {!story_seen} as bool then
        {
            StatManager::instance()->set_bool("tutorial-startstory-seen", true); // FIXME: Hardcoding tutorial is evil
            reader = FileReader::parse(Pathname("stories/tutorial_intro.story", Pathname::DATA_PATH));
        }
        await Story();
    end
    loop do
        var int ret = await Worldmap();
        if ret=={WORLDMAP_RETURN_STORY_MAP} or ret=={WORLDMAP_RETURN_STORY_CREDITS} then
            { reader = FileReader::parse(Pathname(@(&&outer.return_filename[0] as _char&&), Pathname::DATA_PATH)); }
            var bool is_click = await Story();
            if is_click and ret=={WORLDMAP_RETURN_STORY_CREDITS} then
                { filename_credits = Pathname("credits/pingus.credits",Pathname::DATA_PATH); }
                await Credits();
            end
        else/if ret == {WORLDMAP_RETURN_LEVEL} then
            { plf = PLFResMgr::load_plf(std::string(@(&&outer.return_filename[0] as _char&&))); }
            var& _PingusLevel plf    = &_ID({&plf})    finalize (plf) with end;
            var& _Result      result = &_ID({&result}) finalize (result) with end;
            await Start_Game_Result_Loop(&plf, &result);
        else
            escape;
        end
    end
end
